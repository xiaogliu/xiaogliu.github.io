[{"title":"免代理搭建私有 GPT-4 Turbo（Azure OpenAI）","url":"https://xiaogliu.github.io/2023/12/09/deploy-gpt4-turbo-without-vpn/","content":"<h1 id=\"一-申请-Azure-OpenAI-API-使用资格\"><a href=\"#一-申请-Azure-OpenAI-API-使用资格\" class=\"headerlink\" title=\"一. 申请 Azure OpenAI API 使用资格\"></a>一. 申请 Azure OpenAI API 使用资格</h1><h2 id=\"1-1-重点\"><a href=\"#1-1-重点\" class=\"headerlink\" title=\"1.1 重点\"></a>1.1 重点</h2><ul>\n<li>需要使用企业邮箱，个人邮箱会被拒绝。这里的企业邮箱可以是个人域名下的邮箱，只要不是 @<a href=\"http://gmail.com/\">gmail.com</a>, @<a href=\"http://yahoo.com/\">yahoo.com</a>, @<a href=\"http://hotmail.com/\">hotmail.com</a> 这些就好。</li>\n<li>另外，原则上申请使用资格是代表 <strong>你自己的公司</strong>，所以最好不要使用非你控制的公司邮箱，至于会有怎么的后果我并不清楚，申请时请注意。<br>  <img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_10.42.07.png\" alt=\"代表自己公司\"></li>\n</ul>\n<h2 id=\"1-2-前置工作\"><a href=\"#1-2-前置工作\" class=\"headerlink\" title=\"1.2 前置工作\"></a>1.2 前置工作</h2><p>除了准备企业邮箱，还需要准备好订阅 ID。</p>\n<p>登陆 <a href=\"https://portal.azure.com/\">Azure</a>，然后到搜索 ”订阅“ 即可看到订阅 ID，如果没有 “添加” 即可。</p>\n<blockquote>\n<p>如果不是新用户，需要绑定信用卡。</p>\n</blockquote>\n<blockquote>\n<p>如果是新用户，会默认分配一个 ”Free Trial“ 的订阅 ID，有效期为一个月。如果你申请的 Azure Open AI API 挂在试用订阅 ID 下面，记得升级试用订阅 ID 为正式订阅 ID，不然一个月到期后，试用帐号被删除，这个帐号下面的资源也会同步删除。</p>\n</blockquote>\n<h3 id=\"1-2-1-订阅入口\"><a href=\"#1-2-1-订阅入口\" class=\"headerlink\" title=\"1.2.1 订阅入口\"></a>1.2.1 订阅入口</h3><p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/image1.png\" alt=\"订阅 ID 入口\"></p>\n<h3 id=\"1-2-2在订阅列表中选择要部署的-ID\"><a href=\"#1-2-2在订阅列表中选择要部署的-ID\" class=\"headerlink\" title=\"1.2.2在订阅列表中选择要部署的 ID\"></a>1.2.2在订阅列表中选择要部署的 ID</h3><p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_10.32.57.png\" alt=\"订阅 ID\"></p>\n<h2 id=\"1-3-填写申请表\"><a href=\"#1-3-填写申请表\" class=\"headerlink\" title=\"1.3 填写申请表\"></a>1.3 填写申请表</h2><p>点击 <a href=\"https://go.microsoft.com/fwlink/?linkid=2222006&clcid=0x409&culture=en-us&country=us\">Request Access to Azure OpenAI Service</a> 进去申请页面，一般 24 小时会出结果。</p>\n<blockquote>\n<p>但也有可能遇到进一步审核的情况，会让你提交更多企业资料。这种情况一般是因为你填的公司微软审核无法验证。</p>\n</blockquote>\n<h1 id=\"二-部署-Azure-Open-AI\"><a href=\"#二-部署-Azure-Open-AI\" class=\"headerlink\" title=\"二. 部署 Azure Open AI\"></a>二. 部署 Azure Open AI</h1><p>使用资格申请下来后就可以部署 Azure Open AI 了。</p>\n<h2 id=\"2-1-创建-Azure-OpenAI-实例\"><a href=\"#2-1-创建-Azure-OpenAI-实例\" class=\"headerlink\" title=\"2.1 创建 Azure OpenAI 实例\"></a>2.1 创建 Azure OpenAI 实例</h2><p>搜索 ”Azure OpenAI“ 进入创建流程。</p>\n<h3 id=\"2-1-1-Azure-OpenAI-入口\"><a href=\"#2-1-1-Azure-OpenAI-入口\" class=\"headerlink\" title=\"2.1.1 Azure OpenAI 入口\"></a>2.1.1 Azure OpenAI 入口</h3><p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_10.54.54.png\" alt=\"Azure OpenAI 入口\"></p>\n<h3 id=\"2-1-2-创建新实例\"><a href=\"#2-1-2-创建新实例\" class=\"headerlink\" title=\"2.1.2 创建新实例\"></a>2.1.2 创建新实例</h3><p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_10.55.10.png\" alt=\"创建新实例\"></p>\n<h3 id=\"2-1-3-填写实例信息\"><a href=\"#2-1-3-填写实例信息\" class=\"headerlink\" title=\"2.1.3 填写实例信息\"></a>2.1.3 填写实例信息</h3><p><strong>实例信息中唯一需要关注的是实例区域的选择，因为不同区域 Open AI 的模型不一样。</strong> 比如现在（2023-12-09）如果你想在一个实例中同时部署 <code>gpt-4-1106-preview</code> 和<code>gpt-35-turbo-1106</code> 美国地区只有 West US 满足。点击 <a href=\"https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models\">Azure OpenAI Service models</a> 查看哪些区域有哪些模型。</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_15.04.24.png\" alt=\"填写实例信息\"></p>\n<blockquote>\n<p><code>gpt-4-1106-preview</code> 即 GPT-4 Turbo，比 GPT-4 更强大并且价格更低。所以<a href=\"https://openai.com/pricing\">模型代码及价格</a></p>\n</blockquote>\n<h2 id=\"2-2-部署-Azure-OpenAI-模型\"><a href=\"#2-2-部署-Azure-OpenAI-模型\" class=\"headerlink\" title=\"2.2 部署 Azure OpenAI 模型\"></a>2.2 部署 Azure OpenAI 模型</h2><p>创建 Azure Open AI 实例成功后，便可部署模型。</p>\n<h3 id=\"2-2-1-进入刚刚创建的实例\"><a href=\"#2-2-1-进入刚刚创建的实例\" class=\"headerlink\" title=\"2.2.1 进入刚刚创建的实例\"></a>2.2.1 进入刚刚创建的实例</h3><p>点击 “Create new deployment”</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_11.07.29.png\" alt=\"Deployments\"></p>\n<h3 id=\"2-2-2-填写模型信息\"><a href=\"#2-2-2-填写模型信息\" class=\"headerlink\" title=\"2.2.2 填写模型信息\"></a>2.2.2 填写模型信息</h3><p>填写模型信息后点击 “Create” 就可以创建模型了。</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_11.09.24.png\" alt=\"填写模型信息\"></p>\n<h2 id=\"2-3-获取-Azure-OpenAI-API-信息\"><a href=\"#2-3-获取-Azure-OpenAI-API-信息\" class=\"headerlink\" title=\"2.3 获取 Azure OpenAI API 信息\"></a>2.3 获取 Azure OpenAI API 信息</h2><p>推荐从 Chat –&gt; View Code 中获取这些信息</p>\n<h3 id=\"2-3-1-点击-”View-Code”\"><a href=\"#2-3-1-点击-”View-Code”\" class=\"headerlink\" title=\"2.3.1 点击 ”View Code”\"></a>2.3.1 点击 ”View Code”</h3><p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_11.13.44.png\" alt=\"view code\"></p>\n<h3 id=\"2-3-2-复制-Endpoint-和-Key，后面部署客户端时需要\"><a href=\"#2-3-2-复制-Endpoint-和-Key，后面部署客户端时需要\" class=\"headerlink\" title=\"2.3.2 复制 Endpoint 和 Key，后面部署客户端时需要\"></a>2.3.2 复制 Endpoint 和 Key，后面部署客户端时需要</h3><p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_11.14.52.png\" alt=\"sample code\"></p>\n<h1 id=\"三-部署客户端\"><a href=\"#三-部署客户端\" class=\"headerlink\" title=\"三. 部署客户端\"></a>三. 部署客户端</h1><h2 id=\"3-1-开源客户端选择\"><a href=\"#3-1-开源客户端选择\" class=\"headerlink\" title=\"3.1 开源客户端选择\"></a>3.1 开源客户端选择</h2><p>目前有很多开源的 ChatGPT 客户端，我用的是 <a href=\"https://github.com/Yidadaa/ChatGPT-Next-Web\">ChatGPT-Next-Web</a>。</p>\n<p>它支持多种部署方式，下面是以部署到私人服务器为例，介绍怎么通过 <a href=\"https://github.com/Yidadaa/ChatGPT-Next-Web\">ChatGPT-Next-Web</a> 部署 Azure OpenAI。</p>\n<h2 id=\"3-2-部署到私人服务器\"><a href=\"#3-2-部署到私人服务器\" class=\"headerlink\" title=\"3.2 部署到私人服务器\"></a>3.2 部署到私人服务器</h2><p><a href=\"https://github.com/Yidadaa/ChatGPT-Next-Web\">ChatGPT-Next-Web</a> 最开始只支持 OpenAI 的 API，从 <code>2.9.11</code> 版本开始，已支持 Azure OpenAI 的部署，不同 API 只需要配置对应的环境变量即可。</p>\n<h3 id=\"3-2-1-获取部署-Azure-OpenAI-必要环境变量\"><a href=\"#3-2-1-获取部署-Azure-OpenAI-必要环境变量\" class=\"headerlink\" title=\"3.2.1 获取部署 Azure OpenAI 必要环境变量\"></a>3.2.1 获取部署 Azure OpenAI 必要环境变量</h3><ul>\n<li><strong>AZURE_URL (required)</strong>: <code>https://&#123;azure-resource-url&#125;/openai/deployments/&#123;deploy-name&#125;</code> </li>\n<li><strong>AZURE_API_VERSION (required)</strong>: Azure API Version</li>\n</ul>\n<p>上面两个变量都可以在上文提到的 Endpoint 中获取：<code>https://&#123;azure-resource-name&#125;.openai.azure.com/openai/deployments/&#123;deploy-name&#125;/chat/completions?api-version=&#123;api-version&#125;)</code> </p>\n<blockquote>\n<p>不要直接把 endpoint 放到 AZURE_URL 中，AZURE_URL 只需要 endpoint 的一部分！</p>\n</blockquote>\n<ul>\n<li><strong>AZURE_API_KEY (required)</strong>: Azure API Key</li>\n</ul>\n<h3 id=\"3-2-2-非必要环境变量但最好设置\"><a href=\"#3-2-2-非必要环境变量但最好设置\" class=\"headerlink\" title=\"3.2.2 非必要环境变量但最好设置\"></a>3.2.2 非必要环境变量但最好设置</h3><ul>\n<li><strong>CODE</strong>：在部署 Azure OpenAI 实例时我选择了外网均可访问，如果把 ChatGPT 客户端部署到服务器上，默认外网都可访问，设置 <strong>CODE</strong> 就给自己客户端加了一层密码，只有输入密码后才能使用。如果只在本地使用，该变量可忽略。</li>\n</ul>\n<blockquote>\n<p>如果你部署的客户端外网可访问，这个密码务必设置为强密码，不然可能被<a href=\"https://github.com/Yidadaa/ChatGPT-Next-Web/blob/main/docs/faq-cn.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84-token-%E6%B6%88%E8%80%97%E5%BE%97%E8%BF%99%E4%B9%88%E5%BF%AB\">爆破</a>!</p>\n</blockquote>\n<ul>\n<li><strong>HIDE_USER_API_KEY</strong>：这个参数决定用户是否禁止用户自己的 API key，对于 Azure OpenAI，用户数据它的 API key 也没用，设置为 <code>1</code> 。</li>\n</ul>\n<h3 id=\"3-2-3-部署客户端\"><a href=\"#3-2-3-部署客户端\" class=\"headerlink\" title=\"3.2.3 部署客户端\"></a>3.2.3 部署客户端</h3><p>以 Linux 服务器为例，可使用 <a href=\"https://hub.docker.com/r/yidadaa/chatgpt-next-web/tags\">ChatGPT next web Docker 镜像</a> 实现快速部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name chatgpt-web \\</span><br><span class=\"line\">  -p 9000:3000 \\</span><br><span class=\"line\">  -e AZURE_URL=https://&#123;azure-resource-url&#125;/openai/deployments/&#123;deploy-name&#125; \\</span><br><span class=\"line\">  -e AZURE_API_KEY=&#123;azure-api-key&#125; \\</span><br><span class=\"line\">  -e AZURE_API_VERSION=&#123;azure-api-version&#125; \\</span><br><span class=\"line\">  -e CODE=&#123;app-custom-password&#125; \\</span><br><span class=\"line\">  -e HIDE_USER_API_KEY=1 \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  yidadaa/chatgpt-next-web:latest</span><br></pre></td></tr></table></figure>\n\n<p>上面命令中使用的是服务器 <code>9000</code> 接口，可根据你自己的配置灵活调整。</p>\n<h1 id=\"四-客户端配置\"><a href=\"#四-客户端配置\" class=\"headerlink\" title=\"四. 客户端配置\"></a>四. 客户端配置</h1><h2 id=\"4-1-配置-Auth\"><a href=\"#4-1-配置-Auth\" class=\"headerlink\" title=\"4.1 配置 Auth\"></a>4.1 配置 Auth</h2><p>如果第三步部署成功，访问你的域名应该可以看到如下界面</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/xiaogliu.github.io.image/main/Azure%20Open%20AI%20deployment/iShot_2023-12-09_15.34.08.png\" alt=\"ChatGPT next web\"></p>\n<p>点击 auth，输入配置的密码（<strong>CODE</strong>）后就可以正常访问了。</p>\n<h2 id=\"4-2-聊天记录同步\"><a href=\"#4-2-聊天记录同步\" class=\"headerlink\" title=\"4.2 聊天记录同步\"></a>4.2 聊天记录同步</h2><p>聊天记录默认存储在本地，目前（2023-12-09）ChatGPT next web 支持 WebDAV 和 <a href=\"https://upstash.com/\">UpStash</a> 两种同步方法：</p>\n<ul>\n<li>WebDAV：如果你有外网可访问的 WebDAV，推荐这种同步方法；</li>\n<li>UpStash：如果你没有外网可访问的 WebDAV，可以直接使用 UpStash，免费版本就够用了。UpStash 的同步配置过程请看 ChatGPT next web 文档 <a href=\"https://github.com/Yidadaa/ChatGPT-Next-Web/blob/main/docs/synchronise-chat-logs-cn.md\">synchronise-chat-logs-cn.md</a></li>\n</ul>\n","categories":["AI"],"tags":["ChatGPT"]},{"title":"docker-compose can not use lastest npm package","url":"https://xiaogliu.github.io/2021/03/12/docker-compose-can-not-use-lastest-npm-package/","content":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>前端本地开发时，使用了 docker，但遇到了一个奇怪的问题：本地 npm 包更新后，本地开发一直无法拿到最新代码</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;month-view-page-common&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;file:packages/common&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>最后发现，原来是 docker 使用了缓存的 volumes。解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rebuild, while making sure it doesn&#x27;t use the internal cache </span></span><br><span class=\"line\">docker-compose build --no-cache</span><br><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>docker 不熟悉呀，需要加强 2021-03-12</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://medium.com/@semur.nabiev/how-to-make-docker-compose-volumes-ignore-the-node-modules-directory-99f9ec224561\">NodeJS: Making docker-compose Volumes Ignore the node_modules Directory</a>   </li>\n<li><a href=\"https://github.com/docker/compose/issues/4337\">“docker-compose up” not rebuilding container that has an underlying updated image #4337</a></li>\n</ol>\n","categories":["Tools"],"tags":["cmder","webstorm","sublime"]},{"title":"JavaScript 中的 reducer","url":"https://xiaogliu.github.io/2021/03/10/reducer-in-js/","content":"<p>很长一段时间一直对 <em>reducer</em> 不太理解，reduce 英文含义 “减少”，reducer 可以翻译成“缩减器”，但感觉还是不直观。 直到今天，看到一个函数，豁然开朗：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uniqueKey = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(obj.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, &#123; key &#125;</span>) =&gt;</span> [...acc, key], []));</span><br></pre></td></tr></table></figure>\n<p>这个函数的作用是将一个数组对象元素中的 key 都找出来，然后去重，返回的是 <code>Set</code> 类型的数据。</p>\n<h2 id=\"数组中的-reducer-方法\"><a href=\"#数组中的-reducer-方法\" class=\"headerlink\" title=\"数组中的 reducer 方法\"></a>数组中的 reducer 方法</h2><p>上个函数是数组中 <code>reduce</code> 用法，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">reduce</span>(<span class=\"title function_\">callback</span>( accumulator, currentValue, [, index[, array]] ) [, initialValue])</span><br></pre></td></tr></table></figure>\n<p>Your <strong>reducer</strong> (callback) function’s returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, <strong>single resulting value</strong>.</p>\n<p>重要信息：</p>\n<ol>\n<li>每次 callback function，即 reducer function 返回值都赋值给了 accumulator</li>\n<li>accumulator 在每次循环中会记录下来</li>\n<li>循环结束，accumulator 作为最终值被返回</li>\n</ol>\n<p>关于 initialValue</p>\n<ol>\n<li>如果提供 initalValue，第一次循环时，accumulator 值为 initialValue，currentValue 为数组第一个元素（同时 index 为 0）；</li>\n<li>如果不提供 initalValue，第一次循环时，accumulator 值为数组第一个元素，currentValue 为数组第二个元素（同时 index 为 1，index 始终为 currentValue 的 index）。</li>\n</ol>\n<blockquote>\n<p>如果是空数组，不提供 initialValue 会报错。</p>\n</blockquote>\n<p>至此，可以得出结论：reducer 函数的直观理解是 <strong>将多个值（或者对值可能产生的副作用）通过压缩（减少）处理，返回一个</strong>。</p>\n<p>比如，数组中 <code>reduce</code> 方法可以理解成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">数组（多个值）-- reducer 函数 --&gt; 单个值</span><br></pre></td></tr></table></figure>\n<h2 id=\"redux-中的-reducer\"><a href=\"#redux-中的-reducer\" class=\"headerlink\" title=\"redux 中的 reducer\"></a>redux 中的 reducer</h2><p>redux 中也有 reducer，他的作用也能直观理解成 <strong>将多个值（或者对值可能产生的副作用）通过压缩（减少）处理，返回一个</strong>，reducer 接收 state 以及 action（对 state 产生副作用），然后（压缩 preState 和 action）返回新的 state，简单流程是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">preState + action -- reducer 函数 --&gt; newState</span><br></pre></td></tr></table></figure>\n<p>参考问题 <a href=\"https://stackoverflow.com/questions/34376023/why-are-reduxs-state-functions-called-reducers\">Why are Redux’s state functions called reducers?</a></p>\n<h2 id=\"react-hook-中的-useReducer\"><a href=\"#react-hook-中的-useReducer\" class=\"headerlink\" title=\"react hook 中的 useReducer\"></a>react hook 中的 useReducer</h2><p>react hook 有一个 <code>useReducer</code>，它可以接收一个 reducer 函数，这里的 reducer 函数和 redux 中含义一直：接收 state 和 action，返回新的 state。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, dispatch] = <span class=\"title function_\">useReducer</span>(reducer, initialArg, init);</span><br></pre></td></tr></table></figure>\n<h2 id=\"reducer-其他应用\"><a href=\"#reducer-其他应用\" class=\"headerlink\" title=\"reducer 其他应用\"></a>reducer 其他应用</h2><p>比如数组去重</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uniqueArr = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(acc, cur, acc.<span class=\"title function_\">indexOf</span>(cur) === -<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> acc.<span class=\"title function_\">indexOf</span>(cur) === -<span class=\"number\">1</span> ? acc.<span class=\"title function_\">concat</span>(cur) : acc;</span><br><span class=\"line\">&#125;, []); <span class=\"comment\">// 设置初始值，避免数组为空时报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>reducer 函数的直观理解是 <strong>将多个值（或者对值可能产生的副作用）通过压缩（减少）处理，返回一个</strong>。</p>\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"Enzyme dive() 和 shallow() 的区别","url":"https://xiaogliu.github.io/2020/10/14/the-difference-between-dive-and-shallow/","content":"<p>ShallowWrapper API 中有两个易混的 <code>.dive()</code> 和 <code>.shallow()</code>，调用它们都会返回 <code>ShallowWrapper</code>，但他们在使用场景和执行过程中都有所区别。</p>\n<h1 id=\"API-定义\"><a href=\"#API-定义\" class=\"headerlink\" title=\"API 定义\"></a>API 定义</h1><ul>\n<li><p><code>.dive([options]) =&gt; ShallowWrapper</code></p>\n<p>Shallow render the one non-DOM child of the current wrapper, and return a wrapper around the result.</p>\n<blockquote>\n<p><code>non-DOM child</code> 指的是 非 dom 的 reactElement（不能是 div span 等）</p>\n</blockquote>\n</li>\n<li><p><code>.shallow([options]) =&gt; ShallowWrapper</code></p>\n<p>Shallow renders the current node and returns a shallow wrapper around it.</p>\n</li>\n</ul>\n<h1 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h1><ul>\n<li><p><code>.dive()</code> <a href=\"https://github.com/enzymejs/enzyme/blob/master/packages/enzyme/src/ShallowWrapper.js#L1700\">源码</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Primarily useful for HOCs (higher-order components), this method may only be</span></span><br><span class=\"line\"><span class=\"comment\"> * run on a single, non-DOM node, and will return the node, shallow-rendered.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; <span class=\"variable\">options</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">ShallowWrapper</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">dive</span>(<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> adapter = <span class=\"title function_\">getAdapter</span>(<span class=\"variable language_\">this</span>[<span class=\"variable constant_\">OPTIONS</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;dive&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">single</span>(name, <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &amp;&amp; n.<span class=\"property\">nodeType</span> === <span class=\"string\">&#x27;host&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">`ShallowWrapper::<span class=\"subst\">$&#123;name&#125;</span>() can not be called on Host Components`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = <span class=\"title function_\">getAdapter</span>(<span class=\"variable language_\">this</span>[<span class=\"variable constant_\">OPTIONS</span>]).<span class=\"title function_\">nodeToElement</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">isCustomComponentElement</span>(el, adapter)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">`ShallowWrapper::<span class=\"subst\">$&#123;name&#125;</span>() can only be called on components`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> childOptions = <span class=\"title function_\">makeInheritedChildOptions</span>(<span class=\"variable language_\">this</span>, options);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">wrap</span>(el, <span class=\"literal\">null</span>, childOptions);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>.shallow()</code> <a href=\"https://github.com/enzymejs/enzyme/blob/master/packages/enzyme/src/ShallowWrapper.js#L1288\">源码</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Shallow renders the current node and returns a shallow wrapper around it.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">NOTE:</span> can only be called on wrapper of a single node.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; <span class=\"variable\">options</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">ShallowWrapper</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">shallow</span>(<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">single</span>(<span class=\"string\">&#x27;shallow&#x27;</span>, <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> childOptions = <span class=\"title function_\">makeInheritedChildOptions</span>(<span class=\"variable language_\">this</span>, options);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">wrap</span>(<span class=\"title function_\">getAdapter</span>(<span class=\"variable language_\">this</span>[<span class=\"variable constant_\">OPTIONS</span>]).<span class=\"title function_\">nodeToElement</span>(n), <span class=\"literal\">null</span>, childOptions);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们可以将 <code>.dive()</code> 源码稍作变化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">dive</span>(<span class=\"params\">options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">single</span>(<span class=\"string\">&#x27;dive&#x27;</span>, <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误判断-start</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &amp;&amp; n.<span class=\"property\">nodeType</span> === <span class=\"string\">&#x27;host&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">`ShallowWrapper::<span class=\"subst\">$&#123;name&#125;</span>() can not be called on Host Components`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = <span class=\"title function_\">getAdapter</span>(<span class=\"variable language_\">this</span>[<span class=\"variable constant_\">OPTIONS</span>]).<span class=\"title function_\">nodeToElement</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> adapter = <span class=\"title function_\">getAdapter</span>(<span class=\"variable language_\">this</span>[<span class=\"variable constant_\">OPTIONS</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">isCustomComponentElement</span>(el, adapter)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">`ShallowWrapper::<span class=\"subst\">$&#123;name&#125;</span>() can only be called on components`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 错误判断-end</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> childOptions = <span class=\"title function_\">makeInheritedChildOptions</span>(<span class=\"variable language_\">this</span>, options);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">wrap</span>(<span class=\"title function_\">getAdapter</span>(<span class=\"variable language_\">this</span>[<span class=\"variable constant_\">OPTIONS</span>]).<span class=\"title function_\">nodeToElement</span>(n), <span class=\"literal\">null</span>, childOptions);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过对比变体后的 <code>.dive()</code> 和 <code>.shallow()</code> 对比，如果去掉错误判断部分，我们可以看到，<code>.dive()</code> 的逻辑和 <code>.shallow()</code> 一样。通常，<code>.dive()</code> 配合高阶组件一起使用，如在 Enzyme 仓库这个 issue 中 <a href=\"https://github.com/enzymejs/enzyme/issues/1798\">Documentation does not make it clear when to use <code>.dive()</code> vs <code>.shallow()</code></a> ，<a href=\"https://github.com/ljharb\">@Jordan Harband</a> 提到</p>\n<blockquote>\n<p>.dive() is sugar for “throw if there’s more than one child, throw if that child isn’t a custom component, call .shallow on it”. It was a common enough pattern that it warranted first-class inclusion.<br>In particular, the mantra i often use is “when shallow rendering, one .dive() per HOC”</p>\n</blockquote>\n<p>如果仅从功能来看，能用 <code>.dive()</code> 的场景同样可以使用 <code>.shallow()</code> ，且结果一样。</p>\n<p>但 <code>.dive()</code> 内部做了更加严格的类型判断（不能是 <code>Host Components</code>，且必须是自定义的 components。对 web 而言，<code>div</code> 等原生 html DOM 元素，以及 <code>null</code> 或者 react 内建组件 <code>&lt;Fragment&gt;</code> 都不行），并且，在高阶组件中使用，语义也更加友好：dive 到高阶组件包裹的自定义组件中（后文有例子）。</p>\n<blockquote>\n<p>With respect to renderers there are two types of react components:<br><strong>Host Components</strong>: Host components are platform-specific components, such as <code>&lt;div&gt;</code> or a <code>&lt;View&gt;</code> and they run platform-specific code such as mounting, updates, and unmounting of DOM/Native view. They typically begin with lower-case in the case of ReactDom.<br><strong>Composite Components</strong>: Composite components are user-defined components such as <code>&lt;MyButton&gt;</code> or <code>&lt;Content&gt;</code> and they behave the same way with all renderers. React will calls methods, such as render() and componentDidMount(), on the user-supplied composite components.</p>\n</blockquote>\n<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><h2 id=\"宿主对象类型\"><a href=\"#宿主对象类型\" class=\"headerlink\" title=\"宿主对象类型\"></a>宿主对象类型</h2><p><code>.dive()</code> 只能用于非 DOM 的 wrapper，而 <code>.shallow()</code> 没有此限制，如果成功输出 <code>ShallowWrapper</code>，结果都一样。看下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;试验&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;in-bar&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Bar</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallow</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Foo</span> /&gt;</span></span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 因为浅渲染，Bar 在当前 wrapper 中只会渲染成 &lt;Bar /&gt;，所以找不到其包含的 &#x27;.in-bar&#x27;</span></span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.in-bar&#x27;</span>).<span class=\"property\">length</span>).<span class=\"title function_\">toBe</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这里找到的 Bar 是 &lt;Bar /&gt;</span></span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;Bar&#x27;</span>).<span class=\"property\">length</span>).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对 &#x27;&lt;Bar /&gt;&#x27; 使用 dive() 后，将会渲染它，然后就可以找到 &#x27;.in-bar&#x27;了</span></span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;Bar&#x27;</span>).<span class=\"title function_\">dive</span>().<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.in-bar&#x27;</span>).<span class=\"property\">length</span>).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 这里可以使用 shallow() 效果相同</span></span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;Bar&#x27;</span>).<span class=\"title function_\">shallow</span>().<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.in-bar&#x27;</span>).<span class=\"property\">length</span>).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// dive() 只能应用于 非 DOM</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"title class_\">Bar</span>).<span class=\"title function_\">dive</span>().<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.in-bar&#x27;</span>).<span class=\"title function_\">dive</span>().<span class=\"title function_\">debug</span>()); <span class=\"comment\">// 报错，不能对 dom 使用</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(wrapper.<span class=\"title function_\">find</span>(<span class=\"title class_\">Bar</span>).<span class=\"title function_\">dive</span>().<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.in-bar&#x27;</span>).<span class=\"title function_\">shallow</span>().<span class=\"title function_\">debug</span>()); <span class=\"comment\">// 正常输出 html</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>.dive()</code> only works on a wrapper around a single element from a custom component. If you want to shallow on an HTML element, or multiple, you’d need <code>.shallow()</code>. I think the use cases are rare, but they exist. by <a href=\"https://github.com/ljharb\">@Jordan Harband</a></p>\n</blockquote>\n<h2 id=\"配合高阶组件使用\"><a href=\"#配合高阶组件使用\" class=\"headerlink\" title=\"配合高阶组件使用\"></a>配合高阶组件使用</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">withHOC</span> = <span class=\"title class_\">Component</span> =&gt; <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> <span class=\"attr\">testHOCProp</span>=<span class=\"string\">&quot;come from HOC&quot;</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;in-bar&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EnzymeDive</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">shouldComponentUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1111</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Enzyme Dive</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Bar</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;Enzyme .dive() with HOC&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallow</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">EnzymeDive</span> /&gt;</span></span>);</span><br><span class=\"line\">  wrapper.<span class=\"title function_\">dive</span>().<span class=\"title function_\">setProps</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====wrapper.debug()====&#x27;</span>, wrapper.<span class=\"title function_\">debug</span>());</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====wrapper.dive().debug()====&#x27;</span>, wrapper.<span class=\"title function_\">dive</span>().<span class=\"title function_\">debug</span>());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;Enzyme .shallow() with HOC&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallow</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">EnzymeDive</span> /&gt;</span></span>);</span><br><span class=\"line\">  wrapper.<span class=\"title function_\">shallow</span>().<span class=\"title function_\">setProps</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====wrapper.debug()====&#x27;</span>, wrapper.<span class=\"title function_\">debug</span>());</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;====wrapper.dive().debug()====&#x27;</span>, wrapper.<span class=\"title function_\">shallow</span>().<span class=\"title function_\">debug</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>两个测试用例 <code>Enzyme .dive() with HOC</code> 和 <code>Enzyme .shallow() with HOC</code> 输出的结果都一样，且对于 <code>EnzymeDive</code> 组件而言，测试覆盖率都达到了 100%。其中</p>\n<ul>\n<li><code>wrapper.debug()</code> 的输出结果为：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">EnzymeDive</span> testHOCProp=<span class=\"string\">&quot;come from HOC&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>wrapper.dive().debug()</code> 和 <code>wrapper.shallow().debug()</code> 的输出结果为：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  <span class=\"title class_\">Enzyme</span> <span class=\"title class_\">Dive</span></span><br><span class=\"line\">  &lt;<span class=\"title class_\">Bar</span> /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看到 <code>.dive()</code> 和 <code>.shallow()</code> 都 “unwrap” 了高阶组件（”unwrap” here just means “shallow-render one level deeper” ）。</p>\n<blockquote>\n<p><strong>测试源码</strong>可以在<a href=\"https://github.com/xiaogliu/test-react/blob/master/src/features/EnzymeDive/EnzymeDive.test.jsx\">这里</a>找到。</p>\n</blockquote>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>如果宿主对象不是 <code>div</code> 等原生 html DOM 元素，使用哪个功能一样。但如 Enzyme（3.11.0）源码注释所写，如果是高阶组件，推荐使用 <code>.dive()</code>，其他场景，使用 <code>.shallow()</code>。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://github.com/enzymejs/enzyme/issues/1798\">Documentation does not make it clear when to use <code>.dive()</code> vs <code>.shallow()</code></a></p>\n","categories":["Test"],"tags":["Enzyme"]},{"title":"Flex 布局中避免子元素高度被撑高","url":"https://xiaogliu.github.io/2020/05/15/avoid-child-element-height-expand-in-flex-layout/","content":"<p>Flex 布局中子元素高度容易被最高元素撑高，使用 <code>align-self</code> 可避免。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 此处是居中对齐，也可使用 flex-start 顶部对齐 */</span></span><br><span class=\"line\"><span class=\"attribute\">align-self</span>: center; </span><br></pre></td></tr></table></figure>\n","categories":["CSS"],"tags":["ES6"]},{"title":"常用 Linux 命令","url":"https://xiaogliu.github.io/2019/10/12/common-linux-command/","content":"<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>中文名及功能</th>\n<th>应用举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>lsof</code> (list open files)</td>\n<td>列出当前系统打开的文件</td>\n<td><code>lsof -i:3000</code>：正在使用 3000 端口的进程</td>\n</tr>\n<tr>\n<td><code>make</code></td>\n<td>“制作”某个文件</td>\n<td><code>make rn_setup_npm</code></td>\n</tr>\n<tr>\n<td><code>pkill [process name]</code></td>\n<td>kill process by name</td>\n<td><code>pkill nginx</code></td>\n</tr>\n</tbody>\n</table>\n","categories":["Linux"],"tags":["Command Line"]},{"title":"i18n（国际化）地域标识码","url":"https://xiaogliu.github.io/2019/10/11/i18n-locale-code/","content":"<p>i18n（国际化）地域标识码</p>\n<table>\n<thead>\n<tr>\n<th>国家</th>\n<th>语言</th>\n<th>语言编码</th>\n<th>国家编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>中国</td>\n<td>汉语</td>\n<td>zh</td>\n<td>CN</td>\n</tr>\n<tr>\n<td>中国香港</td>\n<td></td>\n<td>zh</td>\n<td>HK</td>\n</tr>\n<tr>\n<td>中国澳门</td>\n<td></td>\n<td>zh</td>\n<td>MO</td>\n</tr>\n<tr>\n<td>中国台湾</td>\n<td></td>\n<td>zh</td>\n<td>TW</td>\n</tr>\n<tr>\n<td>新加坡</td>\n<td>汉语</td>\n<td>zh</td>\n<td>SG</td>\n</tr>\n<tr>\n<td>中国简体中文</td>\n<td>zh-CHS</td>\n</tr>\n<tr>\n<td>中国繁体中文</td>\n<td>zh-CHT</td>\n</tr>\n<tr>\n<td>英国</td>\n<td>英语</td>\n<td>en</td>\n<td>GB</td>\n</tr>\n<tr>\n<td>美国</td>\n<td>英语</td>\n<td>en</td>\n<td>US</td>\n</tr>\n<tr>\n<td>俄罗斯</td>\n<td>俄罗斯 Tatar 语</td>\n<td>tt</td>\n<td>RU</td>\n</tr>\n<tr>\n<td>俄罗斯</td>\n<td>俄罗斯语</td>\n<td>ru</td>\n<td>RU</td>\n</tr>\n<tr>\n<td>德国</td>\n<td>德语</td>\n<td>de</td>\n<td>DE</td>\n</tr>\n<tr>\n<td>瑞士</td>\n<td>德语</td>\n<td>de</td>\n<td>CH</td>\n</tr>\n<tr>\n<td>卢森堡</td>\n<td>德语</td>\n<td>de</td>\n<td>LU</td>\n</tr>\n<tr>\n<td>奥地利</td>\n<td>德语</td>\n<td>de</td>\n<td>AT</td>\n</tr>\n<tr>\n<td>列支敦士登</td>\n<td>德语</td>\n<td>de</td>\n<td>LI</td>\n</tr>\n<tr>\n<td>加拿大</td>\n<td>法语</td>\n<td>fr</td>\n<td>CA</td>\n</tr>\n<tr>\n<td>法国</td>\n<td>法语</td>\n<td>fr</td>\n<td>FR</td>\n</tr>\n<tr>\n<td>卢森堡</td>\n<td>法语</td>\n<td>fr</td>\n<td>LU</td>\n</tr>\n<tr>\n<td>比利时</td>\n<td>法语</td>\n<td>fr</td>\n<td>BE</td>\n</tr>\n<tr>\n<td>摩纳哥</td>\n<td>法语</td>\n<td>fr</td>\n<td>MC</td>\n</tr>\n<tr>\n<td>瑞士</td>\n<td>法语</td>\n<td>fr</td>\n<td>CH</td>\n</tr>\n<tr>\n<td>意大利</td>\n<td>意大利</td>\n<td>it</td>\n<td>IT</td>\n</tr>\n<tr>\n<td>日本</td>\n<td>日语</td>\n<td>ja</td>\n<td>JP</td>\n</tr>\n<tr>\n<td>韩国</td>\n<td>韩国</td>\n<td>ko</td>\n<td>KR</td>\n</tr>\n<tr>\n<td>哈萨克</td>\n<td>哈萨克(Kazakh)</td>\n<td>kk</td>\n<td>KZ</td>\n</tr>\n<tr>\n<td>芬兰</td>\n<td>芬兰语</td>\n<td>fi</td>\n<td>FI</td>\n</tr>\n<tr>\n<td>瑞典</td>\n<td>芬兰语</td>\n<td>sv</td>\n<td>FI</td>\n</tr>\n<tr>\n<td>瑞典</td>\n<td>瑞典语</td>\n<td>sv</td>\n<td>SE</td>\n</tr>\n<tr>\n<td>匈牙利</td>\n<td>匈牙利</td>\n<td>hu</td>\n<td>HU</td>\n</tr>\n<tr>\n<td>冰岛</td>\n<td>冰岛</td>\n<td>is</td>\n<td>IS</td>\n</tr>\n<tr>\n<td>印尼</td>\n<td>印尼</td>\n<td>id</td>\n<td>ID</td>\n</tr>\n<tr>\n<td>瑞士</td>\n<td>意大利</td>\n<td>it</td>\n<td>CH</td>\n</tr>\n<tr>\n<td>土耳其</td>\n<td>土耳其语</td>\n<td>tr</td>\n<td>TR</td>\n</tr>\n<tr>\n<td>乌克兰</td>\n<td>乌克兰语</td>\n<td>uk</td>\n<td>UA</td>\n</tr>\n<tr>\n<td>巴基斯坦</td>\n<td>巴基斯坦 Urdu 语</td>\n<td>ur</td>\n<td>PK</td>\n</tr>\n<tr>\n<td>加拿大</td>\n<td>英语</td>\n<td>en</td>\n<td>CA</td>\n</tr>\n<tr>\n<td>爱尔兰</td>\n<td>英语</td>\n<td>en</td>\n<td>IE</td>\n</tr>\n<tr>\n<td>捷克</td>\n<td>捷克</td>\n<td>cs</td>\n<td>CZ</td>\n</tr>\n<tr>\n<td>瑞士</td>\n<td>法语</td>\n<td>fr</td>\n<td>CH</td>\n</tr>\n<tr>\n<td>加勒比海</td>\n<td>英语</td>\n<td>en</td>\n<td>CB</td>\n</tr>\n<tr>\n<td>澳洲</td>\n<td>英语</td>\n<td>en</td>\n<td>AU</td>\n</tr>\n<tr>\n<td>新西兰</td>\n<td>英语</td>\n<td>en</td>\n<td>NZ</td>\n</tr>\n<tr>\n<td>比利时</td>\n<td>法语</td>\n<td>fr</td>\n<td>BE</td>\n</tr>\n<tr>\n<td>菲律宾</td>\n<td>英语</td>\n<td>en</td>\n<td>PH</td>\n</tr>\n<tr>\n<td>牙买加</td>\n<td>英语</td>\n<td>en</td>\n<td>JM</td>\n</tr>\n<tr>\n<td>伯利兹</td>\n<td>英语</td>\n<td>en</td>\n<td>BZ</td>\n</tr>\n<tr>\n<td>千里达托贝哥共和国英语</td>\n<td></td>\n<td>en</td>\n<td>TT</td>\n</tr>\n<tr>\n<td>津巴布韦</td>\n<td>英语</td>\n<td>en</td>\n<td>ZW</td>\n</tr>\n<tr>\n<td>爱沙尼亚</td>\n<td>爱沙尼亚</td>\n<td>et</td>\n<td>EE</td>\n</tr>\n<tr>\n<td>法罗群岛</td>\n<td>法罗语(Faroese)</td>\n<td>fo</td>\n<td>FO</td>\n</tr>\n<tr>\n<td>摩纳哥</td>\n<td>法语</td>\n<td>fr</td>\n<td>MC</td>\n</tr>\n<tr>\n<td>西班牙</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>ES</td>\n</tr>\n<tr>\n<td>阿根廷</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>AR</td>\n</tr>\n<tr>\n<td>墨西哥</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>MX</td>\n</tr>\n<tr>\n<td>玻利维亚</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>BO</td>\n</tr>\n<tr>\n<td>智利</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>CL</td>\n</tr>\n<tr>\n<td>巴拿马</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>PA</td>\n</tr>\n<tr>\n<td>委内瑞拉</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>VE</td>\n</tr>\n<tr>\n<td>哥伦比亚</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>CO</td>\n</tr>\n<tr>\n<td>秘鲁</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>PE</td>\n</tr>\n<tr>\n<td>哥斯达黎加</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>CR</td>\n</tr>\n<tr>\n<td>多米尼加共和国</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>DO</td>\n</tr>\n<tr>\n<td>厄瓜多尔</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>EC</td>\n</tr>\n<tr>\n<td>萨尔瓦多</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>SV</td>\n</tr>\n<tr>\n<td>危地马拉</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>GT</td>\n</tr>\n<tr>\n<td>洪都拉斯</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>HN</td>\n</tr>\n<tr>\n<td>尼加拉瓜</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>NI</td>\n</tr>\n<tr>\n<td>巴拉圭</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>PY</td>\n</tr>\n<tr>\n<td>波多黎各</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>PR</td>\n</tr>\n<tr>\n<td>乌拉圭</td>\n<td>西班牙语</td>\n<td>es</td>\n<td>UY</td>\n</tr>\n<tr>\n<td>印度</td>\n<td>坦米尔语</td>\n<td>ta</td>\n<td>IN</td>\n</tr>\n<tr>\n<td>印度</td>\n<td>印度语(Gujarati)</td>\n<td>gu</td>\n<td>IN</td>\n</tr>\n<tr>\n<td>印度</td>\n<td>北印度语</td>\n<td>hi</td>\n<td>IN</td>\n</tr>\n<tr>\n<td>印度</td>\n<td>卡纳达语</td>\n<td>kn</td>\n<td>IN</td>\n</tr>\n<tr>\n<td>印度</td>\n<td>Konkani</td>\n<td>kok</td>\n<td>IN</td>\n</tr>\n<tr>\n<td>印度</td>\n<td>马拉地语</td>\n<td>mr</td>\n<td>IN</td>\n</tr>\n<tr>\n<td>印度</td>\n<td>Punjab 语</td>\n<td>pa</td>\n<td>IN</td>\n</tr>\n<tr>\n<td>印度</td>\n<td>梵文</td>\n<td>sa</td>\n<td>IN</td>\n</tr>\n<tr>\n<td>印度</td>\n<td>印度 Telugu 语</td>\n<td>te</td>\n<td>IN</td>\n</tr>\n<tr>\n<td>挪威</td>\n<td>挪威</td>\n<td>nb</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>挪威</td>\n<td>挪威(Nynorsk)</td>\n<td>nn</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>波兰</td>\n<td>波兰</td>\n<td>pl</td>\n<td>PL</td>\n</tr>\n<tr>\n<td>巴西</td>\n<td>葡萄牙语</td>\n<td>pt</td>\n<td>BR</td>\n</tr>\n<tr>\n<td>葡萄牙</td>\n<td>葡萄牙语</td>\n<td>pt</td>\n<td>PT</td>\n</tr>\n<tr>\n<td>越南</td>\n<td>越南语</td>\n<td>vi</td>\n<td>VN</td>\n</tr>\n<tr>\n<td>泰国</td>\n<td>泰语</td>\n<td>th</td>\n<td>TH</td>\n</tr>\n<tr>\n<td>南非</td>\n<td>英语</td>\n<td>en</td>\n<td>ZA</td>\n</tr>\n<tr>\n<td>南非</td>\n<td>公用荷兰语</td>\n<td>af</td>\n<td>ZA</td>\n</tr>\n<tr>\n<td>白俄罗斯</td>\n<td>白俄罗斯语(Belarusian)</td>\n<td>be</td>\n<td>BY</td>\n</tr>\n<tr>\n<td>伊朗王国</td>\n<td>波斯语</td>\n<td>fa</td>\n<td>IR</td>\n</tr>\n<tr>\n<td>以色列</td>\n<td>希伯来文</td>\n<td>he</td>\n<td>IL</td>\n</tr>\n<tr>\n<td>丹麦</td>\n<td>丹麦</td>\n<td>da</td>\n<td>DK</td>\n</tr>\n<tr>\n<td>马尔代夫</td>\n<td>马尔代夫(Dhivehi)</td>\n<td>div</td>\n<td>MV</td>\n</tr>\n<tr>\n<td>比利时</td>\n<td>荷兰语</td>\n<td>nl</td>\n<td>BE</td>\n</tr>\n<tr>\n<td>荷兰</td>\n<td>荷兰语</td>\n<td>nl</td>\n<td>NL</td>\n</tr>\n<tr>\n<td>希腊</td>\n<td>希腊</td>\n<td>el</td>\n<td>GR</td>\n</tr>\n<tr>\n<td>沙特阿拉伯</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>SA</td>\n</tr>\n<tr>\n<td>埃及</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>EG</td>\n</tr>\n<tr>\n<td>伊拉克</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>IQ</td>\n</tr>\n<tr>\n<td>约旦</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>JO</td>\n</tr>\n<tr>\n<td>科威特</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>KW</td>\n</tr>\n<tr>\n<td>黎巴嫩</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>LB</td>\n</tr>\n<tr>\n<td>利比亚</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>LY</td>\n</tr>\n<tr>\n<td>卡塔尔</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>QA</td>\n</tr>\n<tr>\n<td>叙利亚共和国</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>SY</td>\n</tr>\n<tr>\n<td>叙利亚共和国</td>\n<td>叙利亚语(Syriac)</td>\n<td>syr</td>\n<td>SY</td>\n</tr>\n<tr>\n<td>保加利亚</td>\n<td>保加利亚</td>\n<td>bg</td>\n<td>BG</td>\n</tr>\n<tr>\n<td>阿尔巴尼亚</td>\n<td>阿尔巴尼亚</td>\n<td>sq</td>\n<td>AL</td>\n</tr>\n<tr>\n<td>阿尔及利亚</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>DZ</td>\n</tr>\n<tr>\n<td>巴林</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>BH</td>\n</tr>\n<tr>\n<td>摩洛哥</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>MA</td>\n</tr>\n<tr>\n<td>阿曼</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>OM</td>\n</tr>\n<tr>\n<td>北非的共和国</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>TN</td>\n</tr>\n<tr>\n<td>阿拉伯联合酋长国</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>AE</td>\n</tr>\n<tr>\n<td>也门</td>\n<td>阿拉伯语</td>\n<td>ar</td>\n<td>YE</td>\n</tr>\n<tr>\n<td>亚美尼亚</td>\n<td>亚美尼亚语</td>\n<td>hy</td>\n<td>AM</td>\n</tr>\n<tr>\n<td>巴斯克</td>\n<td>巴斯克</td>\n<td>eu</td>\n<td>ES</td>\n</tr>\n<tr>\n<td>嘉泰罗尼亚</td>\n<td>嘉泰罗尼亚</td>\n<td>ca</td>\n<td>ES</td>\n</tr>\n<tr>\n<td>肯尼亚</td>\n<td>肯尼亚(Swahili)语</td>\n<td>sw</td>\n<td>KE</td>\n</tr>\n<tr>\n<td>克罗埃西亚</td>\n<td>克罗埃西亚</td>\n<td>hr</td>\n<td>HR</td>\n</tr>\n<tr>\n<td>加利西亚</td>\n<td>加利西亚</td>\n<td>gl</td>\n<td>ES</td>\n</tr>\n<tr>\n<td>格鲁吉亚州</td>\n<td>格鲁吉亚州</td>\n<td>ka</td>\n<td>GE</td>\n</tr>\n<tr>\n<td>哈萨克</td>\n<td>Kyrgyz</td>\n<td>ky</td>\n<td>KZ</td>\n</tr>\n<tr>\n<td>拉脱维亚</td>\n<td>拉脱维亚</td>\n<td>lv</td>\n<td>LV</td>\n</tr>\n<tr>\n<td>立陶宛</td>\n<td>立陶宛</td>\n<td>lt</td>\n<td>LT</td>\n</tr>\n<tr>\n<td>马其顿</td>\n<td>马其顿</td>\n<td>mk</td>\n<td>MK</td>\n</tr>\n<tr>\n<td>汶莱</td>\n<td>马来语</td>\n<td>ms</td>\n<td>BN</td>\n</tr>\n<tr>\n<td>马来西亚</td>\n<td>马来西亚语</td>\n<td>ms</td>\n<td>MY</td>\n</tr>\n<tr>\n<td>蒙古</td>\n<td>蒙古</td>\n<td>mn</td>\n<td>MN</td>\n</tr>\n<tr>\n<td>罗马尼亚</td>\n<td>罗马尼亚语</td>\n<td>ro</td>\n<td>RO</td>\n</tr>\n<tr>\n<td>塞尔维亚(西里尔字母的)</td>\n<td>sr-SP-Cyrl</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>塞尔(拉丁文)</td>\n<td>sr-SP-Latn</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>斯洛伐克</td>\n<td>斯洛伐克</td>\n<td>sk</td>\n<td>SK</td>\n</tr>\n<tr>\n<td>斯洛文尼亚</td>\n<td>斯洛文尼亚</td>\n<td>sl</td>\n<td>SI</td>\n</tr>\n<tr>\n<td>乌兹别克</td>\n<td>乌兹别克(西里尔字母的)</td>\n<td>uz</td>\n<td>uz-UZ-Cyrl</td>\n</tr>\n<tr>\n<td>乌兹别克</td>\n<td>乌兹别克(拉丁文的)</td>\n<td>uz</td>\n<td>UZ-Latn</td>\n</tr>\n<tr>\n<td>塞浦路斯</td>\n<td>希腊文</td>\n<td>el</td>\n<td>CY</td>\n</tr>\n<tr>\n<td>英语(全球)</td>\n<td>en-WW</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>内容转自这篇文章：<a href=\"https://www.cnblogs.com/isdom/p/webclips009.html\">i18n(国际化) 和l18n(本地化)时的地域标识代码 格式如 zh-CN(语言-国家)</a></p>\n","categories":["Tools"],"tags":["Tools"]},{"title":"Rollup 配置（Babel7）","url":"https://xiaogliu.github.io/2019/07/24/rollup-config/","content":"<p>Vue 和 React 当前（2019-07-24）都是用 Rollup 作为构建工具，目前有一个<a href=\"https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c\">最佳实践</a>：如果是应用打包（需要处理静态静态资源，这是 Rollup 的弱项）用 webpack，如果是 library 打包用 Rollup（更小的打包体积及更多选择的输入文件格式，比如 ES6 module，CommonJS 等）。</p>\n<p>关于 Rollup 和 Webpack 打包后资源对比可参考这篇文章 <a href=\"https://juejin.im/post/5a4dc842518825698e7279a9\">Tree-Shaking 性能优化实践 - 原理篇</a></p>\n<p>本篇文章主要记录如何配置 Rollup 对 Library 进行打包。</p>\n<h1 id=\"一-调用-Rollup\"><a href=\"#一-调用-Rollup\" class=\"headerlink\" title=\"一 调用 Rollup\"></a>一 调用 Rollup</h1><p>配置 Rollup 进行可以可以通过命令行的方式和配置文件的方式，通常我们选择使用配置文件的方式。在根目录下新建 <code>rollup.config.js</code> 文件，然后 <code>package.json</code> 中的 script 命令中添加下面两行：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NODE_ENV=dev rollup -w -c&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;NODE_ENV=prod rollup -c&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>其中 <code>start</code> 表示开发模式；<code>-w</code> 表示 <code>watch</code> 如果入口文件及其中导入的文件发生变化重新打包；<code>-c</code> 表示 <code>config</code>，表示使用 Rollup 打包规则按照配置文件 <code>rollup.config.js</code> 进行。完整命令行 flag 看这里 <a href=\"https://rollupjs.org/guide/en/#command-line-flags\">Rollup - Command line flags</a></p>\n<h1 id=\"二-写-Rollup-配置文件\"><a href=\"#二-写-Rollup-配置文件\" class=\"headerlink\" title=\"二 写 Rollup 配置文件\"></a>二 写 Rollup 配置文件</h1><p>就配置而言，Rollup 要比 Webpack 简单很多。Rollup 配置文件完整选项看这里 <a href=\"https://rollupjs.org/guide/en/#configuration-files\">Rollup - Configuration Files</a>，这里介绍常用三个选项： - <code>input</code>：入口文件；</p>\n<ul>\n<li><code>output</code>：处理后的输出文件名及所在目录；</li>\n<li><code>plugins</code>：对于入口文件一系列处理都依赖插件完成。</li>\n</ul>\n<blockquote>\n<p>Rollup 支持 ES6 模块和 CommonJS 模块，这里使用了 ES6 模块</p>\n</blockquote>\n<h2 id=\"2-1）单个输入输出文件\"><a href=\"#2-1）单个输入输出文件\" class=\"headerlink\" title=\"2.1）单个输入输出文件\"></a>2.1）单个输入输出文件</h2><p>这是最简单的模式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&quot;main-a.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">file</span>: <span class=\"string\">&quot;dist/bundle-a.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&quot;cjs&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>output.format</code>：表示打包输出的文件类型，有 <code>amd</code>, <code>cjs</code>, <code>es</code>, <code>iife</code>, <code>umd</code></p>\n<ul>\n<li>amd - 异步模块定义，用于像 RequireJS 这样的模块加载器</li>\n<li>cjs - CommonJS，适用于 Node 和 Browserify/Webpack</li>\n<li>es - 将软件包保存为 ES 模块文件</li>\n<li>iife - 一个自动执行的功能，适合作为 <code>&lt;script&gt;</code> 标签。（如果要为应用程序创建一个捆绑包，您可能想要使用它，因为它会使文件大小变小。）</li>\n<li>umd - 通用模块定义，以 amd，cjs 和 iife 为一体 </li>\n</ul>\n</li>\n<li><p><code>output.name</code>：生成包名称，如果是 <code>iife/umd</code> 格式，<code>name</code> 必须有，相当于 <code>var moduleName = (function()&#123;&#125;)()</code></p>\n</li>\n</ul>\n<h2 id=\"2-2）多个输入输出文件\"><a href=\"#2-2）多个输入输出文件\" class=\"headerlink\" title=\"2.2）多个输入输出文件\"></a>2.2）多个输入输出文件</h2><p>Rollup 支持一次处理多个输入输出文件，<code>watch</code> mode 也支持检测多个入口文件，这个时候，使用数组进行包装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  <span class=\"comment\">// 第一个入口文件</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">input</span>: <span class=\"string\">&quot;main-a.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">file</span>: <span class=\"string\">&quot;dist/bundle-a.js&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">format</span>: <span class=\"string\">&quot;cjs&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 第二个入口文件</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">input</span>: <span class=\"string\">&quot;main-b.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 多个输出文件</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">file</span>: <span class=\"string\">&quot;dist/bundle-b1.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">format</span>: <span class=\"string\">&quot;cjs&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">file</span>: <span class=\"string\">&quot;dist/bundle-b2.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">format</span>: <span class=\"string\">&quot;esm&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p><strong>更常见的模式是一个入口文件，多个输出文件，其中输出文件的不同在于使用了不同的模块定义，比如同时输出 ES6 模块和 CommonJS 模块</strong>。</p>\n<blockquote>\n<p>输出 ES6 模式是为了做 Treeshaking，详见：输出 CommonJS 模块是为了兼容。</p>\n</blockquote>\n<h1 id=\"三-Rollup-插件\"><a href=\"#三-Rollup-插件\" class=\"headerlink\" title=\"三 Rollup 插件\"></a>三 Rollup 插件</h1><p>Rollup 本身不对代码进行操作，一系列操作都依赖 Rollup 的插件们，常用插件有：</p>\n<p>import babel from “rollup-plugin-babel”;<br>import alias from “rollup-plugin-alias”;<br>import { terser } from “rollup-plugin-terser”;</p>\n<h2 id=\"3-1）rollup-plugin-babel\"><a href=\"#3-1）rollup-plugin-babel\" class=\"headerlink\" title=\"3.1）rollup-plugin-babel\"></a>3.1）rollup-plugin-babel</h2><p>适用于 Rollup 的 Babel 插件。这里需要特别说明，Babel7 之前，如果要转译 TypeScript 代码，需要安装单独的 TypeScript 插件，但从 Babel7 开始，通过 <code>preset-typeScript</code> 这一个 preset 对 TypeScript 进行转译。</p>\n<blockquote>\n<p>preset 代表一组 _预设_ 的 Babel 插件集合。</p>\n</blockquote>\n<p>相对于引入 TS 自身的编译器，通过 Babel 统一管理需要转译的代码是比较好的（不管 JSX or TS or 其他，只要非目标 JS，都用 Babel 进行转译，相比于 JSX，TS 也没啥特殊的），更多介绍可参考这篇文章：<a href=\"https://iamturns.com/typeScript-babel/\">TypeScript With Babel: A Beautiful Marriage</a></p>\n<p>在 <code>rollup.config.js</code> 中配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&quot;.js&quot;</span>, <span class=\"string\">&quot;.ts&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"string\">&quot;node_modules/**&quot;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-1）新建-Babel-配置文件\"><a href=\"#3-1-1）新建-Babel-配置文件\" class=\"headerlink\" title=\"3.1.1）新建 Babel 配置文件\"></a>3.1.1）新建 Babel 配置文件</h3><p>在项目根目录新建 <code>.babelrc</code> 文件，内容设置如下：</p>\n<blockquote>\n<p><a href=\"https://rollupjs.org/guide/en/#babel\">Rollup 文档</a>中推荐将 Babel 配置文件放在 src 目录下，以区分测试文件，这个看具体情况。</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;presets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-env&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// 避免转换成 CommonJS</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;modules&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用 loose 模式，避免产生副作用</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;loose&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">[</span><span class=\"string\">&quot;@babel/preset-typeScript&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-2）Babel-配置说明\"><a href=\"#3-1-2）Babel-配置说明\" class=\"headerlink\" title=\"3.1.2）Babel 配置说明\"></a>3.1.2）Babel 配置说明</h3><ul>\n<li>module</li>\n</ul>\n<p>这里 <code>module</code> 必须设置为 <code>false</code>，不然在 Rollup 处理代码钱，Babel 已经将代码默认处理成了 CommonJS 的模块，Rollup 处理时会出错。</p>\n<ul>\n<li>loose</li>\n</ul>\n<p><code>loose</code> 是否设置为 <code>true</code> 看业务需求，宽松模式使 Babel 在编译代码不完全按照 ES6 语义进行编译，而是编译成更接近于我们手写代码的形式，这样好处除了使代码更加精简，还会避免产生副作用。典型的是对 ES6 <code>class</code> 语法进行转译的区别：如果不是用宽松模式，ES6 的方法通过 <code>Object.defineProperty</code> 进行定义；如果使用宽松模式，则直接在原型链上进行定义。可以通过输入下面代码在 Babel REPL 进行测试：</p>\n<p><code>loose</code> 为 <a href=\"https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=KYDwDg9gTgLgBAYwDYEMDOa4AVhTRAOzgG8AoORQtGKAVwRmjgApi4CUBbYOAXwEoS5CnBgALAJZoAdB25wAvOy7BhvYQHNgMAHIqWgsiLhRttKEXFTZKtaV5A&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015&amp;prettier=false&amp;targets=&amp;version=7.5.5&amp;externalPlugins=\"><code>false</code></a>; <code>loose</code> 为 <a href=\"https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=KYDwDg9gTgLgBAYwDYEMDOa4AVhTRAOzgG8AoORQtGKAVwRmjgApi4CUBbYOAXwEoS5CnBgALAJZoAdB25wAvOy7BhvYQHNgMAHIqWgsiLhRttKEXFTZKtaV5A&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015-loose&amp;prettier=false&amp;targets=&amp;version=7.5.5&amp;externalPlugins=\"><code>true</code></a>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">&#123; name &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么问题来了，用不用原型链进行构造函数方法的定义有什么差别？差别就是如果使用 <code>Object.defineProperty</code> 进行定义可以产生副作用导致 treeshaking 失效，具体参考这篇文章：<a href=\"https://juejin.im/post/5a5652d8f265da3e497ff3de#heading-2\">你的 Tree-Shaking 并没什么卵用</a>。</p>\n<h2 id=\"3-2）rollup-plugin-terser\"><a href=\"#3-2）rollup-plugin-terser\" class=\"headerlink\" title=\"3.2）rollup-plugin-terser\"></a>3.2）rollup-plugin-terser</h2><p><a href=\"https://github.com/TrySound/rollup-plugin-terser\">rollup-plugin-terser</a> 用于压缩 ES6 代码，功能和 uglify-js 相同，但 uglify-js 不支持 ES6 所以有了这个插件。</p>\n<blockquote>\n<p>rollup-plugin-terser 基于 <a href=\"https://github.com/terser-js/terser\">terser</a> is a fork of uglify-es that mostly retains API and CLI compatibility with uglify-es and uglify-js@3</p>\n</blockquote>\n<p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"title function_\">terser</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">compress</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// remove console.log</span></span><br><span class=\"line\">      <span class=\"attr\">pure_funcs</span>: [<span class=\"string\">&quot;console.log&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// add comment on the top</span></span><br><span class=\"line\">      <span class=\"attr\">preamble</span>: <span class=\"string\">`/*! <span class=\"subst\">$&#123;PROJECT&#125;</span> - v<span class=\"subst\">$&#123;VERSION&#125;</span> - <span class=\"subst\">$&#123;DATE&#125;</span> https://xiaogliu.github.io */`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>题外话，为什么那么执着于 ES6 模块定义？因为 TreeShaking 正是基于 ES6 的模块系统进行静态分析，配合 rollup-plugin-terser 移除不会执行（传统 DCE，dead code elimination）以及模块间没有用到的代码。</p>\n</blockquote>\n<h2 id=\"3-3）其他\"><a href=\"#3-3）其他\" class=\"headerlink\" title=\"3.3）其他\"></a>3.3）其他</h2><p>剩余常用插件归结为其他，因为配置简单，或者目前来说我用的还少，没有单独拿出来做总结的必要，其他插件包括：</p>\n<ul>\n<li><a href=\"https://github.com/rollup/rollup-plugin-alias\">rollup-plugin-alias</a>：设置别名，比如将 <code>src</code> 目录设置别名为 <code>@</code>；</li>\n<li><a href=\"https://github.com/rollup/rollup-plugin-replace\">rollup-plugin-replace</a>：打包时替换代码中的特定字符串。</li>\n</ul>\n<blockquote>\n<p>在使用 alias 引入文件时 TSLint错，简单错报的方法：<code>// @ts-ignore</code></p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://juejin.im/post/5a4dc842518825698e7279a9\">Tree-Shaking 性能优化实践 - 原理篇</a><br><a href=\"https://juejin.im/post/5bf823b96fb9a049e93c61a8\">10分钟快速精通rollup.js——前置学习之rollup.js插件篇</a><br><a href=\"https://juejin.im/post/5a5652d8f265da3e497ff3de#heading-2\">你的 Tree-Shaking 并没什么卵用</a><br><a href=\"https://iamturns.com/typeScript-babel/\">TypeScript With Babel: A Beautiful Marriage</a><br><a href=\"https://juejin.im/post/5c073d86f265da615a419989\">使用 rollup 打包 JS</a><br><a href=\"https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c\">Webpack and Rollup: the same but different</a>   </p>\n","categories":["Tools"],"tags":["Rollup"]},{"title":"Webpack 备忘录","url":"https://xiaogliu.github.io/2018/12/12/webpack-memo/","content":"<p>Webpack 属于在项目中配置一次就很少改动的那种工具，但这样就导致新项目再配置 Webpack 时会有些生疏，所以将 Webpack 核心概念及常用配置记录如下。</p>\n<h1 id=\"一-核心概念\"><a href=\"#一-核心概念\" class=\"headerlink\" title=\"一 核心概念\"></a>一 核心概念</h1><p>Webpack 4.x 之前的核心概念有四个：entry，output，loaders，plugins，4.x 之后增加了 mode。含义如下：</p>\n<ul>\n<li>Entry：指定 webpack 从哪个 file 开始构建他的依赖关系图，可以有一个和多个，推荐对象表示法；</li>\n<li>Output：webpack 构建完成后的 bundles 输出位置及 name，其中 name 一般根据 entry 的 file name 动态生成；</li>\n<li>Loaders：webpack 可以将非 js 文件（css、图像等）通过 loaders 处理成可供我们的应用使用的 modules。也因此在配置文件中，loaders 写在<code>module</code>对象下面，因为 loaders 处理后返回的是有效 modules。</li>\n<li>Plugins：如果需要额外的功能，比如压缩代码、提取 css、分析打包性能，可使用插件完成；<blockquote>\n<p>Loaders 将特定文件转换为有效 module，而 plugin 扩展性更强</p>\n</blockquote>\n</li>\n<li>Mode：接受<code>development</code>、<code>production</code>、<code>none</code>三个值，一般指定为前两个值的一种，webpack 内部针对不同环境做优化。</li>\n</ul>\n<h1 id=\"二-配置\"><a href=\"#二-配置\" class=\"headerlink\" title=\"二 配置\"></a>二 配置</h1><p>下面介绍的配置都是<code>module.exports</code>的直接属性，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// loaders 配置位置有些特殊，不知直接写 loaders 对象，而是将它鞋子啊 module 对象下面</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为 loaders 处理完后返回的是有效 modules</span></span><br><span class=\"line\">  <span class=\"comment\">// 不是 复数！！！</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// plugin 是数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 是 复数！！！</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: []</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>同时，文件头引入相应依赖的过程省略了，实际开发中请自行引入。</p>\n<h2 id=\"2-1-Entry\"><a href=\"#2-1-Entry\" class=\"headerlink\" title=\"2.1 Entry\"></a>2.1 Entry</h2><p>Entry 指定哪些文件作为 webpack 打包入口，可以有一个或者多个：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/js/view/index.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">people</span>: <span class=\"string\">&#x27;./src/js/view/people.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">login</span>: <span class=\"string\">&#x27;./src/js/view/login.js&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上例实际是多页面入口，但页面一般只有一个入口文件。实际，目前（2019-07-09）但单页应用都会官方集成 webpack，开箱即用，除非有深度定制要求。反倒是普通多页应用（当然小项目可能只有一个页面，比如简历）在使用 webpack 时必须进行从 0 到 1 的手动配置。</p>\n</blockquote>\n<h2 id=\"2-2-Output\"><a href=\"#2-2-Output\" class=\"headerlink\" title=\"2.2 Output\"></a>2.2 Output</h2><p>Output 指明 Webpack 处理完成后的 bundles 输入位置及文件 name：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输入目录，这里使用了 node 的 path 模块</span></span><br><span class=\"line\">  <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">  <span class=\"comment\">// [] 里面的内容表示变量</span></span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[name].[contenthash:8].js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 静态资源在 html 引用的公共目录</span></span><br><span class=\"line\">  <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Output 配置相对复杂：</p>\n<h3 id=\"2-2-1-output-path\"><a href=\"#2-2-1-output-path\" class=\"headerlink\" title=\"2.2.1 output.path\"></a>2.2.1 output.path</h3><p>即输出文件目录，推荐使用绝对路径，其中<code>__dirname</code>在 Node 的 path 模块中表示当前目录（即 webpack.config.js 的目录）的绝对路径，<code>resolve</code>方法可以拼接两个目录；</p>\n<blockquote>\n<p>后一个目录可以加<code>/</code>也可以不加，此处无差别</p>\n</blockquote>\n<h3 id=\"2-2-2-output-filename\"><a href=\"#2-2-2-output-filename\" class=\"headerlink\" title=\"2.2.2 output.filename\"></a>2.2.2 output.filename</h3><p>表示输出文件名称，这里注意，<code>[]</code>中是变量，其中<code>name</code>由在 entry 中定义的文件名决定，并且，<strong>有多少个输入文件，对应有多少个输出文件</strong>，后面的<code>contenthash:8</code>表示 chunk 的 hash 值，后文介绍；</p>\n<blockquote>\n<p>实际输出文件一般多于输入文件，因为提取公共代码、设置 sourcemap 都会单独生成输出文件</p>\n</blockquote>\n<h3 id=\"2-2-3-output-publickPath\"><a href=\"#2-2-3-output-publickPath\" class=\"headerlink\" title=\"2.2.3 output.publickPath\"></a>2.2.3 output.publickPath</h3><p>这个配置想最为复杂，它的作用是配合 loaders 或 plugins 中设置的资源路径，指定静态文件（css、js、img）插入 html 中的引用路径，简单讲，就是 <strong>对输出的静态资源进行目录管理</strong>。这里直接使用 <a href=\"http://www.qinshenxue.com/article/20170315092242.html\">详解 Webpack2 的那些路径</a> 的描述，只稍作说明。</p>\n<p>静态资源最终引用路径计算公式：</p>\n<blockquote>\n<p>html 静态资源路径 = output.publicPath + loaders/plugins 中设置的资源路径</p>\n</blockquote>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// publicPath 设置</span></span><br><span class=\"line\">output.<span class=\"property\">publicPath</span> = <span class=\"string\">&#x27;/static/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JS output.filename 配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/[name].js&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// JS 最终访问路径为</span></span><br><span class=\"line\">output.<span class=\"property\">publicPath</span> + <span class=\"string\">&#x27;js/[name].js&#x27;</span> = <span class=\"string\">&#x27;/static/js/[name].js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 图片资源, file-loader，这里省略了 file-loader 其他配置，只列出指定输出路径及文件名的配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;img/[name].[ext]&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 图片最终的访问路径为</span></span><br><span class=\"line\">output.<span class=\"property\">publicPath</span> + <span class=\"string\">&#x27;img/[name].[ext]&#x27;</span> = <span class=\"string\">&#x27;/static/img/[name].[ext]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CSS，ExtractTextPlugin 为提取 CSS 的插件</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ExtractTextPlugin</span>(<span class=\"string\">&quot;css/style.css&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// CSS 最终访问路径为</span></span><br><span class=\"line\">output.<span class=\"property\">publicPath</span> + <span class=\"string\">&#x27;css/style.css&#x27;</span> = <span class=\"string\">&#x27;/static/css/style.css&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>我们上述指定<code>publicPath</code>为绝对路径，实际上，也支持相对路径，相对于<code>index.html</code>，用的比较少。</p>\n<p><code>publicPath</code>默认为空字符串，但为了使输出目录更加条理，推荐使用<code>publicPath</code>对静态资源进行目录管理。</p>\n<h2 id=\"2-3-Loaders\"><a href=\"#2-3-Loaders\" class=\"headerlink\" title=\"2.3 Loaders\"></a>2.3 Loaders</h2><p>Loaders 的配置写在<code>module</code>对象中，如前所述，因为 loaders 最终返回的是有效 modules，故使用了<code>module</code>命名，注意是单数。这节介绍 loaders 配置及常用 loaders 两部分内容。</p>\n<h3 id=\"2-3-1-loaders-配置\"><a href=\"#2-3-1-loaders-配置\" class=\"headerlink\" title=\"2.3.1 loaders 配置\"></a>2.3.1 loaders 配置</h3><p>loaders 规则写在 <code>module.rules</code> 里面（不知道为什么不直接写在 <code>module</code> 中），其中 <code>rules</code> 是个数组，可接受一个或多个 loader 配置。两点需要注意：</p>\n<p>1）如果某类型需要多个 loader 进行处理，在 <code>use</code> 中按 <strong>从右往左</strong> 的顺序流式处理；<br>2）每个 loader 可以进行额外配置；<br>3）像是 <code>postcss-loader</code>, <code>babel-loader</code> 等一般需要额外的配置，<strong>推荐直接在 webpack 配置文件中进行配置，而非在根目录下新建文件</strong>（项目目录看上去更整洁）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 含有 rules，这一个属性</span></span><br><span class=\"line\">  <span class=\"comment\">// rules 是数组，每个元素对应一个 loader 配置</span></span><br><span class=\"line\">  <span class=\"comment\">// loader 配置本身是个对象</span></span><br><span class=\"line\">  <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 正则匹配文件，最终匹配的是一个路径，具体间解析 zepto 源文件时的设置</span></span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 使用的 loader，可以字符串（单个 loader）、数组（多个 loader）</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果是数组，从右往左开始解析</span></span><br><span class=\"line\">      <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;scss-loader&#x27;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|jpeg|svg|gif)$/</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 每个 loader 可进行额外配置</span></span><br><span class=\"line\">      <span class=\"attr\">use</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;img/[name].[ext]&#x27;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4-Plugins\"><a href=\"#2-4-Plugins\" class=\"headerlink\" title=\"2.4 Plugins\"></a>2.4 Plugins</h2><p>同 loaders 一样，分配置和常用 plugins 两部分</p>\n<h3 id=\"2-4-1-plugins-配置\"><a href=\"#2-4-1-plugins-配置\" class=\"headerlink\" title=\"2.4.1 plugins 配置\"></a>2.4.1 plugins 配置</h3><p>Plugins 使用相对简单，配置项写在<code>plugins</code>（复数）数组中，元素为插件的实例（通过<code>new</code>调用），生成实例的时候可接收参数，具体看相应插件文档。见下面代码及注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"comment\">// 带有参数</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>([<span class=\"string\">&#x27;dist&#x27;</span>]),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;css/[name].[contenthash:8].css&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFileName</span>: <span class=\"string\">&#x27;[id].[contenthash:8].css&#x27;</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"comment\">// 直接调用</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">UglifyJsPlugin</span>(),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-Mode\"><a href=\"#2-5-Mode\" class=\"headerlink\" title=\"2.5 Mode\"></a>2.5 Mode</h2><p>接受<code>development</code>、<code>production</code>、<code>none</code>三个值，一般取前两个值之一，指定构建环境，webpack 本身会做相应优化（配合<a href=\"https://webpack.js.org/configuration/optimization/\">optimization</a>使用，下文会有更多介绍），同时省去在命令行中指定构建环境的过程。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于 webpack --mode=production</span></span><br><span class=\"line\"><span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-6-其他\"><a href=\"#2-6-其他\" class=\"headerlink\" title=\"2.6 其他\"></a>2.6 其他</h2><p>上述配置对应 Webpack 核心概念，除此之外，还有下面配置项很常用。</p>\n<h3 id=\"2-6-1-optimization\"><a href=\"#2-6-1-optimization\" class=\"headerlink\" title=\"2.6.1 optimization\"></a>2.6.1 optimization</h3><p>这个选项是在 Webpack 4.x 中引入的，最常用的配置是代替<a href=\"https://webpack.js.org/plugins/commons-chunk-plugin/\">CommonsChunkPlugin</a>提取公共代码。下面直介绍提取公共 JS 代码的配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只对入口文件处理</span></span><br><span class=\"line\">    <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">vendor</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//  split  `src/js/vendor` 目录下共用的代码到`vendor.js`</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里指的是第三方库，很少改动，故单独做持久化缓存</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意，目前 splitChunks 在 split css 时有 bug？现在只 split js 代码</span></span><br><span class=\"line\">        <span class=\"comment\">// 不推荐直接匹配 node_modules 文件夹，如上，因为涉及 css，打包后 css 错误</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/src\\/js\\/vendor\\//</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vendor&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 只要第三方库，只要 &gt; 0B, 就 split 出来</span></span><br><span class=\"line\">        <span class=\"attr\">minSize</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 只要被引用一次，也要分离出来</span></span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"comment\">// priority: 10,</span></span><br><span class=\"line\">        <span class=\"comment\">// enforce: true,</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">common</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//  split  `src/js/common` 目录下共用的代码到`common.js`</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里是自定义的公共 js 代码，改的频率比第三方库要高，但比具体页面的 js 文件低</span></span><br><span class=\"line\">        <span class=\"comment\">// 故单独 split 出来做持久化缓存</span></span><br><span class=\"line\">        <span class=\"comment\">// 不一定共用才 split ，很少改动的也 split 出来，如上的 vender.js</span></span><br><span class=\"line\">        <span class=\"comment\">// 但此处至少两个共用 minChunks 才抽出</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/src\\/js\\/common\\//</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;common&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">minSize</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"comment\">// priority: 9,</span></span><br><span class=\"line\">        <span class=\"comment\">// enforce: true,</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-6-2-devtool\"><a href=\"#2-6-2-devtool\" class=\"headerlink\" title=\"2.6.2 devtool\"></a>2.6.2 devtool</h3><p><code>devtool</code>最常用功能是配置 sourcemap，生产和开发环境一般使用不同的 sourcemap，配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生产环境</span></span><br><span class=\"line\"><span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;source-map&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开发环境</span></span><br><span class=\"line\"><span class=\"attr\">devtool</span>: <span class=\"string\">&#x27;cheap-module-eval-source-map&#x27;</span>,</span><br></pre></td></tr></table></figure>\n<p>关于各配置项的含义可参考<a href=\"https://webpack.js.org/configuration/devtool/\">Devtool</a>和这片文章<a href=\"https://www.jianshu.com/p/ad96e712564c\">Webpack 的 devtool 和 source maps</a>。</p>\n<blockquote>\n<p>sourcemap 是构建后的代码 map 到源代码的映射表，便于定位 bug，具体的映射关系存储在构建后的<code>.map</code>文件中。</p>\n</blockquote>\n<p><strong>NOTE</strong>: 这里我们在生产环境使用的是 <code>source-map</code> 选项而不是其他，是因为目前 webpack 在开启 uglifyjs-webpack-plugin 优化代码后，其他模式下的 <a href=\"https://github.com/webpack/webpack/issues/2704\">sourcemap 选项无效</a>，官网对此也有<a href=\"https://webpack.js.org/plugins/uglifyjs-webpack-plugin/#sourcemap\">说明</a>。虽然使用<code>source-map</code>选项生成的映射表比较大，但只有开启开发者工具的时候<code>.map</code>文件才会加载，这意味着 <strong>映射表文件的大小不影响正常用户的访问体验，但是否压缩 js 文件对正常用户有直接影响</strong>，故，现阶段，生产环境 devtool 使用 <code>source-map</code> 选项。</p>\n<h3 id=\"2-6-3-devServer\"><a href=\"#2-6-3-devServer\" class=\"headerlink\" title=\"2.6.3 devServer\"></a>2.6.3 devServer</h3><p>开发环境为了更好的开发体验，可以开启热更新等功能，在<code>devServer</code>中配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>需要在插件中进行下面配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">HotModuleReplacementPlugin</span>(),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>NOTE：如果传统多页面项目，在入口文件后面添加下面代码，配合热更新：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配合 webpack 配置实现热更新</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>.<span class=\"title function_\">accept</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多页面目前只有在 JS 或者 CSS 文件改变的时候实现了热更新，如果是模版（html）文件改变，没有实现热更新（可以实现自动刷新页面，但感觉很鸡肋，如果改动了模版文件，手动刷新）。</p>\n<blockquote>\n<p>devServer 还可以设置反向代理，后续填坑。</p>\n</blockquote>\n<h3 id=\"2-6-4-resolve\"><a href=\"#2-6-4-resolve\" class=\"headerlink\" title=\"2.6.4 resolve\"></a>2.6.4 resolve</h3><p><code>resolve</code> 选项可以指定如何解析 modules，更多是通过设置 alias 告诉 webpack 去哪找文件解析。比如，如果在项目中通过文件的形式引入的 jq，那在使用 <code>ProvidePlugin</code> 对 jq 进行解析的时候，就需要通过设置别名的形式告诉 webpack 去哪找 jq 源文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 后面加 $ 符号表示精确匹配</span></span><br><span class=\"line\">    <span class=\"attr\">jquery$</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;path/jquery.min.js&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析插件</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">ProvidePlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 加载 jquery</span></span><br><span class=\"line\">  <span class=\"attr\">$</span>: <span class=\"string\">&#x27;jquery&#x27;</span>,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-常见需求详细配置\"><a href=\"#三-常见需求详细配置\" class=\"headerlink\" title=\"三 常见需求详细配置\"></a>三 常见需求详细配置</h1><p>下面记录针对具体需求的完整代码描述。</p>\n<h2 id=\"3-1-引入第三方库\"><a href=\"#3-1-引入第三方库\" class=\"headerlink\" title=\"3.1 引入第三方库\"></a>3.1 引入第三方库</h2><p>比如，jq，zepto 等，如果通过 CDN 可以在项目中直接使用 <code>$</code> 符号，但如果是通过 npm 安装到本地，甚至直接将第三方库源文件写在项目中，那是无法直接使用 <code>$</code> 符号这种调用方式的，需要使用上文介绍的 <code>ProvidePlugin</code> 插件。当然，还有细节需要注意，见下面详细代码。</p>\n<h3 id=\"3-1-1-使用-npm-引入\"><a href=\"#3-1-1-使用-npm-引入\" class=\"headerlink\" title=\"3.1.1 使用 npm 引入\"></a>3.1.1 使用 npm 引入</h3><p>相对于直接引入，使用 npm 可以省去我们手动指定 module 路径的麻烦，已 zepto 为例：</p>\n<blockquote>\n<p>使用 zepto 时，直接使用 ProvidePlugin 会报错，具体参考这片文章<a href=\"https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/\">如何在 webpack 中引入未模块化的库，如 Zepto</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理 zepto 模块化问题，需要安装 exports-loader 和 script-loader</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"built_in\">require</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;zepto&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;exports-loader?window.Zepto&#x27;</span>, <span class=\"string\">&#x27;script-loader&#x27;</span>],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 zepto 设置别名，可以任何名称</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">ProvidePlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">$</span>: <span class=\"string\">&#x27;zepto&#x27;</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-2-直接在项目中引入源文件\"><a href=\"#3-1-2-直接在项目中引入源文件\" class=\"headerlink\" title=\"3.1.2 直接在项目中引入源文件\"></a>3.1.2 直接在项目中引入源文件</h3><p>同 npm 不同之处在于我们需要手动指定 zepto 的路径，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置别名</span></span><br><span class=\"line\"><span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">zepto$</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/js/vendor/zepto.min.js&#x27;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理 zepto 模块化问题</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// test 路径也要跟着改变，不知道为什么不能用上面指定的别名。。</span></span><br><span class=\"line\">  <span class=\"attr\">test</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/js/vendor/zepto.min.js&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;exports-loader?window.Zepto&#x27;</span>, <span class=\"string\">&#x27;script-loader&#x27;</span>],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 zepto 设置别名，可以任何名称</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">ProvidePlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">$</span>: <span class=\"string\">&#x27;zepto&#x27;</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-提取-css\"><a href=\"#3-2-提取-css\" class=\"headerlink\" title=\"3.2 提取 css\"></a>3.2 提取 css</h2><p>为了能将 css 从 js 中提取出来，需要在 <code>module</code> 中将 style-loader 替换为 MiniCssExtractPlugin.loader，见下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      <span class=\"attr\">use</span>: [<span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">      <span class=\"attr\">use</span>: [<span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;sass-loader&#x27;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;css/[name].[contenthash:8].css&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 这个干嘛用？</span></span><br><span class=\"line\">    <span class=\"attr\">chunkFileName</span>: <span class=\"string\">&#x27;[id].[contenthash:8].css&#x27;</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-缓存控制\"><a href=\"#3-3-缓存控制\" class=\"headerlink\" title=\"3.3 缓存控制\"></a>3.3 缓存控制</h2><p>主要一下几个方面：</p>\n<ul>\n<li>提取 css，添加 <code>contenthash</code>（使用 <code>mini-css-extract-plugin</code>）;</li>\n<li>提取公共代码（工具函数等，更改频率相比业务代码要小），添加 <code>contenthash</code>，使用 webpack 自带 splitChunks 提取;</li>\n<li>提取第三方库代码（比如 jquery，更改频率相比公共代码还要小），添加 <code>contenthash</code>，使用 webpack 自带 splitChunks 提取;</li>\n<li>图片可以直接打 <code>hash</code>（图片文件添加 hash 并不一样，也不会随每次构建改变，还不知原理，反正可以工作，待填坑）。</li>\n</ul>\n<h1 id=\"四-常用-loaders-及-plugins\"><a href=\"#四-常用-loaders-及-plugins\" class=\"headerlink\" title=\"四 常用 loaders 及 plugins\"></a>四 常用 loaders 及 plugins</h1><p>这里按照功能进行划分。</p>\n<h2 id=\"4-1-处理-html\"><a href=\"#4-1-处理-html\" class=\"headerlink\" title=\"4.1 处理 html\"></a>4.1 处理 html</h2><p>1）loaders</p>\n<ul>\n<li>html-loader：解析 html 文件；</li>\n</ul>\n<p>2）plugins</p>\n<ul>\n<li>html-webpack-plugin：将构建后的静态文件动态插入 html 中；</li>\n</ul>\n<h2 id=\"4-2-处理-js（ts）\"><a href=\"#4-2-处理-js（ts）\" class=\"headerlink\" title=\"4.2 处理 js（ts）\"></a>4.2 处理 js（ts）</h2><p>1）loaders</p>\n<ul>\n<li>babel-loader：es6+语法转换，目前已支持 ts 转换；</li>\n</ul>\n<p>2）plugins</p>\n<ul>\n<li>uglifyjs-webpack-plugin：<strong>不仅仅是压缩代码，还进行了 tree shaking 工作</strong>；</li>\n</ul>\n<h2 id=\"4-3-处理-css（sass）\"><a href=\"#4-3-处理-css（sass）\" class=\"headerlink\" title=\"4.3 处理 css（sass）\"></a>4.3 处理 css（sass）</h2><p>1）loaders</p>\n<ul>\n<li>sass-loader：解析 scss/sass 文件；</li>\n<li>css-loader：解析 css 文件；</li>\n<li>style-loader：将解析后的 css 嵌入 js；</li>\n<li><p>postcss-loader：完成 css 自动化处理，比如添加前缀、压缩 css、自动生成雪碧图等</p>\n<blockquote>\n<p>postcss 本身支持插件扩展，常用的有 autoprefixer、cssnano、postcss-sprites，更多参考<a href=\"https://github.com/postcss/postcss\">官网介绍</a><br>要在 css-loader 之前处理 css：<code>use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;, &#39;postcss-loader&#39;]</code></p>\n</blockquote>\n</li>\n<li><p>MiniCssExtractPlugin.loader：这个是 <code>mini-css-extract-plugin</code> 提供的 loader，可以替代 <code>style-loader</code></p>\n</li>\n</ul>\n<p>2）plugins</p>\n<ul>\n<li><p>mini-css-extract-plugin：提取 css 文件，减小增量更新成本（<strong>需要在<code>module</code>代理 style-loader 处理 css</strong>）；</p>\n<blockquote>\n<p>这个插件将 css 从 js 中分离出来，是 webpack 4.x 新引入，代替 extract-text-webpack-plugin。</p>\n</blockquote>\n</li>\n<li><p>optimize-css-assets-webpack-plugin：将提取出的 css 做进一步优化；</p>\n</li>\n</ul>\n<h2 id=\"4-4-处理-图片\"><a href=\"#4-4-处理-图片\" class=\"headerlink\" title=\"4.4 处理 图片\"></a>4.4 处理 图片</h2><p>1）loaders</p>\n<ul>\n<li>file-loader：解析图片文件；</li>\n<li>url-loader：具有 file-loader 的全部功能，同时可以提取小图片为 base64（如果开启 HTTP2 这样增大 静态资源体积反而不好？）；</li>\n</ul>\n<h2 id=\"4-5-构建相关-plugins\"><a href=\"#4-5-构建相关-plugins\" class=\"headerlink\" title=\"4.5 构建相关 plugins\"></a>4.5 构建相关 plugins</h2><p>涉及到构建的主要是 plugins，分为内置和第三方</p>\n<p>1）webpack 内置</p>\n<ul>\n<li>webpack.HotModuleReplacementPlugin：热更新插件，webpack 内置；</li>\n<li>ProvidePlugin：webpack 内置，提取第三方库的 api，比如通过 <code>$</code> 符号调用 jq<blockquote>\n<p>如果不是通过 npm 安装，而是直接在项目中引入，需要配合<code>resolve</code>的别名使用，不然找不到</p>\n</blockquote>\n</li>\n</ul>\n<p>2）第三方</p>\n<ul>\n<li>webpack-merge：实际项目中，一般将 webpack 配置文件拆分为 base、dev、pro，这个插件用户合并配置文件；</li>\n<li>clean-webpack-plugin：清除指定文件夹，一般是构建的目录（大型项目慎用，更新需要时间）；</li>\n<li>webpack-bundle-analyzer：打包后文件图形化展示工具，一目了然各文件体积；</li>\n</ul>\n<h2 id=\"4-6-第三方库相关\"><a href=\"#4-6-第三方库相关\" class=\"headerlink\" title=\"4.6 第三方库相关\"></a>4.6 第三方库相关</h2><p>事实上，目前（2019-07-09）第三方库（react，vue，angular）都已经集成好了 webpack，如果不是特别需要，可以不进行单独配置。</p>\n<p>1）Vue 相关</p>\n<ul>\n<li>vue-loader：解析 vue 文件；</li>\n<li>vue-style-loader：解析 vue 中的样式文件。</li>\n</ul>\n<p>2）jquery 和 zepto ?</p>\n<p>尝试用原生 js 写，兼容到 ie10 +</p>\n<h2 id=\"4-7-一键安装-loaders-和-plugins\"><a href=\"#4-7-一键安装-loaders-和-plugins\" class=\"headerlink\" title=\"4.7 一键安装 loaders 和 plugins\"></a>4.7 一键安装 loaders 和 plugins</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i -D html-webpack-plugin @babel/core @babel/preset-env @babel/preset-typescript typescript babel-loader uglifyjs-webpack-plugin node-sass sass-loader css-loader mini-css-extract-plugin postcss-loader postcss-cssnext cssnano clean-webpack-plugin webpack webpack-bundle-analyzer webpack-cli webpack-dev-server webpack-merge</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>@babel/core @babel/preset-env @babel/preset-typescript typescript</code> babel 依赖，包含了处理 typescript 的 package</li>\n<li><code>node-sass</code> 处理 <code>sass</code> 的依赖</li>\n<li><code>postcss-cssnext cssnano</code> 这两个是 postcss 的插件，其中 <code>postcss-cssnext</code> 可用于写 css next 版本的语法，同时补全浏览器前缀；而 <code>cssnano</code> 可以用来减少 css 文件体积，不止是压缩，可其参考<a href=\"https://cssnano.co/\">官方文档示例</a></li>\n</ul>\n<h1 id=\"五-一个完整的配置文件\"><a href=\"#五-一个完整的配置文件\" class=\"headerlink\" title=\"五 一个完整的配置文件\"></a>五 一个完整的配置文件</h1><h2 id=\"5-1-完整文件\"><a href=\"#5-1-完整文件\" class=\"headerlink\" title=\"5.1 完整文件\"></a>5.1 完整文件</h2><p>示例配置文件只添加了处理 html、js、css 的基础 loaders 和 plugins 以及配置开发环境，至于像 <code>DllPlugin</code> 这种高阶插件的使用并没有列入其中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack&quot;</span>); <span class=\"comment\">//to access built-in plugins</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>); <span class=\"comment\">//installed via npm</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UglifyJsPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;uglifyjs-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">CleanWebpackPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// entry files, can multiple files</span></span><br><span class=\"line\">    <span class=\"attr\">index</span>: <span class=\"string\">&quot;./src/scripts/index.ts&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// output directory</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">// variable in []</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;js/[name].[hash:8].js&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// html static file directory</span></span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">            [</span><br><span class=\"line\">              <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                <span class=\"attr\">targets</span>: &#123;</span><br><span class=\"line\">                  <span class=\"attr\">node</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;@babel/typescript&quot;</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&quot;postcss-loader&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">plugins</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">                <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-cssnext&#x27;</span>)(),</span><br><span class=\"line\">                <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>)()</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&quot;postcss-loader&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">plugins</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">                <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-cssnext&#x27;</span>)(),</span><br><span class=\"line\">                <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>)()</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;sass-loader&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|jpeg|svg|gif)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&quot;file-loader&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&quot;img/[name].[ext]&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// recognize typescript</span></span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.js&quot;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&quot;css/[name].[contenthash:8].css&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 这个干嘛用？</span></span><br><span class=\"line\">      <span class=\"attr\">chunkFileName</span>: <span class=\"string\">&quot;[id].[contenthash:8].css&quot;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123; <span class=\"attr\">template</span>: <span class=\"string\">&quot;./src/pages/index.html&quot;</span> &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 直接调用</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.<span class=\"title class_\">HotModuleReplacementPlugin</span>()</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [<span class=\"keyword\">new</span> <span class=\"title class_\">UglifyJsPlugin</span>()]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 生产环境</span></span><br><span class=\"line\">  <span class=\"comment\">// devtool: &quot;source-map&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">// 开发环境</span></span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;cheap-module-eval-source-map&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 使用webpack-dev-server，提高开发效率</span></span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">contentBase</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2-github-示例代码\"><a href=\"#5-2-github-示例代码\" class=\"headerlink\" title=\"5.2 github 示例代码\"></a>5.2 github 示例代码</h2><!-- TODO 提供多个参考配置文件（1.拆分；2.带有 zepto；3.不带 zepto 等） -->\n<p>在 github 上提供了一个示例代码</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://www.qinshenxue.com/article/20170315092242.html\">详解 Webpack2 的那些路径</a></p>\n","categories":["Webpack"],"tags":["Webpack"]},{"title":"在 Win10 中配置 Linux 开发环境","url":"https://xiaogliu.github.io/2018/09/20/config-win10-sub-linux-sys/","content":"<p>很多公司开发用的操作系统是 windows，但 windows 的终端实在难用。win10 发布初期就集成了 linux 子系统，当时还是 beta 版，目前（2018-09-20，我当前 windows 版本号是 1803，操作系统版本是 17134.285）beta 标志已经取消，这表明已经相对成熟了。</p>\n<p>所以想试下 ubuntu 的终端，这样就可以集成 oh-my-zsh 了（集成 oh-my-zsh 的终端超级好用啊，不管主题还是各种操作）。虽然初衷仅仅是想使用 ubuntu 的终端，但配置到后期发现完全可以将开发环境需要的软件（比如前端使用的 node，npm 等等）安装到 ubuntu 中，这样在命令行中的开发体验和直接使用 ubuntu 基本相同。从这方面讲，windows 的开发体验也不再那么不堪。</p>\n<blockquote>\n<p>相当于借助 Ubuntu 的终端管理 windows 上的资源。</p>\n</blockquote>\n<p>先上效果图，下面介绍如何配置。</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/windows-linux.png\" alt=\"windows中linux终端\"></p>\n<h1 id=\"1-配置-linux-的终端\"><a href=\"#1-配置-linux-的终端\" class=\"headerlink\" title=\"1. 配置 linux 的终端\"></a>1. 配置 linux 的终端</h1><p>这是最重要的一步，配置好终端，就成功了一半。</p>\n<h2 id=\"1-1-开启适用于-Linux-的-Windows-子系统\"><a href=\"#1-1-开启适用于-Linux-的-Windows-子系统\" class=\"headerlink\" title=\"1.1 开启适用于 Linux 的 Windows 子系统\"></a>1.1 开启适用于 Linux 的 Windows 子系统</h2><h3 id=\"1-1-1-前期工作\"><a href=\"#1-1-1-前期工作\" class=\"headerlink\" title=\"1.1.1 前期工作\"></a>1.1.1 前期工作</h3><p>首先，win10 版本要 1709 以上。</p>\n<p>然后前往 “启用或关闭 Windows 功能”，将 “适用于 Linux 的 Windows 子系统” 打勾，重启生效。</p>\n<blockquote>\n<p>如何进入“启用或关闭 Windows 功能”不同版本有差异，1803 是 “win + x” 选择 “应用和功能”，点击面板右侧 “程序和功能”，然后在面板左侧可以看到 “启用或关闭 Windows 功能”。</p>\n</blockquote>\n<h3 id=\"1-1-2-安装-linux\"><a href=\"#1-1-2-安装-linux\" class=\"headerlink\" title=\"1.1.2 安装 linux\"></a>1.1.2 安装 linux</h3><p>打开 “Microsoft Store” 搜索对应的 Linux 应用进行安装，这里我选择的是 Ubuntu（没写版本号的 Ubuntu 安装后查看版本号<code>cat /etc/issue</code>显示为 Ubuntu 18.04.1 LTS）。</p>\n<p>安装成功后无需重启，点击“开始”，搜索 “bash”，或者 “win + r” 输入 “bash” 就可以启动 Ubuntu 下的终端了。</p>\n<h2 id=\"1-2-配置-zsh\"><a href=\"#1-2-配置-zsh\" class=\"headerlink\" title=\"1.2 配置 zsh\"></a>1.2 配置 zsh</h2><p>配合 zsh 可以扩展 Ubuntu 终端的功能，比如，历史纪录、tab 目录选择、git 别名、自动添加<code>sudo</code>等。</p>\n<h3 id=\"1-2-1-安装-zsh\"><a href=\"#1-2-1-安装-zsh\" class=\"headerlink\" title=\"1.2.1 安装 zsh\"></a>1.2.1 安装 zsh</h3><p>使用 ubuntu 的<code>apt-get</code>命令进行安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install zsh</span><br></pre></td></tr></table></figure>\n<p>通过<code>zsh --version</code>可查看是否安装成功。</p>\n<h3 id=\"1-2-2-配置-zsh-为默认终端\"><a href=\"#1-2-2-配置-zsh-为默认终端\" class=\"headerlink\" title=\"1.2.2 配置 zsh 为默认终端\"></a>1.2.2 配置 zsh 为默认终端</h3><p>在用户目录<code>~</code>下找到<code>.bash_profile</code>，如果没有就建一个，当然这是个隐藏的文件，需要<code>ls -a</code>来查看。打开它，然后在末尾加上:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span> zsh</span><br><span class=\"line\"><span class=\"built_in\">source</span> .zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-3-安装-oh-my-zsh\"><a href=\"#1-2-3-安装-oh-my-zsh\" class=\"headerlink\" title=\"1.2.3 安装 oh-my-zsh\"></a>1.2.3 安装 oh-my-zsh</h3><p>zsh 配置本身很繁琐，<a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a> 可以更方便的管理 zsh 配置，集成了各种插件、主题。</p>\n<p>通过下面命令进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-3-激活-安装插件\"><a href=\"#1-2-3-激活-安装插件\" class=\"headerlink\" title=\"1.2.3 激活/安装插件\"></a>1.2.3 激活/安装插件</h3><p>oh-my-zsh 插件分本身集成的插件（在目录<code>~/.oh-my-zsh/plugins</code>下面）和需要自己下载的插件两部分。</p>\n<p>如果是本身继承的，直接在<code>~/.zshrc</code>中激活就好：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将需要激活的插件名写在小括号中</span></span><br><span class=\"line\">plugins=(git sudo)</span><br></pre></td></tr></table></figure>\n<p>如果是非本身集成的，除了需要在<code>~/.zshrc</code>中激活，还需要将插件下载到目录<code>~/.oh-my-zsh/custom/plugins</code>下面</p>\n<p>除了使用内置的 git 和 sudo，我还下载了 zsh-syntax-highlighting 和 zsh-autosuggestions：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>\n<p><strong>NOTE：</strong></p>\n<p>如果下载完第三方插件出现了权限问题，可以在<code>.zshrc</code>里引入 oh-my-zsh 之前加入<code>ZSH_DISABLE_COMPFIX=true</code>解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># authority，在引入 oh-my-zsh 之前加入</span></span><br><span class=\"line\">ZSH_DISABLE_COMPFIX=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里是引入 oh-my-zsh</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> <span class=\"variable\">$ZSH</span>/oh-my-zsh.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3-安装-cmder\"><a href=\"#1-3-安装-cmder\" class=\"headerlink\" title=\"1.3 安装 cmder\"></a>1.3 安装 cmder</h2><p>为什么还要安装 cmder？上面配置完终端的字体还不好看，通过配置 cmder 可以使终端显示的更漂亮。</p>\n<p>具体安装配置可参考这篇文章 <a href=\"https://xiaogliu.github.io/2017/04/07/install-and-configure-cmder/\">cmder 安装及配置</a>，这里需要说明的是怎么配置 cmder 默认启动 Ubuntu 终端：</p>\n<p>通过 “win + alt + p” 打开设置，然后在 “startup” 中选中 “Command line” 添加参数<code>%windir%\\system32\\bash.exe ~</code>即可。</p>\n<h2 id=\"1-4-其他坑\"><a href=\"#1-4-其他坑\" class=\"headerlink\" title=\"1.4 其他坑\"></a>1.4 其他坑</h2><ul>\n<li>对于 Ubuntu 的终端来说，windows 的硬盘相当于挂载在 ubuntu 系统下，所以切换盘符时需要在前面加<code>mnt</code>，比如，从 C 盘切到 E 盘：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前 C 盘，切到 E 盘</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /mnt/e/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在终端中使用代理</li>\n</ul>\n<p>终端本身不走系统代理，如果想通过终端访问墙外资源，在<code>~/.zshrc</code>中添加下面内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># proxy list</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> proxy=<span class=\"string\">&#x27;export http_proxy=socks5://127.0.0.1:1080; export https_proxy=socks5://127.0.0.1:1080&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> unproxy=<span class=\"string\">&#x27;unset http_proxy; unset https_proxy&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>通过在终端输入命令<code>proxy</code>开启代理，通过<code>unproxy</code>关闭代理。</p>\n<blockquote>\n<p>我这里使用了 shadowsocks，可以通过<code>curl ip.cn</code>命令判断代理是否开启。</p>\n</blockquote>\n<ul>\n<li>如果在 Ubuntu 中安装了某个软件不能正确执行，比如 npm，将 windows 上对应的软件删掉再试下。</li>\n</ul>\n<h1 id=\"2-安装开发软件\"><a href=\"#2-安装开发软件\" class=\"headerlink\" title=\"2. 安装开发软件\"></a>2. 安装开发软件</h1><p>其实和原生 Ubuntu 安装软件一致，这里以安装 node，npm，vue-cli 为例介绍：</p>\n<blockquote>\n<p>安装之前可以先更新下包资源：<code>sudo apt-get update</code></p>\n</blockquote>\n<h2 id=\"2-1-安装-node\"><a href=\"#2-1-安装-node\" class=\"headerlink\" title=\"2.1 安装 node\"></a>2.1 安装 node</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</span><br><span class=\"line\">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n<p>具体参考：<a href=\"https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\">install Ubuntu：Debian and Ubuntu based Linux distributions</a></p>\n<h2 id=\"2-2-安装-npm-及其他-npm-包\"><a href=\"#2-2-安装-npm-及其他-npm-包\" class=\"headerlink\" title=\"2.2 安装 npm 及其他 npm 包\"></a>2.2 安装 npm 及其他 npm 包</h2><p>npm 需要单独安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n<p>安装其他 npm 包就是正常套路了，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i cnpm -g</span><br><span class=\"line\">cnpm i -g vue-cli</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://blog.csdn.net/lissettecarlr/article/details/81040750\">WIN10 下搭建一个 linux 环境(ubuntu+cmder+oh-my-zsh)</a><br><a href=\"https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md\">Github:zsh-syntax-highlighting how to install</a><br><a href=\"https://github.com/mrdulin/blog/issues/18\">Mac OSX 终端走 shadowsocks 代理</a></p>\n","categories":["Tools"],"tags":["Tools"]},{"title":"异步之三：Async 函数的使用及简单实现","url":"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-3/","content":"<p>解决回调地狱的异步操作，Async 函数是终极办法，但了解生成器和 Promise 有助于理解 Async 函数原理。由于内容较多，分三部分进行，这是第三部分，介绍 Async 函数相关。<a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-1/\">第一部分</a>介绍 Generator，<a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-2/\">第二部分</a>介绍 Promise。</p>\n<p>在这部分中，我们会先介绍 Async 函数的基本使用，然后会结合前两部分介绍的生成器和 Promise 实现一个 async 函数。</p>\n<h1 id=\"1）Async-函数概览\"><a href=\"#1）Async-函数概览\" class=\"headerlink\" title=\"1）Async 函数概览\"></a>1）Async 函数概览</h1><h2 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h2><p>通过在普通函数前加<code>async</code>操作符可以定义 Async 函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一个 async 函数</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>Async 函数体中的代码是异步执行的，不会阻塞后面代码执行，但它们的写法和同步代码相似。</p>\n<p>Async 函数会 <strong>返回一个已完成的 promise 对象</strong>，实际在使用的时候会和<code>await</code>操作符配合使用，在介绍<code>await</code>之前，我们先看看 async 函数本身有哪些特点。</p>\n<h2 id=\"1-2-Async-函数基本用法\"><a href=\"#1-2-Async-函数基本用法\" class=\"headerlink\" title=\"1.2 Async 函数基本用法\"></a>1.2 Async 函数基本用法</h2><h3 id=\"1-2-1-函数体内没有-await\"><a href=\"#1-2-1-函数体内没有-await\" class=\"headerlink\" title=\"1.2.1 函数体内没有 await\"></a>1.2.1 函数体内没有 await</h3><p>如果 async 函数体内如果没有<code>await</code>操作符，那么它返回的 promise 对象状态和他的函数体内代码怎么写有关系，具体和 promise 的<code>then()</code>方法的处理方式相同：</p>\n<p>1）没有显式 return 任何数据</p>\n<p>此时默认返回<code>Promise.resolve()</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"keyword\">async</span> () =&gt; &#123;&#125;)();</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>此时 a 的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">a &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&#x27;resolved&#x27;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2）显式 return 非 promise</p>\n<p>相当于返回<code>Promise.resolve(data)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>此时 a 的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">a &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&#x27;resolved&#x27;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"number\">111</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）显式 return promise 对象</p>\n<p>此时 async 函数返回的 promise 对象状态由显示返回的 promise 对象状态决定，这里以被拒绝的 promise 为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"keyword\">async</span> () =&gt; <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">111</span>))();</span><br></pre></td></tr></table></figure>\n<p>此时 a 的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">a &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&#x27;rejected&#x27;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"number\">111</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但实际使用中，我们不会向上面那样使用，而是配合<code>await</code>操作符一起使用，不然像上面那样，和 promise 相比，并没有优势可言。特别的，没有<code>await</code>操作符，我们并不能用 async 函数解决相互依赖的异步数据的请求问题。</p>\n<p>换句话说：我们不关心 async 返回的 promise 状态（通常情况，async 函数不会返回任何内容，即默认返回<code>Promise.resolve()</code>），我们关心的是 async 函数体内的代码怎么写，因为里面的代码可以异步执行且不阻塞 async 函数后面代码的执行，这就为写异步代码创造了条件，并且书写形式上和同步代码一样。</p>\n<h3 id=\"1-2-2-await-介绍\"><a href=\"#1-2-2-await-介绍\" class=\"headerlink\" title=\"1.2.2 await 介绍\"></a>1.2.2 await 介绍</h3><p><code>await</code>操作符使用方式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[rv] = <span class=\"keyword\">await</span> expression;</span><br></pre></td></tr></table></figure>\n<p>expression：可以是任何值，但通常是一个 promise；</p>\n<p>rv: 可选。如果有且 expression 是非 promise 的值，则 rv 等于 expression 本身；不然，rv 等于 <strong>兑现</strong> 的 promise 的值，如果该 promise 被拒绝，则抛个异常（所以<code>await</code>一般被 try-catch 包裹，异常可以被捕获到）。</p>\n<p>但注意<code>await</code><strong>必须在 async 函数中使用，不然会报语法错误</strong>。</p>\n<h3 id=\"1-2-3-await-使用\"><a href=\"#1-2-3-await-使用\" class=\"headerlink\" title=\"1.2.3 await 使用\"></a>1.2.3 await 使用</h3><p>看下面代码例子：</p>\n<p>1）expression 后为非 promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"keyword\">await</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 111</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>直接返回这个 expression 的值，即，打印 <code>111</code>。</p>\n<p>2）expression 为兑现的 promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 111</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>返回兑现的 promise 的值，所以打印<code>111</code>。</p>\n<p>3）expression 为拒绝的 promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前面的 await 出错后，当前代码块后面的代码就不执行了</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 不执行</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;出错了：&quot;</span>, e); <span class=\"comment\">// 出错了：111</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>如果<code>await</code>后面的 promise 被拒绝或本身代码执行出错都会抛出一个异常，然后被 catch 到，并且，和当前<code>await</code>同属一个代码块的后面的代码不再执行。</p>\n<h1 id=\"2）Async-函数处理异步请求\"><a href=\"#2）Async-函数处理异步请求\" class=\"headerlink\" title=\"2）Async 函数处理异步请求\"></a>2）Async 函数处理异步请求</h1><h2 id=\"2-1-相互依赖的异步数据\"><a href=\"#2-1-相互依赖的异步数据\" class=\"headerlink\" title=\"2.1 相互依赖的异步数据\"></a>2.1 相互依赖的异步数据</h2><p>在 promise 中我们处理相互依赖的异步数据使用链式调用的方式，虽然相比回调函数已经优化很多，但书写及理解上还是没有同步代码直观。我们看下 async 函数如何解决这个问题。</p>\n<p>先回顾下需求及 promise 的解决方案：</p>\n<p>需求：<em>请求 URL1 得到 data1；请求 URL2 得到 data2，但 URL2 = data1[0].url2；请求 URL3 得到 data3，但 URL3 = data2[0].url3</em>。</p>\n<p>使用 promise 链式调用可以这样写代码：</p>\n<blockquote>\n<p>promiseAjax 在 <a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-2/#3-1-%E7%94%A8-promise-%E5%B0%81%E8%A3%85-ajax\">第二部分介绍 promise 时在 3.1 中定义的</a>，通过 promise 封装的 ajax GET 请求。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&#x27;URL1&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data1</span> =&gt;</span> <span class=\"title function_\">promiseAjax</span>(data1[<span class=\"number\">0</span>].<span class=\"property\">url2</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data2</span> =&gt;</span> <span class=\"title function_\">promiseAjax</span>(data2[<span class=\"number\">0</span>].<span class=\"property\">url3</span>);)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data3))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e));</span><br></pre></td></tr></table></figure>\n<p>如果使用 Async 函数则可以像同步代码的一样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data1 = <span class=\"keyword\">await</span> <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&#x27;URL1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">await</span> <span class=\"title function_\">promiseAjax</span>(data1[<span class=\"number\">0</span>].<span class=\"property\">url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data3 = <span class=\"keyword\">await</span> <span class=\"title function_\">promiseAjax</span>(data2[<span class=\"number\">0</span>].<span class=\"property\">url</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之所以可以这样用，是因为只有当前<code>await</code>等待的 promise 兑现后，它后面的代码才会执行（或者抛出错误，后面代码都不执行，直接去到 catch 分支）。</p>\n<p>这里有两点值得关注:</p>\n<p>1）<code>await</code>帮我们处理了 promise，要么返回兑现的值，要么抛出异常；<br>2）<code>await</code>在等待 promise 兑现的同时，整个 async 函数会挂起，promise 兑现后再重新执行接下来的代码。</p>\n<p>对于第 2 点，是不是想到了生成器？在 1.4 节中我们会通过生成器 + promise 自己写一个 async 函数。</p>\n<h2 id=\"2-2-无依赖关系的异步数据\"><a href=\"#2-2-无依赖关系的异步数据\" class=\"headerlink\" title=\"2.2 无依赖关系的异步数据\"></a>2.2 无依赖关系的异步数据</h2><p><del>Async 函数没有<code>Promise.all()</code>之类的方法，我们需要写多几个 async 函数。</del></p>\n<p>可以借助<code>Promise.all()</code>在同一个 async 函数中并行处理多个无依赖关系的异步数据，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">      <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL1&quot;</span>),</span><br><span class=\"line\">      <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL2&quot;</span>),</span><br><span class=\"line\">    ]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ... do something</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>感谢 <a href=\"https://segmentfault.com/u/jiasm\">@贾顺名</a> 的 <a href=\"https://segmentfault.com/a/1190000015735201#goToReplyArea\">评论</a></p>\n</blockquote>\n<p>但实际开发中如果异步请求的数据是业务不相关的，不推荐这样写，原因如下：</p>\n<p>把所有的异步请求放在一个 async 函数中相当于手动加强了业务代码的耦合，会导致下面两个问题：</p>\n<p>1）写代码及获取数据都不直观，尤其请求多起来的时候；<br>2）<code>Promise.all</code>里面写多个无依赖的异步请求，如果 <strong>其中一个被拒绝或发生异常，所有请求的结果我们都获取不到</strong>。</p>\n<p>如果业务场景是不关心上面两点，可以考虑使用上面的写法，不然，每个异步请求都放在不同的 async 函数中发出。</p>\n<p>下面是分开写的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data1 = <span class=\"keyword\">await</span> <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ... do something</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">await</span> <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ... do something</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3）Async-模拟实现\"><a href=\"#3）Async-模拟实现\" class=\"headerlink\" title=\"3）Async 模拟实现\"></a>3）Async 模拟实现</h1><h2 id=\"3-1-async-函数处理异步数据的原理\"><a href=\"#3-1-async-函数处理异步数据的原理\" class=\"headerlink\" title=\"3.1 async 函数处理异步数据的原理\"></a>3.1 async 函数处理异步数据的原理</h2><p>我们先看下 async 处理异步的原理：</p>\n<ul>\n<li>async 函数遇到<code>await</code>操作符会挂起；</li>\n<li><code>await</code>后面的表达式求值（通常是个耗时的异步操作）前 async 函数一直处于挂起状态，避免阻塞 async 函数后面的代码；</li>\n<li><code>await</code>后面的表达式求值求值后（异步操作完成），<code>await</code>可以对该值做处理：如果是非 promise，直接返回该值；如果是 promsie，则提取 promise 的值并返回。同时告诉 async 函数接着执行下面的代码；</li>\n<li>哪里出现异常，结束 async 函数。</li>\n</ul>\n<p><code>await</code>后面的那个异步操作，往往是返回 promise 对象（比如 <a href=\"https://github.com/axios/axios\">axios</a>），然后交给 <code>await</code> 处理，毕竟，async-await 的设计初衷就是为了解决异步请求数据时的回调地狱问题，而使用 promise 是关键一步。</p>\n<p>async 函数本身的行为，和生成器类似；而<code>await</code>等待的通常是 promise 对象，也正因如此，常说 async 函数是 <em>生成器 + promise</em> 结合后的语法糖。</p>\n<p>既然我们知道了 async 函数处理异步数据的原理，接下来我们就简单模拟下 async 函数的实现过程。</p>\n<h2 id=\"3-2-async-函数简单实现\"><a href=\"#3-2-async-函数简单实现\" class=\"headerlink\" title=\"3.2 async 函数简单实现\"></a>3.2 async 函数简单实现</h2><p>这里只模拟 async 函数配合<code>await</code>处理网络请求的场景，并且请求最终返回 promise 对象，async 函数本身返回值（已完成的 promise 对象）及更多使用场景这里没做考虑。</p>\n<p>所以接下来的 myAsync 函数只是为了说明 async-await 原理，不要将其用在生产环境中。</p>\n<h3 id=\"3-2-1-代码实现\"><a href=\"#3-2-1-代码实现\" class=\"headerlink\" title=\"3.2.1 代码实现\"></a>3.2.1 代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模拟 async 函数的实现，该段代码取自 Secrets of the JavaScript Ninja (Second Edition)，p159</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 接收生成器作为参数，建议先移到后面，看下生成器中的代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">myAsync</span> = generator =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注意 iterator.next() 返回对象的 value 是 promiseAjax()，一个 promise</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> iterator = <span class=\"title function_\">generator</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// handle 函数控制 async 函数的 挂起-执行</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handle</span> = iteratorResult =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratorResult.<span class=\"property\">done</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> iteratorValue = iteratorResult.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 只考虑异步请求返回值是 promise 的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratorValue <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 递归调用 handle，promise 兑现后再调用 iterator.next() 使生成器继续执行</span></span><br><span class=\"line\">      <span class=\"comment\">// ps.原书then最后少了半个括号 &#x27;)&#x27;</span></span><br><span class=\"line\">      iteratorValue</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"title function_\">handle</span>(iterator.<span class=\"title function_\">next</span>(result)))</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> iterator.<span class=\"keyword\">throw</span>(e));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handle</span>(iterator.<span class=\"title function_\">next</span>());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-2-使用\"><a href=\"#3-2-2-使用\" class=\"headerlink\" title=\"3.2.2 使用\"></a>3.2.2 使用</h3><p><code>myAsync</code>接收的一个生成器作为入参，生成器函数内部的代码，和写原生 async 函数类似，只是用<code>yield</code>代替了<code>await</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">myAsync</span>(<span class=\"keyword\">function</span>*() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"keyword\">yield</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = <span class=\"keyword\">yield</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(a + <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = <span class=\"keyword\">yield</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(b + <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a, b, c); <span class=\"comment\">// 输出 1，11，111</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;出错了：&quot;</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面会打印<code>1 11 111</code>。</p>\n<p>如果第二个<code>yield</code>语句后的 promise 被拒绝<code>Promise.reject(a + 10)</code>，则打印<code>出错了：11</code>。</p>\n<h3 id=\"3-2-3-说明：\"><a href=\"#3-2-3-说明：\" class=\"headerlink\" title=\"3.2.3 说明：\"></a>3.2.3 说明：</h3><ul>\n<li>myAsync 函数接受一个生成器作为参数，控制生成器的 _挂起_ 可达到使整个 myAsync 函数在异步代码请求过程 _挂起_ 的效果；</li>\n<li>myAsync 函数内部通过定义<code>handle</code>函数，控制生成器的 <em>挂起-执行</em>。</li>\n</ul>\n<p>具体过程如下：</p>\n<p>1）首先调用<code>generator()</code>生成它的控制器，即迭代器<code>iterator</code>，此时，生成器处于挂起状态；<br>2）第一次调用<code>handle</code>函数，并传入<code>iterator.next()</code>，这样就完成生成器的第一次调用的；<br>3）执行生成器，遇到<code>yield</code>生成器再次挂起，同时把<code>yield</code>后表达式的结果（未完成的 promise）传给 handle；<br>4）生成器挂起的同时，异步请求还在进行，异步请求完成（promise 兑现）后，会调用<code>handle</code>函数中的<code>iteratorValue.then()</code>；<br>5）<code>iteratorValue.then()</code>执行时内部递归调用<code>handle</code>，同时把异步请求回的数据传给生成器（<code>iterator.next(result)</code>），生成器更新数据再次执行。如果出错直接结束；<br>6）3、4、5 步重复执行，直到生成器结束，即<code>iteratorResult.done === true</code>，myAsync 结束调用。</p>\n<blockquote>\n<p>如果看不明白，可参考下 <a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-1/\">第一部分</a> 生成器相关和 <a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-2/\">第二部分</a> Promise 相关。</p>\n</blockquote>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>【1】[美]JOHN RESIG,BEAR BIBEAULT and JOSIP MARAS 著（2016），Secrets of the JavaScript Ninja (Second Edition)，p159，Manning Publications Co.<br>【2】<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function-MDN</a><br>【3】<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\">await-MDN</a><br>【4】<a href=\"https://segmentfault.com/a/1190000007535316\">理解 JavaScript 的 async/await</a>   </p>\n","categories":["JavaScript"],"tags":["JavaScript","ES6","ES7"]},{"title":"异步之二：Promise","url":"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-2/","content":"<p>解决回调地狱的异步操作，Async 函数 是终极办法，但了解生成器和 Promise 有助于理解 Async 函数原理。由于内容较多，分三部分进行，这是第二部分，介绍 Promise 相关。<a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-1/\">第一部分</a>介绍 Generator，<a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-3/\">第三部分</a>介绍 Async 函数。</p>\n<h1 id=\"1）Promise-概述\"><a href=\"#1）Promise-概述\" class=\"headerlink\" title=\"1）Promise 概述\"></a>1）Promise 概述</h1><h2 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h2><p><code>Promise</code>是 ES6 引入的一个内建对象，通过它可以创建 Promise 实例。</p>\n<p>Promise 实例可以想像成一个占位符，当获取到异步数据后，更新 promise。</p>\n<p>这里需要注意的是，异步数据不是直接赋值给 promise 实例，而是赋值给 promise 实例的内部属性<code>[[PromiseValue]]</code>，通过 promise 的<code>then()</code>或者<code>catch()</code>方法可以获取到这个值。</p>\n<p>这也是 “promise” 名称的由来：承诺将来会给一个值，这个值可能是成功的数据也可能是错误信息，总之，会给一个值。</p>\n<h2 id=\"1-2-基本用法\"><a href=\"#1-2-基本用法\" class=\"headerlink\" title=\"1.2 基本用法\"></a>1.2 基本用法</h2><p>基本用法包含 promise 创建、获取 promise 完成后的值以及错误捕获，他们三者结合使用才算完成了一次 promise 的完整使用过程。</p>\n<h3 id=\"1-2-1-创建-promise-实例及-executor-函数\"><a href=\"#1-2-1-创建-promise-实例及-executor-函数\" class=\"headerlink\" title=\"1.2.1 创建 promise 实例及 executor 函数\"></a>1.2.1 创建 promise 实例及 executor 函数</h3><p>通过内建对象<code>Promise</code>（promise 的构造函数）创建 promise 实例，其中，<code>Promise</code>接收一个函数作为参数，这个函数称之为 executor 函数。</p>\n<p>Executor 函数本身接收两个函数作为参数，通常命名为<code>resolve</code>和<code>reject</code>。它们接收一个值作为参数，作为 promise 完成之后的值传给 promise 实例的内部属性<code>[[PromiseValue]]</code>。它们当中只能有一个执行，执行之后表示当前 promise 已完成（当然，分别表示两个不同的已完成状态，兑现或拒绝）。</p>\n<blockquote>\n<p>实际开发中我们会把期待得到的数据传给<code>resolve</code>函数，把错误信息传给<code>reject</code>函数。</p>\n</blockquote>\n<p>另外，Executor 函数在传入<code>Promise</code>时会立即执行。见下面例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// executor 函数在传入 Promise 后会立即执行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> executor = <span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// resolve 的执行结果需配合 then() 提取，这里给 resolve 传入了一个立即执行函数作为参数</span></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(</span><br><span class=\"line\">    (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">222</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">333</span>;</span><br><span class=\"line\">    &#125;)()</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">444</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(executor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">555</span>);</span><br></pre></td></tr></table></figure>\n<p>上面输出分别为:<code>111</code>,<code>222</code>,<code>444</code>,<code>555</code>。</p>\n<p>分析：</p>\n<p>1）<code>executor</code>函数立即执行，所以<code>111</code>先打印出来；<br>2）<code>resolve</code>此时也立即执行，为了体现这一点，给其传入了立即执行函数，直接打印出了<code>222</code>。实际上此时 promise 已经完成，但我们还无法访问完成后的 promise，需要配合下文讨论的<code>then()</code>访问；<br>3）紧接着是后面代码执行，打印<code>444</code>；<br>5）最后打印<code>555</code>。</p>\n<blockquote>\n<p>虽然一直在讨论<code>resolve</code>，<code>reject</code>执行时过程同<code>resolve</code>，不单独讨论。</p>\n</blockquote>\n<p>到目前为止，我们看到的都是同步代码，那 promise 和异步有什么关系呢？</p>\n<p>实际使用中，<code>resolve</code>会将 promise 完成后的数据传给<code>then()</code>方法，而<code>then()</code>中的代码是放在微任务中异步执行的，这是其一；<br>第二点是，<code>resolve</code>往往不是立即执行，比如请求服务器上的数据，数据请求完成后再执行<code>resolve</code>，这个时候，<code>resolve</code>本身也是异步执行的。</p>\n<h3 id=\"1-2-2-then-方法\"><a href=\"#1-2-2-then-方法\" class=\"headerlink\" title=\"1.2.2 then() 方法\"></a>1.2.2 then() 方法</h3><p>promise 实例拥有<code>then()</code>方法，它设计的目的是 <strong>异步获取</strong> promise <strong>完成后</strong> 的值。</p>\n<p><code>then()</code>方法接受两个函数作为参数（这两个参数都不是必须），当 promise 完成后会执行它们：</p>\n<ul>\n<li>第一个参数为称为 success 回调函数，在 promise 执行<code>resolve</code>函数后执行，同时可以接收<code>resovle</code>的入参作为自己的入参；</li>\n<li>第二个参数称为 failure 回调函数，在 promise 执行<code>reject</code>函数或者程序发生异常时执行，可以接收<code>reject</code>的入参或者错误信息作为参数。见下面例子：</li>\n</ul>\n<blockquote>\n<p><code>resolve</code>或者<code>reject</code>传给<code>then()</code>的回调函数的参数，实际就是 promise 的内部属性<code>[[PromiseValue]]</code>的值，<code>[[PromiseValue]]</code>作为 promise 实例内部属性没法直接访问，必须借助<code>then()</code>或者下文将要提到的<code>catch()</code>方法获取。<br>另外，这个属性很重要，因为 promise 成功兑现后，它上面 <strong>保存的通常就是我们需要的异步数据</strong>。</p>\n</blockquote>\n<p>这里要注意，函数完成之后才执行<code>then()</code>，并且<code>then()</code>里面的函数是异步执行的，<strong>最快在当前事件循环的微任务开始执行时执行</strong>，这里有两点要注意：</p>\n<p>1）虽然是异步，但仍然是在当前事件循环中执行（微任务在当前事件循环中执行，只是在宏任务之后），所以，会比<code>setTimeout()</code>中的代码先执行（<code>setTimeout()</code>中代码会在下一个事件循环中执行）；<br>2）之所以称之为异步，是因为<code>then()</code>里面的代码会移到当前事件循环的微任务中执行，如果<code>then()</code>之后还有宏任务代码需要执行，微任务要等宏任务中的代码执行完之后才执行。</p>\n<blockquote>\n<p>关于 JS 运行机制更详细的讨论可以参考这篇文章 <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\">这一次，彻底弄懂 JavaScript 执行机制</a></p>\n</blockquote>\n<p>看下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 直接 resolve，所以 then 执行 success 函数，同时传入 111 作为参数</span></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> success = <span class=\"keyword\">function</span>(<span class=\"params\">resolvedValue</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;resolvedValue:&quot;</span>, resolvedValue);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> failure = <span class=\"keyword\">function</span>(<span class=\"params\">errorInfo</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;errorInfo:&quot;</span>, errorInfo);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下一个事件循环中执行</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">222</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// success 和 failure 在当前事件循环的微任务中执行</span></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(success, failure);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前事件循环宏任务中最后一行代码</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">333</span>);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，我们在 executor 函数中直接执行了<code>resolve</code>，所以<code>then()</code>立即执行，并且把<code>111</code>传给<code>success</code>函数，然后把<code>success</code>函数放到了 <strong>当前事件循环的微任务队列中</strong>：</p>\n<p>上述代码分别输出：<code>333</code>，<code>resolvedValue: 111</code>，<code>222</code></p>\n<p>分析：<code>setTimeout()</code>中代码在下一次事件循环中执行，所以最后输出<code>222</code>；<code>then()</code>中的代码在当前事件循环的微任务中执行，需要等到当前事件循环宏任务中的代码执行完，即<code>console.log(333)</code>执行完再执行，所以先输出<code>333</code>，再输出<code>resolvedValue: 111</code>。</p>\n<p>为了分离错误处理的代码，promise 还提供了 catch 方法，见下面用法。</p>\n<h3 id=\"1-2-3-catch-方法\"><a href=\"#1-2-3-catch-方法\" class=\"headerlink\" title=\"1.2.3 catch() 方法\"></a>1.2.3 catch() 方法</h3><p>promise 被拒绝后除了可以在<code>then()</code>中传入第二个参数处理，还可以通过<code>catch()</code>方法处理。</p>\n<p><code>catch()</code>可通过在<code>then()</code>后进行链式调用（加多一个<code>.</code>），作用等同在<code>then()</code>中传入的第二个参数，见下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resolvedValue</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resolvedValue)).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">errorInfo</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(errorInfo)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>执行上述输出：<code>errorInfo: 111</code>。</p>\n<p>如果只处理一个 promise，两种方式差不多，至于选择哪一种，看个人喜好。但通过链式调用处理多个 promise 时，用<code>catch</code>更加方便。</p>\n<p><strong>但不管怎样，都要选择一种错误处理方式，不然当出现错误时引擎会报错：<code>Uncaught (in promise)</code></strong></p>\n<h1 id=\"2）Promise-状态及内部属性\"><a href=\"#2）Promise-状态及内部属性\" class=\"headerlink\" title=\"2）Promise 状态及内部属性\"></a>2）Promise 状态及内部属性</h1><p>Promise 作为异步数据的占位符，在整个生命周期中会有不同状态，这些状态在其内部属性<code>[[PromiseStatus]]</code>中有记录。</p>\n<h2 id=\"2-1-Promise-状态\"><a href=\"#2-1-Promise-状态\" class=\"headerlink\" title=\"2.1 Promise 状态\"></a>2.1 Promise 状态</h2><p>Promise 整个生命周期状态可分为两个部分：未完成状态和已完成状态，其中，未完成状态只有 pending 一种情况，而已完成状态又分为 fullfilled（已兑现，<code>resolve</code>函数执行）和 rejected（被拒绝，<code>reject</code>函数执行或者 promise 处理时发生异常）两种情况，见下图：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/promise_state.png\" alt=\"promise state\"></p>\n<p><em>图拍引自 Secrets of the JavaScript Ninja(2nd)</em></p>\n<blockquote>\n<p>英文已完成状态称为 “resolved states”，后面将要介绍的<code>[[PromiseStatus]]</code>也有<code>resolved</code>状态值。从生命周期的角度看，如果用英文描述，则 resolved states 包括<code>resolved</code>和<code>rejected</code>两种情况。</p>\n</blockquote>\n<p>另外，<strong>promise 一般完成，状态就不能改变</strong>。</p>\n<h2 id=\"2-2-Promise-内部属性\"><a href=\"#2-2-Promise-内部属性\" class=\"headerlink\" title=\"2.2 Promise 内部属性\"></a>2.2 Promise 内部属性</h2><p>Promise 实例创建以后，我们需要关注两个内部属性：</p>\n<p><code>[[PromiseStatus]]</code>：保存当前 promise 的状态，可取值<code>pending</code>,<code>resolved</code>,<code>rejected</code>；<br><code>[[PromiseValue]]</code>：当 promise 在未完成状态时，其值为<code>undefined</code>，当 promise 完成后，其值为异步数据，或者错误信息。</p>\n<p>见下面例子：</p>\n<p>1）pending 状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p);</span><br></pre></td></tr></table></figure>\n<p>此时，p 处于<code>pending</code>状态，内部属性值如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实际代码中这样写无效，这里只是延时，但可以在浏览器 console 中看到</span></span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&#x27;pending&#x27;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2）resolved 状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">r</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p);</span><br></pre></td></tr></table></figure>\n<p>此时，p 处于<code>resolved</code>状态，内部属性值如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&#x27;resolved&#x27;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"number\">111</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）rejected 状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">j</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p);</span><br></pre></td></tr></table></figure>\n<p>此时，p 处于<code>rejected</code>状态，内部属性值如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&#x27;rejected&#x27;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"number\">111</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里没有捕获错误，所以会报错<code>Uncaught (in promise) 111</code>，不过，此处不是我们关注的重点</p>\n</blockquote>\n<h2 id=\"2-3-关于-rejected-状态\"><a href=\"#2-3-关于-rejected-状态\" class=\"headerlink\" title=\"2.3 关于 rejected 状态\"></a>2.3 关于 rejected 状态</h2><p>两种情况可能导致 promise 进入 rejected 状态：</p>\n<ul>\n<li>显式拒绝：在 promise 的 executor 函数中执行<code>reject()</code>;</li>\n<li>隐式拒绝：处理 promise 的时候程序发生了异常。</li>\n</ul>\n<p>显式拒绝的情况我们在上文已看，下面我们看个隐式拒绝的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise 隐式拒绝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  a++;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>().<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;出错了：&quot;</span>, e));</span><br></pre></td></tr></table></figure>\n<p>\b 因为<code>a</code>\b 没有定义，所以<code>a++</code>执行时报错了，\bpromise 被拒绝，然后我们在<code>catch()</code>方法中捕捉到了错误，此时<code>p</code>内部属性描述如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&#x27;rejected&#x27;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"string\">&#x27;ReferenceError: aaa is not defined ...&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4-来一道习题\"><a href=\"#2-4-来一道习题\" class=\"headerlink\" title=\"2.4 来一道习题\"></a>2.4 来一道习题</h2><p>关于这个习题的分析看附录部分。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">400</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;6&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"string\">&quot;7&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;8,&quot;</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;9,&quot;</span>, res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;10&quot;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;11&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;12&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"3）使用-Promise\"><a href=\"#3）使用-Promise\" class=\"headerlink\" title=\"3）使用 Promise\"></a>3）使用 Promise</h1><h2 id=\"3-1-用-promise-封装-ajax\"><a href=\"#3-1-用-promise-封装-ajax\" class=\"headerlink\" title=\"3.1 用 promise 封装 ajax\"></a>3.1 用 promise 封装 ajax</h2><p>这部分将用 promise 封装 ajax 的 GET 请求，为接下来的链式调用 promise 做准备。</p>\n<blockquote>\n<p>最简单的 ajax 请求，没有考虑兼容性，请求错误处理等，主要说明 promise 应用   </p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 promise 封装 ajax</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">promiseAjax</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回 promise 对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 这样就可以后续通过 then 或者 catch 处理异步数据</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 传递出成功的数据</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 传递出错误信息</span></span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"string\">&quot;出错了：&quot;</span>, xhr.<span class=\"property\">status</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, url);</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用通过 promise 封装过的 ajax 就简单了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;someURL&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e));</span><br></pre></td></tr></table></figure>\n<p>promise 在请求大量异步数据时优势会体现的更明显。</p>\n<h2 id=\"3-2-链式调用-Promise\"><a href=\"#3-2-链式调用-Promise\" class=\"headerlink\" title=\"3.2 链式调用 Promise\"></a>3.2 链式调用 Promise</h2><p>链式调用之所以能够实现是因为<code>then()</code>和<code>catch()</code>会 <strong>返回一个新的 promise 对象</strong>。</p>\n<p>链式调用有几个特点：</p>\n<ul>\n<li>当前面的 promise 完成后，才会执行后面的 promise；</li>\n<li>如果<code>then()</code>或<code>catch()</code>没有显式 return promise，则当前返回的 promise 默认是兑现的；</li>\n<li>如果<code>then()</code>或<code>catch()</code>显式 return promise，则当前返回的 promise 是兑现还是拒绝取决于<code>then()</code>或<code>catch()</code>显式 return promise 的状态。</li>\n</ul>\n<p>基于上，以<code>then()</code>为例，可能出现几种写法：</p>\n<h3 id=\"3-2-1-没显式的-return-语句\"><a href=\"#3-2-1-没显式的-return-语句\" class=\"headerlink\" title=\"3.2.1 没显式的 return 语句\"></a>3.2.1 没显式的 return 语句</h3><p><code>then()</code>里面没有显式返回任何代码，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">r</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v)).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v));</span><br></pre></td></tr></table></figure>\n<p>没有显式的<code>return</code>语句，默认返回已完成且<code>[[PromiseValue]]</code>值为<code>undefined</code>的 promise</p>\n<p>上面代码等同于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">r</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = p.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p1 已兑现，且 [[PromiseValue]] 值为 undefined</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Promise.resolve() 返回一个完成状态的 promise，并且<code>p1.then()</code>也返回一个已完成的 promise，但没有使用</p>\n</blockquote>\n<p>此时 p、p1 值如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&quot;resolved&quot;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"number\">111</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p1 已完成，但值是 undefined</span></span><br><span class=\"line\">p1 &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&quot;resolved&quot;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-2-显式-return-非-promise\"><a href=\"#3-2-2-显式-return-非-promise\" class=\"headerlink\" title=\"3.2.2 显式 return 非 promise\"></a>3.2.2 显式 return 非 promise</h3><p>如果在<code>then()</code>中显式<code>return</code>非 promise，返回的数据就是当前 promise 兑现后的<code>[[PromiseValue]]</code>的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">r</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"number\">222</span>)</span><br><span class=\"line\"> .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v));</span><br></pre></td></tr></table></figure>\n<p>以上代码相当于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">r</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = p.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">222</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p1 已兑现，且 [[PromiseValue]] 值为 222</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v));</span><br></pre></td></tr></table></figure>\n<p>此时 p、p1 的值如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&quot;resolved&quot;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"number\">111</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p1 已完成，但值是 undefined</span></span><br><span class=\"line\">p1 &#123;</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseStatus</span>]]: <span class=\"string\">&quot;resolved&quot;</span>,</span><br><span class=\"line\">  [[<span class=\"title class_\">PromiseValue</span>]]: <span class=\"number\">222</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>NOTICE</strong>：</p>\n<p>返回错误对象也是相当于返回兑现的 promise，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">r</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;出错了&quot;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;then:&quot;</span>, v))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;error:&quot;</span>, e));</span><br></pre></td></tr></table></figure>\n<p>此时打印的是<code>then:出错了</code>，因为相当于<code>() =&gt; Promise.resolve(new Error(&#39;出错了&#39;))</code>，此时是兑现的 promise，只不过显式传递了一个“出错了”的数据给当前兑现后的 promise 的<code>[[PromiseValue]]</code>。</p>\n<h3 id=\"3-2-3-显式-return-未完成的-promise\"><a href=\"#3-2-3-显式-return-未完成的-promise\" class=\"headerlink\" title=\"3.2.3 显式 return 未完成的 promise\"></a>3.2.3 显式 return 未完成的 promise</h3><p>但在<code>then()</code>中显式返回未完成的 promise 时，当前<code>then()</code>返回的 promise 是兑现还是拒绝取决于显式返回的未完成的 promise 的状态。</p>\n<p>如果显式返回未完成的 promise 最终兑现了，当前 promise 是兑现状态，否则为拒绝状态。这是实际工作中常见的场景，比如链式调用相互依赖的异步数据， 3.2.4 中我们将看到这个例子，现在看下基本用法。</p>\n<p>最终兑现的状态和前面的显式返回<code>Promise.resolve()</code>相同，我们看个最终被拒绝的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">r</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> <span class=\"title function_\">j</span>()))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;兑现&quot;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;拒绝&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p>此时会打印出 <code>拒绝</code>，因为显式返回未完成的 promise 最终被拒绝了。相当于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">r</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;兑现&quot;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;拒绝&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p><strong>NOTICE</strong></p>\n<p>如果当前返回的是被拒绝的 promise，则后面的所有<code>then()</code>都不执行，直到遇到第一个<code>catch()</code>，执行<code>catch()</code>里面的代码，并且当前<code>catch()</code>也会返回一个 promise。</p>\n<blockquote>\n<p>但<code>catch()</code>返回的 pormise 一般不用，只在链式调用的最后放个<code>catch()</code>捕捉错误就好了，如下：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">r</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, j</span>) =&gt;</span> <span class=\"title function_\">j</span>()))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;兑现1&quot;</span>)) <span class=\"comment\">// 不执行</span></span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;兑现2&quot;</span>)) <span class=\"comment\">// 也不执行</span></span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;拒绝&quot;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;兑现3&quot;</span>)); <span class=\"comment\">// 执行，但一般不再 catch 后继续链式调用了</span></span><br></pre></td></tr></table></figure>\n<p>上面返回 <code>拒绝</code> 和 <code>兑现3</code>。</p>\n<h3 id=\"3-2-4-一个真实的例子\"><a href=\"#3-2-4-一个真实的例子\" class=\"headerlink\" title=\"3.2.4 一个真实的例子\"></a>3.2.4 一个真实的例子</h3><p>如果几个异步数据间存在依赖关系，可以使用 promise 的链式调用方式，比如：</p>\n<p>需求：<em>请求 URL1 得到 data1；请求 URL2 得到 data2，但 URL2 = data1[0].url2；请求 URL3 得到 data3，但 URL3 = data2[0].url3</em>。</p>\n<p>使用 promise 链式调用可以这样写代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promiseAjax 在 3.1 中有定义</span></span><br><span class=\"line\"><span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL1&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data1</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异步获取 data1 做相关处理</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 请求新数据依赖 data1 的数据，并将获取到的数据传递出去</span></span><br><span class=\"line\">    <span class=\"comment\">// 且要记得显式 return</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">promiseAjax</span>(data1[<span class=\"number\">0</span>].<span class=\"property\">url2</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 如果不需要对 data2 做处理，可以使用箭头函数简化代码</span></span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data2</span> =&gt;</span> <span class=\"title function_\">promiseAjax</span>(data2[<span class=\"number\">0</span>].<span class=\"property\">url3</span>);)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data3))</span><br><span class=\"line\">  <span class=\"comment\">// 任何一个出现错误，都会捕捉到</span></span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e));</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-Promise-其他用法\"><a href=\"#3-3-Promise-其他用法\" class=\"headerlink\" title=\"3.3 Promise 其他用法\"></a>3.3 Promise 其他用法</h2><p>\bPromise 还有两个常用功能<code>\bPromise.all()</code>和<code>Promise.race</code>，它们都用于一次处理多个 promise，不同点是：</p>\n<ul>\n<li><code>\bPromise.all()</code>可以一次处理多个 promise，我们 <strong>不需要关心哪个先完成，全部兑现后后统一返回，但任何一个 promise 被拒绝都会导致整个 promise 被拒绝</strong>；</li>\n<li>使<code>Promise.race()</code>时我们也 <strong>不需要关心执行顺序，但任何一个 promise 完成就会立即返回这个完成的 promise</strong>。</li>\n</ul>\n<p>它们的不同点主要体现在 promise 兑现后传递给<code>then()</code>的数据：<code>\bPromise.all()</code>返回的是<strong>所有</strong> \bpromise 兑现后组成的数组数据，而<code>Promise.race()</code>返回的是 <strong>最先完成的那一个</strong> \bpromise 返回的数据。见下面的代码例子：</p>\n<p>1）<code>Promise.all()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">\b<span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">  <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL1&quot;</span>),</span><br><span class=\"line\">  <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL2&quot;</span>),</span><br><span class=\"line\">  <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL3&quot;</span>),</span><br><span class=\"line\">]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// data[1] 对应请求 URL1 后得到的数据，其他蕾丝</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data[<span class=\"number\">1</span>], data[<span class=\"number\">2</span>], data[<span class=\"number\">3</span>]);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e));</span><br></pre></td></tr></table></figure>\n<p>2）<code>promise.rase()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([</span><br><span class=\"line\">  <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL1&quot;</span>),</span><br><span class=\"line\">  <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL2&quot;</span>),</span><br><span class=\"line\">  <span class=\"title function_\">promiseAjax</span>(<span class=\"string\">&quot;URL3&quot;</span>),</span><br><span class=\"line\">]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// data 表示先完成的那个 promise 请求的 URL 数据</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e));</span><br></pre></td></tr></table></figure>\n<h1 id=\"4）promise-的实现\"><a href=\"#4）promise-的实现\" class=\"headerlink\" title=\"4）promise 的实现\"></a>4）promise 的实现</h1><p>限于篇幅，将在另一篇文章中专门写 promise 的原理及实现。</p>\n<blockquote>\n<p>网上有很多类似文章了，自己写一遍加深印象。</p>\n</blockquote>\n<h1 id=\"5）其他说明\"><a href=\"#5）其他说明\" class=\"headerlink\" title=\"5）其他说明\"></a>5）其他说明</h1><p>相比使用回调函数，promise 已经使代码得到了很大改善，\b 但相比同步代码还是看着有些复杂，比如，链式调用那部分，代码看上去还是有些混乱。</p>\n<p><strong>那能不能用写同步代码的方式请求异步数据呢</strong>？可以的，这就是<a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-3/\">第三部分</a>将要介绍的 Async 函数。</p>\n<p>那是不是说 \bpromise 就没用了呢？并不是，Async 函数实际是 <em>生成器 + \bpromise</em> 的语法糖，只有理解了生成器和 promise 的原理，才能更好的理解 Async 函数。并且，现在很多 Web API 甚至库（比如 <a href=\"https://github.com/axios/axios\">axios</a>）都是经过 promise 封装的，熟悉 promise 的使用及原理有助于理解和 promise 相关的其他代码。</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"2-4-答案及分析分析\"><a href=\"#2-4-答案及分析分析\" class=\"headerlink\" title=\"2.4 答案及分析分析\"></a>2.4 答案及分析分析</h2><p>2.4 的习题分析，见注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1&quot;</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * setTimeout 下一个事件循环执行</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果多个 setTimeout 执行顺序 先进先出</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2&quot;</span>); <span class=\"comment\">// nextLoop（400）: 2</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * new Promise 接受一个函数做参数</span></span><br><span class=\"line\"><span class=\"comment\">     * 此函数体中的代码立即执行</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;3&quot;</span>); <span class=\"comment\">// nextLoop（400）: 2, 3</span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * then 中的代码在当前事件循环的微任务中执行</span></span><br><span class=\"line\"><span class=\"comment\">     * 此时没有其他宏任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;4&quot;</span>); <span class=\"comment\">// nextLoop（400）: 2, 3, 4</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">400</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;5&quot;</span>); <span class=\"comment\">// 1，5</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * promise 一旦完成（兑现或拒绝）状态就不能改变</span></span><br><span class=\"line\"><span class=\"comment\">     * 所以后面的 reject 不执行</span></span><br><span class=\"line\"><span class=\"comment\">     * 且这个promise在下一个时间循环中完成</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;6&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"string\">&quot;7&quot;</span>); <span class=\"comment\">// 前面已兑现，此处不执行</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个promise已兑现，不执行catch</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;8,&quot;</span>, res); <span class=\"comment\">// 不执行</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加入下一个事件循环的微任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;9,&quot;</span>, res); <span class=\"comment\">// nextLoop（500）： 9, 6</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 理解执行</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;10&quot;</span>); <span class=\"comment\">// 1，5，10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 立即解决，但 then 中代码还是要放在当前循环的微任务中</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 放入微任务等待执行</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;11&quot;</span>); <span class=\"comment\">// 等待2（11）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;12&quot;</span>); <span class=\"comment\">// 1，5，10，12，等待2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 当前循环中的等待后输出: 1，5，10，12，11</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下一个事件循环（nextLoop）后输出: 1，5，10，12，11，nextLoop(400), nextLoop(500)</span></span><br><span class=\"line\"><span class=\"comment\"> * 即：1，5，10，12，11，2, 3, 4, 5, 9, 6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】[美]JOHN RESIG,BEAR BIBEAULT and JOSIP MARAS 著（2016），Secrets of the JavaScript Ninja (Second Edition)，第 6 章 promise 部分，Manning Publications Co.<br>【2】[美]Nicholas C. Zakas 著，刘振涛 译（2017），深入理解 ES6，p86~p97，电子工业出版社<br>【3】<a href=\"https://zhuanlan.zhihu.com/p/30828196\">Promise 必知必会（十道题）</a>   </p>\n","categories":["JavaScript"],"tags":["JavaScript","ES6","ES7"]},{"title":"异步之一：生成器","url":"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-1/","content":"<p>解决回调地狱的异步操作，Async 函数是终极办法，但了解生成器和 Promise 有助于理解 Async 函数原理。由于内容较多，分三部分进行，这是第一部分，介绍生成器相关，<a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-2/\">第二部分</a>介绍 Promise，<a href=\"https://xiaogliu.github.io/2018/07/22/generator-to-promise-to-async-3/\">第三部分</a>介绍 Async 函数。</p>\n<p>介绍生成器前先看两个英文单词及对应的中文翻译：</p>\n<ul>\n<li>Generator 生成器</li>\n<li>Iterator 迭代器</li>\n</ul>\n<h1 id=\"1）生成器概念\"><a href=\"#1）生成器概念\" class=\"headerlink\" title=\"1）生成器概念\"></a>1）生成器概念</h1><p>Generator 是 function，但和普通函数有很大区别。</p>\n<p>并且调用 Genrerator 并 <strong>不是一次执行完函数体内的全部代码</strong>，而是分步骤进行：</p>\n<ol>\n<li>第一次调用 Generator，不执行函数体里面的代码，返回一个 Iterator 对象，后续 Generator 的调用都是通过 Iterator 对象完成；</li>\n<li>每一次调用 Iterator 的<code>next()</code>方法，都会执行 Generator 里面的代码：<br>2.1 如果遇到<code>yield</code>关键字，Generator 非阻塞挂起，同时返回一个对象(<code>&#123;value: &#39;yieldValue&#39;, done: false&#125;</code>），执行步骤 3;<br>2.2 如果没遇到<code>yield</code>关键字 Generator 就结束了，那么表示 Generator 执行完毕，同时，也返回一个对象，固定格式<code>&#123;value: undefined, done: true&#125;</code>；</li>\n<li>当再一次调用 Iterator 的<code>next()</code>方法时， Gererator 从前一次挂起的地方接着执行，然后重复步骤 2。</li>\n</ol>\n<blockquote>\n<p>名词解释，“正在等待的 yield”：使 Generator 进入当前挂起状态的 yield 称为 “正在等待的 yield”。Generator 再次执行使从“正在等待的 yield 语句”之后开始执行。这个概念在通过<code>next()</code>给 Generator 传参时会用到。</p>\n</blockquote>\n<p>生成器通过在<code>function</code>关键字后面加一个<code>*</code>号定义 Generator 函数，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义 generator 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">generatorFn</span>(<span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2）迭代器概念\"><a href=\"#2）迭代器概念\" class=\"headerlink\" title=\"2）迭代器概念\"></a>2）迭代器概念</h1><p>Iterator 是调用 Generator 后返回一个对象，Iterator 关键属性是<code>next()</code>方法，触发 Generator 函数体内的代码 \b 执行。同时，还有一个<code>throw()</code>可以结束 Generator 的执行，同时抛出一个错误</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Iterator 结构</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 触发 generator 函数体内的代码执行</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 结束 Generator 的执行，同时抛出一个错误</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3）生成器返回的对象\"><a href=\"#3）生成器返回的对象\" class=\"headerlink\" title=\"3）生成器返回的对象\"></a>3）生成器返回的对象</h1><p>执行<code>Iterator.next()</code>后，生成器返回的对象结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果 Generator 未结束</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: yieldValue,</span><br><span class=\"line\">  <span class=\"attr\">done</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 Generator 结束</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  <span class=\"attr\">done</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4）完整示例代码\"><a href=\"#4）完整示例代码\" class=\"headerlink\" title=\"4）完整示例代码\"></a>4）完整示例代码</h1><h2 id=\"4-1-简单演示\"><a href=\"#4-1-简单演示\" class=\"headerlink\" title=\"4.1 简单演示\"></a>4.1 简单演示</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">222</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// iControl 是迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iControl = <span class=\"title function_\">genFn</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 第 1 次调用，输出 111 后挂起</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 111, done: false&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 第 2 次调用，从 yield 111; 之后开始执行，输出 222 后挂起</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 222, done: false&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 第 3 次调用，从 yield 222; 之后开始执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 但此时无代码可执行，执行完毕，并有固定输出</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果结束后继续调用<code>iControl.next()</code>则一直返回<code>&#123;value: undefined, done: true&#125;</code>。</p>\n<blockquote>\n<p><code>Object.prototype.toString.call(iControl)</code>返回 “<code>[object Generator]&quot;</code><br><code>Object.prototype.toString.call(genFn)</code>返回 “<code>[object GeneratorFunction]&quot;</code></p>\n</blockquote>\n<h2 id=\"4-2-Generator-函数体内含有其他代码\"><a href=\"#4-2-Generator-函数体内含有其他代码\" class=\"headerlink\" title=\"4.2 Generator 函数体内含有其他代码\"></a>4.2 Generator 函数体内含有其他代码</h2><p>NOTICE：Generator 中如果<code>yield</code>关键字前后有其他代码，都会正常同步执行，见下面实例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">222</span>);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">222</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">333</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iControl = <span class=\"title function_\">genFn</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>());</span><br></pre></td></tr></table></figure>\n<p>执行上面代码，打印顺序为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一次调用后挂起</span></span><br><span class=\"line\"><span class=\"number\">111</span></span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">111</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次调用后挂起</span></span><br><span class=\"line\"><span class=\"number\">222</span></span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"number\">222</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后一次调用后结束，注意结束之前先把前面的代码执行完，这里对应先打印 333</span></span><br><span class=\"line\"><span class=\"number\">333</span></span><br><span class=\"line\">&#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-抛出错误\"><a href=\"#4-3-抛出错误\" class=\"headerlink\" title=\"4.3 抛出错误\"></a>4.3 抛出错误</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">222</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iControl = <span class=\"title function_\">genFn</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123;value: 111, done: false&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"keyword\">throw</span>(<span class=\"string\">&quot;出错了&quot;</span>)); <span class=\"comment\">// &#x27;出错了&#x27;，之后结束，输出 &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"5）遍历-Generator-的输出\"><a href=\"#5）遍历-Generator-的输出\" class=\"headerlink\" title=\"5）遍历 Generator 的输出\"></a>5）遍历 Generator 的输出</h1><h2 id=\"5-1-自定义循环方法\"><a href=\"#5-1-自定义循环方法\" class=\"headerlink\" title=\"5.1 自定义循环方法\"></a>5.1 自定义循环方法</h2><p>\b 通过循环调用 Iterator 的<code>next()</code>方法可以遍历 Generator 的输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">222</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iControl = <span class=\"title function_\">genFn</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> item;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 item 赋值后再进行判断，赋值的过程同时执行了 Iterator 的 next() 方法</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (!(item = iControl.<span class=\"title function_\">next</span>()).<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item.<span class=\"property\">value</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2-原生封装的方法\"><a href=\"#5-2-原生封装的方法\" class=\"headerlink\" title=\"5.2 原生封装的方法\"></a>5.2 原生封装的方法</h2><p>可以通过 JS 内置<code>let - of</code>实现对迭代器对象的值序列的遍历</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">222</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (value <span class=\"keyword\">of</span> <span class=\"title function_\">genFn</span>()) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6）Generator-中包含-Generator\"><a href=\"#6）Generator-中包含-Generator\" class=\"headerlink\" title=\"6）Generator 中包含 Generator\"></a>6）Generator 中包含 Generator</h1><p>如果 Generator 中含有子 Generator，会进入子 Genretator 中执行，子 Generator 执行完，父 Generator 继续执行，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"title function_\">genFn2</span>();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">222</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genFn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;aaa&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;bbb&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (value <span class=\"keyword\">of</span> <span class=\"title function_\">genFn</span>()) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value); <span class=\"comment\">// 依次输出 111, &#x27;aaa&#x27;, &#x27;bbb&#x27;, 222</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7）给-Generator-传递参数\"><a href=\"#7）给-Generator-传递参数\" class=\"headerlink\" title=\"7）给 Generator 传递参数\"></a>7）给 Generator 传递参数</h1><p>可以通过两种形式给 Generator 传参：1，通过给 Generator 函数本身传递参数；2，通过给 Iterator 的<code>next()</code>方法传参。</p>\n<h2 id=\"7-1-给-Generator-函数传参\"><a href=\"#7-1-给-Generator-函数传参\" class=\"headerlink\" title=\"7.1 给 Generator 函数传参\"></a>7.1 给 Generator 函数传参</h2><p>通过给 Generator 函数传递参数，在整个 Generator 生命周期中都可以访问，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genFn</span>(<span class=\"params\">param</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span> + param;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span> + param;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iControl = <span class=\"title function_\">genFn</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>); <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-2-给-Iterator-的-next-传参\"><a href=\"#7-2-给-Iterator-的-next-传参\" class=\"headerlink\" title=\"7.2 给 Iterator 的 next() 传参\"></a>7.2 给 Iterator 的 next() 传参</h2><p>通过给 Iterator 的<code>next()</code>传递的参数，<strong>会替换正在等待的整个 yield 语句</strong>，见下面例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"keyword\">yield</span> <span class=\"number\">2</span> + a;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iControl = <span class=\"title function_\">genFn</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传参后替换前一个 yield，所以代码变为 const b = yield 2 + 100;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>(<span class=\"number\">100</span>).<span class=\"property\">value</span>); <span class=\"comment\">// 102</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传参后替换前一个 yield，所以代码变为 console.log(100);</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iControl.<span class=\"title function_\">next</span>(<span class=\"number\">100</span>).<span class=\"property\">value</span>); <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<p>注意，因为第一个<code>next()</code>调用时没有等待的<code>yield</code>语句，所以第一次调用<code>next()</code>时传递的参数会被忽略。</p>\n<blockquote>\n<p>如果想在第一次调用<code>next()</code>时使用参数，可以给 Generator 函数本身传参</p>\n</blockquote>\n<h1 id=\"8）Generator-原理简述\"><a href=\"#8）Generator-原理简述\" class=\"headerlink\" title=\"8）Generator 原理简述\"></a>8）Generator 原理简述</h1><ul>\n<li>Generator 函数能够 <em>挂起-执行</em> 本质是它的执行上下文在函数执行结束之前不会销毁（_挂起_ 是中间阶段，没有结束，所以上下文在 _挂起_ 的时候不会销毁）；</li>\n<li>但当 Generator 挂起的时候（遇到<code>yield</code>关键字）会离开函数调用栈让渡给其他函数，实现非阻塞；</li>\n<li>同时，Generator 返回的 Iterator 对象保存着 Generator 的执行上下文信息，所以可以在 Generator 重新回到函数调用栈时（通过<code>next()</code>或者<code>throw()</code>方法触发）从上次挂起的位置继续执行；</li>\n<li>Generator 执行完成，它的上下文随即销毁。</li>\n</ul>\n<p>这里的关键在于，<strong>Generator 挂起的时候上下文会得到保持</strong>，配合<code>yield</code>及<code>next()</code>、<code>throw()</code>的工作，实现 <em>挂起-执行</em> 的循环，直到执行结束。</p>\n<p>从调用开始到结束，其生命周期可描述如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">调用 Generator --&gt; 挂起开始 --&gt; 执行 [--&gt; yield 挂起 --&gt; 执行 --&gt; ...] --&gt; 结束</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>首次调用 Generator 会立即进入挂起等待执行阶段。</p>\n</blockquote>\n<p>Generator 函数的工作机制 <strong>很像闭包</strong>：返回的 Iterator 对象保持对 Generator 上下文的引用，所以 Generator 的上下文在离开函数调用栈的时候可以保持。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[美]JOHN RESIG,BEAR BIBEAULT and JOSIP MARAS 著（2016），Secrets of the JavaScript Ninja (Second Edition)，第 6 章 生成器部分，Manning Publications Co.</p>\n","categories":["JavaScript"],"tags":["JavaScript","ES6","ES7"]},{"title":"JS 中 new 调用函数原理","url":"https://xiaogliu.github.io/2018/06/28/what-happened-when-using-new/","content":"<p>JavaScript 中经常使用构造函数创建对象（通过 <code>new</code> 操作符调用一个函数），那在使用 <code>new</code> 调用一个函数的时候到底发生了什么？先看几个例子，再解释背后发生了什么。</p>\n<h2 id=\"1）看三个例子\"><a href=\"#1）看三个例子\" class=\"headerlink\" title=\"1）看三个例子\"></a>1）看三个例子</h2><h3 id=\"1-1-无-return-语句\"><a href=\"#1-1-无-return-语句\" class=\"headerlink\" title=\"1.1 无 return 语句\"></a>1.1 无 return 语句</h3><p>构造函数最后没有 <code>return</code> 语句，这也是使用构造函数时默认情况，最后会返回一个新对象，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o);</span><br></pre></td></tr></table></figure>\n<p>这是常见的使用构造函数创建对象的过程，打印出来的是 <code>&#123;age: 111&#125;</code>。</p>\n<h3 id=\"1-2-return-对象类型数据\"><a href=\"#1-2-return-对象类型数据\" class=\"headerlink\" title=\"1.2 return 对象类型数据\"></a>1.2 return 对象类型数据</h3><p>构造函数最后 <code>return</code> 对象类型数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;我是显式返回的&quot;</span> &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"number\">222</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o);</span><br></pre></td></tr></table></figure>\n<p>打印出来的是 <code>&#123;type: &#39;我是显式返回的&#39;&#125;</code>，也就是说，<code>return</code> 之前的工作都白做了，最后返回 <code>return</code> 后面的对象。</p>\n<h3 id=\"1-3-return-基本类型数据\"><a href=\"#1-3-return-基本类型数据\" class=\"headerlink\" title=\"1.3 return 基本类型数据\"></a>1.3 return 基本类型数据</h3><p>那是不是只要构造函数体内最后有 <code>return</code>，返回都是 <code>return</code> 后面的数据呢？</p>\n<p>我们看下返回基本类型数据的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"number\">333</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o);</span><br></pre></td></tr></table></figure>\n<p>打印出来的是 <code>&#123;age: 333&#125;</code>，和没有 <code>return</code> 时效果一样。跟预期不一样，背后你原理看下面分析。</p>\n<h2 id=\"2）背后原理\"><a href=\"#2）背后原理\" class=\"headerlink\" title=\"2）背后原理\"></a>2）背后原理</h2><h3 id=\"2-1-非箭头函数的情况\"><a href=\"#2-1-非箭头函数的情况\" class=\"headerlink\" title=\"2.1 非箭头函数的情况\"></a>2.1 非箭头函数的情况</h3><p>当使用 <code>new</code> 操作符创建对象是，ES5 官方文档在 <em>函数定义</em> 一节中做了如下定义 [13.2.2 <a href=\"https://stackoverflow.com/questions/1978049/what-values-can-a-constructor-return-to-avoid-returning-this\">[Construct]]</a>：</p>\n<p>When the <code>[[Construct]]</code> internal method for a <code>Function</code> object <code>F</code> is called with a possibly empty list of arguments, the following steps are taken:</p>\n<ol>\n<li>Let obj be a newly created <strong>native ECMAScript object</strong>.</li>\n<li>Set all the internal methods of obj as specified in 8.12.</li>\n<li>Set the [[Class]] internal property of obj to Object.</li>\n<li>Set the [[Extensible]] internal property of obj to true.</li>\n<li>Let proto be the value of calling the [[Get]] internal property of <strong>F with argument “prototype”</strong>.</li>\n<li>If Type(proto) is Object, set the <strong>[[Prototype]] internal property of obj to proto</strong>.</li>\n<li>If Type(proto) is not Object, set the [[Prototype]] internal property of obj to the standard built-in <strong>Object prototype object</strong> as described in 15.2.4.</li>\n<li>Let result be the result of calling the [[Call]] internal property of F, <strong>providing obj as the this value</strong> and providing the argument list passed into [[Construct]] as args.</li>\n<li><strong>If Type(result) is Object then return result</strong>.</li>\n<li>Return obj.</li>\n</ol>\n<p>看第 8、9 步：</p>\n<blockquote>\n<p>8）调用函数 <code>F</code>，将其返回值赋给 <code>result</code>；其中，<code>F</code> 执行时的实参为传递给 <code>[[Construct]]</code>（即 <code>F</code> 本身） 的参数，<code>F</code> 内部 <code>this</code> 指向 <code>obj</code>；<br>9）如果 <code>result</code> 是 <code>Object</code> 类型，返回 <code>result</code>；</p>\n</blockquote>\n<p><strong>这也就解释了如果构造函数显式返回对象类型，则直接返回这个对象，而不是返回最开始创建的对象。</strong></p>\n<p>最后在看第 10 步：</p>\n<blockquote>\n<p>10）如果 <code>F</code> 返回的不是对象类型（第 9 步不成立），则返回创建的对象 <code>obj</code>。</p>\n</blockquote>\n<p><strong>如果构造函数没有显式返回对象类型（显式返回基本数据类型或者直接不返回），则返回最开始创建的对象。</strong></p>\n<h3 id=\"2-2-箭头函数的情况\"><a href=\"#2-2-箭头函数的情况\" class=\"headerlink\" title=\"2.2 箭头函数的情况\"></a>2.2 箭头函数的情况</h3><p>那如果构造函数是箭头函数怎么办？</p>\n<p>箭头函数中没有 <code>[[Construct]]</code> 方法，不能使用 <code>new</code> 调用，会报错。</p>\n<p>NOTICE：其中 <code>[[Construct]]</code> 就是指构造函数本身。</p>\n<blockquote>\n<p>相关规范在 <a href=\"https://www.ecma-international.org/ecma-262/6.0/index.html\">ES6 的官方文档</a> 中有提，但自从 ES6 以来的官方文档巨难懂，在此不做表述。</p>\n</blockquote>\n<h2 id=\"3）new-调用函数完整过程\"><a href=\"#3）new-调用函数完整过程\" class=\"headerlink\" title=\"3）new 调用函数完整过程\"></a>3）new 调用函数完整过程</h2><h3 id=\"3-1-中文描述及相关代码分析\"><a href=\"#3-1-中文描述及相关代码分析\" class=\"headerlink\" title=\"3.1 中文描述及相关代码分析\"></a>3.1 中文描述及相关代码分析</h3><p>除了箭头函数之外的任何函数，都可以使用 <code>new</code> 进行调用，背后发生了什么，上节英文讲述的很清楚了，再用中文描述如下：</p>\n<p>1）创建 ECMAScript 原生对象 <code>obj</code>；<br>2）给 <code>obj</code> 设置原生对象的内部属性；（和原型属性不同，内部属性表示为 <code>[[PropertyName]]</code>，两个方括号包裹属性名，并且属性名大写，比如常见 <code>[[Prototype]]</code>、<code>[[Constructor]]</code>）<br>3）设置 <code>obj</code> 的内部属性 <code>[[Class]]</code> 为 <code>Object</code>；<br>4）设置 <code>obj</code> 的内部属性 <code>[[Extensible]]</code> 为 <code>true</code>；<br>5）将 <code>proto</code> 的值设置为 <code>F</code> 的 <code>prototype</code> 属性值；<br>6）如果 <code>proto</code> 是对象类型，则设置 <code>obj</code> 的内部属性 <code>[[Prototype]]</code> 值为 <code>proto</code>；（<strong>进行原型链关联，实现继承的关键</strong>）<br>7）如果 <code>proto</code> 是不对象类型，则设置 <code>obj</code> 的内部属性 <code>[[Prototype]]</code> 值为内建构造函数 <strong>Object</strong> 的 <code>prototype</code> 值；（<strong>函数 <code>prototype</code> 属性可以被改写</strong>，如果改成非对象类型，<code>obj</code> 的 <code>[[Prototype]]</code> 就指向 Object 的原型对象）<br>8）9）10）见上节分析。（决定返回什么）</p>\n<p>对于第 7 步的情况，见下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"string\">&quot;xiaoming&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o1.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重写构造函数原型属性为非对象类型，实例内部 [[Prototype]] 属性指向 Object 原型对象</span></span><br><span class=\"line\"><span class=\"comment\">// 因为实例是一个对象类型的数据，默认会继承内建对象的原型，</span></span><br><span class=\"line\"><span class=\"comment\">// 如果构造函数的原型不满足形成原型链的要求，那就跳过直接和内建对象原型关联</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"string\">&quot;xiaohong&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o2.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o2.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-更简洁的语言描述\"><a href=\"#3-2-更简洁的语言描述\" class=\"headerlink\" title=\"3.2 更简洁的语言描述\"></a>3.2 更简洁的语言描述</h3><ul>\n<li>若执行 <code>new Foo()</code>，过程如下：</li>\n</ul>\n<p>1）创建新对象 <code>o</code>；<br>2）给新对象的内部属性赋值，关键是给<code>[[Prototype]]</code>属性赋值，构造原型链（如果构造函数的原型是 Object 类型，则指向构造函数的原型；不然指向 Object 对象的原型）；<br>3）执行函数 <code>Foo</code>，执行过程中内部 <code>this</code> 指向新创建的对象 <code>o</code>；<br>4）如果 <code>Foo</code> 内部显式返回对象类型数据，则，返回该数据，执行结束；不然返回新创建的对象 <code>o</code>。</p>\n<h3 id=\"3-3-伪代码实现-new\"><a href=\"#3-3-伪代码实现-new\" class=\"headerlink\" title=\"3.3 伪代码实现 new\"></a>3.3 伪代码实现 new</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(...args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 过程如下（不考虑 Foo 显式返回对象）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;&#125;;</span><br><span class=\"line\">bar.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>; <span class=\"comment\">// 或者 bar.[[Prototype]] = Foo.prototype</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">apply</span>(bar, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> bar;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-可运行的-new-polyfill\"><a href=\"#3-4-可运行的-new-polyfill\" class=\"headerlink\" title=\"3.4 可运行的 new polyfill\"></a>3.4 可运行的 new polyfill</h3><ul>\n<li>好理解的版本</li>\n</ul>\n<p>下面这个版本也是根据规范表述写的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 入参：构造函数、构造函数入参</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 提取构造函数，同时删除 arguments 第一个元素</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title class_\">Constructor</span> = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = <span class=\"title class_\">Constructor</span>.<span class=\"title function_\">apply</span>(obj, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果构造函数返回对象，则直接返回构造函数的对象，不然返回创建的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> temp <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span> ? temp : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>兼容不支持 <code>__proto__</code> 的版本</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title class_\">Constructor</span> = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建对象，并关联原型链</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = <span class=\"title class_\">Constructor</span>.<span class=\"title function_\">apply</span>(obj, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果构造函数返回对象，则直接返回构造函数的对象，不然返回创建的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> temp <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span> ? temp : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考这篇文章后面的评论<a href=\"https://github.com/mqyqingfeng/Blog/issues/13\">JavaScript深入之new的模拟实现</a>，注意，<strong>是这篇文章后面的评论</strong>，文章本身代码实现和 《JavaScript 设计模式与开发实践》p19 中一样，不知谁参考了谁的，但后面的评论有些很精彩。</p>\n</blockquote>\n<h2 id=\"4）几点说明\"><a href=\"#4）几点说明\" class=\"headerlink\" title=\"4）几点说明\"></a>4）几点说明</h2><h3 id=\"4-1-判断是否是-Object-类型\"><a href=\"#4-1-判断是否是-Object-类型\" class=\"headerlink\" title=\"4.1 判断是否是 Object 类型\"></a>4.1 判断是否是 Object 类型</h3><p>关于一个数据是否是 <code>Object</code> 类型，可以通过 <code>instanceof</code> 操作符进行判断：如果 <code>x instanceof Object</code> 返回 <code>true</code>，则 <code>x</code> 为 <code>Object</code> 类型。</p>\n<p>由上可知，<code>null instanceof Object</code> 返回 <code>false</code>，所以 <code>null</code> 不是 <code>Object</code> 类型，尽管<code>typeof null</code> 返回 “Object”。</p>\n<h3 id=\"4-2-instanceof-原理\"><a href=\"#4-2-instanceof-原理\" class=\"headerlink\" title=\"4.2 instanceof 原理\"></a>4.2 instanceof 原理</h3><p><strong><code>instanceof</code> 的工作原理是：在表达式 <code>x instanceof Foo</code> 中，如果 <code>Foo</code> 的原型（即 <code>Foo.prototype</code>）出现在 <code>x</code> 的原型链中，则返回 <code>true</code>，不然，返回 <code>false</code></strong>。</p>\n<p>因为函数的原型可以被改写，所以会出现在 <code>x</code> 通过 <code>Foo</code> new 出来<strong>之后</strong>完全改写 <code>Foo</code> 的原型 <code>x instanceof Foo</code> 返回 <code>false</code> 的情况。因为实例创建之后重写构造函数原型，实例指向的原型已经不是构造函数的新的原型了，见下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">o <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Foo</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重写 Foo 原型</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;&#125;;</span><br><span class=\"line\">o <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Foo</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>PS.那既然 <code>instanceof</code> 不靠谱，怎么才能判断一个实例是哪个构造函数构造的呢？可以通过原型对象上的 <code>constructor</code> 属性实现：虽然构造函数原型可以改写导致之前创建的实例的原型链断开，但是，构造函数的原型中 <code>contructor</code> 属性还是指向构造函数的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重写 Foo 原型</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;&#125;;</span><br><span class=\"line\">o <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Foo</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// o.__proto__ 获取 o 构造函数的原型，此时，其 constructor 属性还是之前最初的构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 通过 name 属性能直接找到构造函数是哪个 </span></span><br><span class=\"line\">o.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span>.<span class=\"property\">name</span>; <span class=\"comment\">// Foo</span></span><br><span class=\"line\">o.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Foo</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>但重新原型对象，稍不注意会引入新的问题：<code>constructor</code> 指向丢失。比如上面的例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"comment\">// 重写 Foo 原型</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">o1.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span>.<span class=\"property\">name</span>; <span class=\"comment\">// Object 而非 Foo，因为 Foo.prototype = new Object(); 新建对象实例，普通对象实例没有 constructor 属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每次重新原型都要向下面这样执行 constructor </span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">constructor</span>: <span class=\"title class_\">Foo</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">o2.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span>.<span class=\"property\">name</span>; <span class=\"comment\">// Foo</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>虽然 function 自带的原型对象也是对象，但有特殊属性 <code>constructor</code>，重写后默认丢失，需要指定。</p>\n</blockquote>\n<h3 id=\"4-3-关于内建构造函数\"><a href=\"#4-3-关于内建构造函数\" class=\"headerlink\" title=\"4.3 关于内建构造函数\"></a>4.3 关于内建构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 内建构造函数都是 Function 的实例</span></span><br><span class=\"line\"><span class=\"comment\">// 毕竟也是函数，但创建过程待重新整理</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Date</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">RegExp</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Date</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">RegExp</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>但下面也成立：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为 Function 的原型对象（Function.__proto__）的 __proto__ 指向 Object.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// 即 Object.prototype 出现在了 Function 的原型链上</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>具体参考这篇问答：<a href=\"https://stackoverflow.com/questions/23622695/why-in-javascript-both-object-instanceof-function-and-function-instanceof-obj/23623598\">Why in JavaScript both “Object instanceof Function” and “Function instanceof Object” return true?</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://stackoverflow.com/questions/1978049/what-values-can-a-constructor-return-to-avoid-returning-this\">What values can a constructor return to avoid returning this?</a><br>[<code>[[Construct]]</code> internal method](<a href=\"https://stackoverflow.com/questions/21874128/construct-internal-method\">https://stackoverflow.com/questions/21874128/construct-internal-method</a>)   </p>\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"使用 ESLint && Prettier 规范代码格式","url":"https://xiaogliu.github.io/2018/05/15/format-code-by-eslint-and-prettier/","content":"<p>开始配置之前，先问个问题：<a href=\"https://eslint.org/\">ESLint</a> 和 <a href=\"https://prettier.io/\">Prettier</a> 有什么不同？</p>\n<p>之所以问这个问题是因为 ESLint 除了代码质量检查（比如有无声明但没有使用的变量）也提供了自动格式化代码的功能，比如，将双引号变为单引号，自定添加 trailing comma 等，既然如此，那干嘛还要再引入 Prettier？毕竟，Prettier 就是用于代码格式化的。</p>\n<p>其实，在格式化代码方面， Prettier 确实和 ESLint 有重叠，但他们侧重点不同：ESLint 主要工作就是检查代码质量并给出提示，它所能提供的格式化功能很有限；而 Prettier 在格式化代码方面就强大的多。</p>\n<blockquote>\n<p>关于 ESLint 可修复的 style 类目参考这个列表下标有扳手标记的项<a href=\"https://eslint.org/docs/rules/#stylistic-issues\">Stylistic Issues</a></p>\n</blockquote>\n<p><strong>举个例子：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">testURL</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable constant_\">TEST</span> = <span class=\"number\">11</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，</p>\n<p>ESLint 可以</p>\n<p><strong>检查：</strong></p>\n<p>1）TEST 是常量，应该用 const 声明；<br>2）TEST 声明后没有使用。</p>\n<p><strong>自动修改：</strong></p>\n<p>1）将 let 声明改为 const 声明。</p>\n<p>但 ESLint 也只能做什么多了，但倒数第二个空行，ESLint 就无能为力了。这时候， Prettier 就登场了：Prettier 可以自动删除倒数第二行的空行。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>因为 ESLint 和 Prettier 都可以格式化代码，如果他们对格式化代码执行不同规则，那就可能发生冲突，可以通过配置解决大部分冲突，但仍有一些是无法解决的，比如，Prettier 在 <code>function</code> 关键字后不允许有空格且不能自定义，那如果想避免 ESLint 不报错，只能配置 ESLint 允许 <code>function</code> 关键字后不带空格（主要针对匿名函数）。</p>\n<p>这类不能配置的冲突很少，目前我只发现一例，所以，还是选择继续使用 Prettier，毕竟，更多的时候使用 Prettier 很方便，并且，后续 Prettier 版本可能会添加更多自定义选项。</p>\n<blockquote>\n<p>关于 <code>function</code> 关键字后不带空格更多讨论可参考<a href=\"https://github.com/prettier/prettier/issues/1139\">Space after function keyword - MOVED to #3847!</a></p>\n</blockquote>\n<p>基于 Atom 和 VS Code 两个编辑器的配置过程如下</p>\n<h3 id=\"编辑器配置\"><a href=\"#编辑器配置\" class=\"headerlink\" title=\"编辑器配置\"></a>编辑器配置</h3><p>1）Atom</p>\n<p>安装插件：</p>\n<p><a href=\"https://atom.io/packages/prettier-atom\">prettier-atom</a>：格式化代码；<br><a href=\"https://atom.io/packages/atom-beautify\">atom-beautify</a>：格式化代码（以 prettier 为主，没有 prettier 时用，同时在 setting 设置 vue 的格式化插件为 prettier-atom）；<br><a href=\"https://atom.io/packages/linter-eslint\">linter-eslint</a>：js 检查，可设置和 prettier 配合使用（还有其他相关依赖，atom 会提示安装）</p>\n<p>插件相关配置在插件面板中有，这里安装 atom-beautify 是因为 <strong>Prettier 对于 vue 中的 html 无法自动格式化</strong>，所以，使用 atom-beautify 替代。</p>\n<p>另外，不知道什么原因，<strong>Prettier 不能正确格式化 css/scss</strong>，故也用 atom-beautify 替代。</p>\n<p>Prettier 格式化默认快捷键：<code>ctrl + alt + f</code>，atom-beautify 格式化默认快捷键 <code>ctrl + alt + b</code></p>\n<p>2）VS Code</p>\n<p>安装插件：</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESlint</a>，<a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier</a></p>\n<p>VS Code 插件配置统一在 <code>preference -&gt; setting -&gt; user setting</code> 设置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点击保存时，根据 eslint 规则自定修复，同时集成 prettier 到 eslint 中</span></span><br><span class=\"line\"><span class=\"string\">&quot;prettier.eslintIntegration&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint.autoFixOnSave&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为了避免和 eslint 冲突，讲编辑器默认的代码检查规则关闭（如果开启了）</span></span><br><span class=\"line\"><span class=\"string\">&quot;editor.formatOnSave&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;javascript.format.enable&quot;</span>: <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n<h3 id=\"在项目中安装本地依赖\"><a href=\"#在项目中安装本地依赖\" class=\"headerlink\" title=\"在项目中安装本地依赖\"></a>在项目中安装本地依赖</h3><p>[update 2019-08-01]：现在 ESLint 和 Prettier 功能已经足够强大，不需要安装这么多依赖了，详细配置可参考基于 react 的 <a href=\"https://github.com/xiaogliu/react-simple-boilerplate\">demo</a> </p>\n<p>1）ESlint 相关</p>\n<p>这里使用 airbnb 代码规范、babel 对 ES6 语法做检查，同时安装了对 react 和 vue 支持的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add</span><br><span class=\"line\">  eslint babel-core babel-eslint eslint-config-airbnb eslint-plugin-import</span><br><span class=\"line\">  eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-vue eslint-plugin-html</span><br><span class=\"line\">-D</span><br></pre></td></tr></table></figure>\n<p>如果在不需要 vue 和 react 的项目中，只需安装下面依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add</span><br><span class=\"line\">  eslint babel-core babel-eslint eslint-config-airbnb eslint-plugin-import</span><br><span class=\"line\">  eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-html</span><br><span class=\"line\">-D</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为 eslint-config-airbnb 依赖 eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react，所以即便不使用 react，也要安装这三个依赖</p>\n</blockquote>\n<p>2） Prettier 相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add eslint-config-prettier eslint-plugin-prettier prettier -D</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>编辑器中如果已经安装了 Prettier 插件，可以省略这步？编辑器的 Prettier 和 npm 安装的 Prettier 相互有怎样的影响还不太清楚。</p>\n</blockquote>\n<h3 id=\"编写配置文件\"><a href=\"#编写配置文件\" class=\"headerlink\" title=\"编写配置文件\"></a>编写配置文件</h3><p>编写 ESlint 配置文件 <code>.eslintrc.js</code> 配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">root</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查 ES6 语法</span></span><br><span class=\"line\">    <span class=\"attr\">parser</span>: <span class=\"string\">&quot;babel-eslint&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">env</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">browser</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// extending airbnb config and config derived from eslint-config-prettier</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里是 vue</span></span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&quot;plugin:vue/essential&quot;</span>, <span class=\"string\">&quot;airbnb-base&quot;</span>, <span class=\"string\">&quot;prettier&quot;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 选择 eslint 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"string\">&quot;prettier&quot;</span>, <span class=\"string\">&quot;vue&quot;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// react</span></span><br><span class=\"line\">  <span class=\"comment\">// extends: [&#x27;airbnb-base&#x27;, &#x27;prettier&#x27;],</span></span><br><span class=\"line\">  <span class=\"comment\">// plugins: [&#x27;prettier&#x27;, &#x27;react&#x27;],</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 不需要框架</span></span><br><span class=\"line\">  <span class=\"comment\">// extends: [&#x27;airbnb-base&#x27;, &#x27;prettier&#x27;],</span></span><br><span class=\"line\">  <span class=\"comment\">// plugins: [&#x27;prettier&#x27;],</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 自定义 eslint 检查规则</span></span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义 prettier 规则 (实际上，可配置项非常有限)</span></span><br><span class=\"line\">    <span class=\"string\">&quot;prettier/prettier&quot;</span>: [</span><br><span class=\"line\">      <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">singleQuote</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">trailingComma</span>: <span class=\"string\">&quot;all&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">camelcase</span>: <span class=\"string\">&quot;off&quot;</span>, <span class=\"comment\">// 强制驼峰法命名</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-new&quot;</span>: <span class=\"string\">&quot;off&quot;</span>, <span class=\"comment\">// 禁止在使用new构造一个实例后不赋值</span></span><br><span class=\"line\">    <span class=\"string\">&quot;space-before-function-paren&quot;</span>: <span class=\"string\">&quot;off&quot;</span>, <span class=\"comment\">// 函数定义时括号前面不要有空格</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-plusplus&quot;</span>: <span class=\"string\">&quot;off&quot;</span>, <span class=\"comment\">// 禁止使用 ++， ——</span></span><br><span class=\"line\">    <span class=\"string\">&quot;max-len&quot;</span>: <span class=\"string\">&quot;off&quot;</span>, <span class=\"comment\">// 字符串最大长度</span></span><br><span class=\"line\">    <span class=\"string\">&quot;func-names&quot;</span>: <span class=\"string\">&quot;off&quot;</span>, <span class=\"comment\">// 函数表达式必须有名字</span></span><br><span class=\"line\">    <span class=\"string\">&quot;no-param-reassign&quot;</span>: <span class=\"string\">&quot;off&quot;</span> <span class=\"comment\">// 不准给函数入参赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// react 如果在项目中文件名后缀是 .js 而不是 .jsx 避免报错</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;react/jsx-filename-extension&quot;: [1, &#123; &quot;extensions&quot;: [&quot;.js&quot;, &quot;.jsx&quot;] &#125;],</span></span><br><span class=\"line\">    <span class=\"comment\">// react props validation 错误</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;react/prop-types&quot;: 0,</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>需要特别注意，在使用 Prettier 的时候，ESLint 自定义规则不能和 Prettier 的重复，不然会重复格式化，比如，如果在 ESLint 自定义规则中添加了下面内容会导致格式化时多出一个分号和逗号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加多这两个自定义规则，导致重复格式化</span></span><br><span class=\"line\"><span class=\"attr\">semi</span>: [<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"string\">&#x27;always&#x27;</span>], <span class=\"comment\">// 语句强制分号结尾</span></span><br><span class=\"line\"><span class=\"string\">&#x27;comma-dangle&#x27;</span>: [<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"string\">&#x27;always-multiline&#x27;</span>], <span class=\"comment\">// 多行对象字面量项尾总是有逗号</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://medium.com/@netczuk/your-last-eslint-config-9e35bace2f99\">Your last ESLint config</a></p>\n","categories":["Tools"],"tags":["Tools"]},{"title":"用 ES6 写全屏滚动插件","url":"https://xiaogliu.github.io/2018/04/28/develop-full-page-scroll-by-es6/","content":"<p>这篇文章将介绍如何使用原生 JS （主要使用 ES6 语法）实现全屏滚动插件，兼容 IE 10+、手机触屏，Mac 触摸板优化，支持自定义页面动画，压缩后 gzip 文件只有 2.15KB。完整源码在这 <a href=\"https://github.com/xiaogliu/pure-full-page\">pure-full-page</a>，点这查看 <a href=\"https://xiaogliu.github.io/pure-full-page/index.html\">demo</a>。</p>\n<h2 id=\"1）前面的话\"><a href=\"#1）前面的话\" class=\"headerlink\" title=\"1）前面的话\"></a>1）前面的话</h2><p>现在已经有很多全屏滚动插件了，比如著名的 <a href=\"https://github.com/alvarotrigo/fullPage.js\">fullPage</a>，那为什么还要自己造轮子呢？</p>\n<p>现有轮子有以下问题：</p>\n<ul>\n<li>首先，最大的问题是最流行的几个插件都依赖 jQuery，这意味着在使用 React 或者 Vue 的项目中使用他们是一件十分蛋疼的事：我只需要一个全屏滚动功能，却还需要把 jQuery 引入，有种杀鸡使用宰牛刀的感觉；</li>\n<li>其次，现有的很多全屏滚动插件功能往往都十分丰富，这在前几年是优势，但现在（2018-5）可以看作是劣势：前端开发已经发生了很大变化，其中很重要的一个变化是 ES6 原生支持模块化开发，模块化开发最大的特点是一个模块最好只专注做好一件事，然后再拼成一个完整的系统，从这个角度看，大而全的插件有悖模块化开发的原则。</li>\n</ul>\n<p>对比之下，通过原生语言造轮子有以下好处：</p>\n<ul>\n<li>使用原生语言编写的插件，自身不会受依赖的插件的使用场景而影响自身的使用（现在依赖 jQuery 的插件非常不适合开发单页面应用），所以使用上更加灵活；</li>\n<li>搭配模块化开发，使用原生语言开发的插件可以只专注一个功能，所以代码量可以很少；</li>\n<li>最后，随着 JS/CSS/HTML 的发展以及浏览器不断迭代更新，现在使用原生语言编写插件的开发成本越来越低，那为什么不呢？</li>\n</ul>\n<h2 id=\"2）实现原理及代码架构\"><a href=\"#2）实现原理及代码架构\" class=\"headerlink\" title=\"2）实现原理及代码架构\"></a>2）实现原理及代码架构</h2><h3 id=\"2-1-实现原理\"><a href=\"#2-1-实现原理\" class=\"headerlink\" title=\"2.1 实现原理\"></a>2.1 实现原理</h3><p>实现原理见下图：容器及容器内的页面取当前可视区高度，同时容器的父级元素 <code>overflow</code> 属性值设为 <code>hidden</code>，通过更改容器 <code>top</code> 值实现全屏滚动效果。</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/pure_full_page.png\" alt=\"全屏滚动实现原理\"></p>\n<h3 id=\"2-2-代码架构\"><a href=\"#2-2-代码架构\" class=\"headerlink\" title=\"2.2 代码架构\"></a>2.2 代码架构</h3><p>代码编写的思路是通过 class 定义全屏滚动类，使用时通过 <code>new PureFullPage().init()</code> 使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 全屏滚动类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PureFullPage</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 原型方法</span></span><br><span class=\"line\">  <span class=\"title function_\">methods</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化函数</span></span><br><span class=\"line\">  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3）html-结构\"><a href=\"#3）html-结构\" class=\"headerlink\" title=\"3）html 结构\"></a>3）html 结构</h2><p>鉴于上述实现原理，对于 html 的结构有特定要求，如下：页面容器为 <code>#pureFullPageContainer</code>，所有的页面为其直接子元素，这里为了方便，直接取 <code>body</code> 为其直接父元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pureFullPageContainer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4）css-设置\"><a href=\"#4）css-设置\" class=\"headerlink\" title=\"4）css 设置\"></a>4）css 设置</h2><p>首先，容器及容器内的页面取当前可视区高度，为每次切换都显示一个完整的页面做准备；</p>\n<p>第二，容器的父级元素（此处是 <code>body</code>） <code>overflow</code> 属性值定为 <code>hidden</code>，这样可以保证每次只会显示一个页面，其他页面被隐藏。</p>\n<p>经过上述设置，对容器 <code>top</code> 值，每次更改一个可视区高度的距离，便实现了页面间的切换，部分代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* body 为容器直接的父元素 */</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#pureFullPage</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 只有当 position 的值不是 static 时，top 值才有效 */</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"comment\">/* 设置初始值 */</span></span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.page</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 此处不能为 100vh，后面详述 */</span></span><br><span class=\"line\">  <span class=\"comment\">/* 其父元素，也就是 #pureFullPage 的高度，通过 js 动态设置*/</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Notice：</p>\n<ul>\n<li><p>容器的 <code>position</code> 属性值需要设置为 <code>relative</code>，因为 <code>top</code> 只有在 <code>position</code> 属性值不为 <code>static</code> 时才有效；</p>\n</li>\n<li><p>页面高度需设置为当前可视区高度，但不能直接设置为 <code>100vh</code>，因为 safari 手机浏览器把地址栏算进去计算 <code>100vh</code>，但地址栏下面的不应该算做“可视区”，毕竟实际上是“看不见”的区域。这会导致 <code>100vh</code> 对应的像素值比 <code>document.documentElement.clientHeight</code> 获取的像素值大。这样在切换 <code>top</code> 值时就不是全屏切换了，实际上，这种情况下切换的高度小于页面的高度。</p>\n</li>\n<li><p>解决 safari 手机浏览器可视区高度问题：既然通过 js 获取的 <code>document.documentElement.clientHeight</code> 值是符合预期的可视区高度（不包括顶部地址栏和底部工具栏），那就<strong>将该值通过 js 设置为容器的高度，同时，容器内的页面高度设置为 <code>100%</code></strong>，这样就可以保证容器及页面的高度和切换 <code>top</code> 值相同了，也就保证了全屏切换。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"string\">&#x27;#pureFullPage&#x27;</span>.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5）监控滚动-滑动事件\"><a href=\"#5）监控滚动-滑动事件\" class=\"headerlink\" title=\"5）监控滚动/滑动事件\"></a>5）监控滚动/滑动事件</h2><p>这里的滚动/滑动事件包括鼠标滚动、触摸板滑动以及手机屏幕上下滑动。</p>\n<h3 id=\"5-1-PC-端\"><a href=\"#5-1-PC-端\" class=\"headerlink\" title=\"5.1 PC 端\"></a>5.1 PC 端</h3><p>PC 端主要解决的问题是获取鼠标滚动或触摸板滑动方向，触摸板上下滑动和鼠标滚动绑定的是同一个事件：</p>\n<ul>\n<li>firefox 是 <code>DOMMouseScroll</code> 事件，对应的滚轮信息（向前滚还是向后滚）存储在 <code>detail</code> 属性中，向前滚，这个属性值是 3 的倍数，反之，是 -3 的倍数；</li>\n<li>firefox 之外的其他浏览器是 <code>mousewheel</code> 事件，对应的滚轮信息存储在 <code>wheelDelta</code> 属性中，向前滚，这个属性值是 -120 的倍数，反之， 120 的倍数。</li>\n</ul>\n<blockquote>\n<p>macOS 如此，windows 相反？</p>\n</blockquote>\n<p>所以，可以通过 <code>detail</code> 或 <code>wheelDelta</code> 的值判断鼠标的滚动方向，进而控制页面是向上还是向下滚动。在这里我们只关心正负，不关心具体值的大小，为了便于使用，下面基于这两个事件封装了一个函数：如果鼠标往前滚动，返回负数，反之，返回正数，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 鼠标滚轮事件</span></span><br><span class=\"line\"><span class=\"title function_\">getWheelDelta</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">wheelDelta</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> event.<span class=\"property\">wheelDelta</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 兼容火狐</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -event.<span class=\"property\">detail</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>有了滚动事件，就可以据此编写页面向上或者向下滚动的回调函数了，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 鼠标滚动逻辑（全屏滚动关键逻辑）</span></span><br><span class=\"line\"><span class=\"title function_\">scrollMouse</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> delta = utils.<span class=\"title function_\">getWheelDelta</span>(event);</span><br><span class=\"line\">  <span class=\"comment\">// delta &lt; 0，鼠标往前滚动，页面向下滚动</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (delta &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">goDown</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">goUp</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>goDown</code>、<code>goUp</code> 是页面滚动的逻辑代码，需要特别说明的是必须 <strong>判断滚动边界，保证容器中显示的始终是页面内容</strong>：</p>\n<ul>\n<li>上边界容易确定，为 1 个页面（也即可视区）的高度，即如果容器当前的上外边框距离整个页面顶部的距离（这里此值正是容器的 <code>offsetTop</code> 值的绝对值，因为它父元素的 <code>offsetTop</code> 值都是 <code>0</code>）大于等于当前可视区高度时，才允许向上滚动，不然，就证明上面已经没有页面了，不允许继续向上滚动；</li>\n<li>下边界为 <code>n - 2</code>（n 表示全屏滚动的页面数） 个可视区的高度，当容器的 <code>offsetTop</code> 值的绝对值小于等于 <code>n - 2</code> 个可视区的高度时，表示还可以向下滚动一个页面。</li>\n</ul>\n<p>具体代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">goUp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只有页面顶部还有页面时页面向上滚动</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (-<span class=\"variable language_\">this</span>.<span class=\"property\">container</span>.<span class=\"property\">offsetTop</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">viewHeight</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重新指定当前页面距视图顶部的距离 currentPosition，实现全屏滚动，</span></span><br><span class=\"line\">    <span class=\"comment\">// currentPosition 为负值，越大表示超出顶部部分越少</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">viewHeight</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">turnPage</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">goDown</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只有页面底部还有页面时页面向下滚动</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (-<span class=\"variable language_\">this</span>.<span class=\"property\">container</span>.<span class=\"property\">offsetTop</span> &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">viewHeight</span> * (<span class=\"variable language_\">this</span>.<span class=\"property\">pagesNum</span> - <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重新指定当前页面距视图顶部的距离 currentPosition，实现全屏滚动，</span></span><br><span class=\"line\">    <span class=\"comment\">// currentPosition 为负值，越小表示超出顶部部分越多</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">viewHeight</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">turnPage</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后添加滚动事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 鼠标滚轮监听，火狐鼠标滚动事件不同其他</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (navigator.<span class=\"property\">userAgent</span>.<span class=\"title function_\">toLowerCase</span>().<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;firefox&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;mousewheel&#x27;</span>, scrollMouse);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMMouseScroll&#x27;</span>, scrollMouse);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-移动端\"><a href=\"#5-2-移动端\" class=\"headerlink\" title=\"5.2 移动端\"></a>5.2 移动端</h3><p>移动端需要判断是向上还是向下滑动，可以结合 <code>touchstart</code>（手指开始接触屏幕时触发） 和 <code>touchend</code>（手指离开屏幕时触发） 两个事件实现判断：分别获取两个事件开始触发时的 <code>pageY</code> 值，如果触摸结束时的 <code>pageY</code> 大于触摸开始时的 <code>pageY</code>，表示手指向下滑动，对应页面向上滚动，反之亦然。</p>\n<p>此处我们需要触摸事件跟踪触摸的属性：</p>\n<ul>\n<li><code>touches</code>：当前跟踪的触摸操作的 Touch 对象的数组，用于获取触摸开始时的 <code>pageY</code> 值；</li>\n<li><code>changeTouches</code>：自上次触摸以来发生了改变的 Touch 对象的数组，用于获取触摸触摸结束时的 <code>pageY</code> 值。</li>\n</ul>\n<p>相关代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手指接触屏幕</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;touchstart&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">startY</span> = event.<span class=\"property\">touches</span>[<span class=\"number\">0</span>].<span class=\"property\">pageY</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//手指离开屏幕</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;touchend&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> endY = event.<span class=\"property\">changedTouches</span>[<span class=\"number\">0</span>].<span class=\"property\">pageY</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (endY - <span class=\"variable language_\">this</span>.<span class=\"property\">startY</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 手指向上滑动，对应页面向下滚动</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">goDown</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 手指向下滑动，对应页面向上滚动</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">goUp</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>为了避免下拉刷新，可以阻止 <code>touchmove</code> 事件的默认行为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 阻止 touchmove 下拉刷新</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;touchmove&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6）PC-端滚动事件性能优化\"><a href=\"#6）PC-端滚动事件性能优化\" class=\"headerlink\" title=\"6）PC 端滚动事件性能优化\"></a>6）PC 端滚动事件性能优化</h2><h3 id=\"6-1-防抖函数和截流函数介绍\"><a href=\"#6-1-防抖函数和截流函数介绍\" class=\"headerlink\" title=\"6.1 防抖函数和截流函数介绍\"></a>6.1 防抖函数和截流函数介绍</h3><p>优化主要从两方便入手：</p>\n<ul>\n<li>更改页面大小时，通过防抖动（debounce）函数限制 <code>resize</code> 事件触发频率；</li>\n<li>滚动/滑动事件触发时，通过截流（throttle）函数限制滚动/滑动事件触发频率。</li>\n</ul>\n<p>既然都是限制触发频率（都通过定时器实现），那这两者有什么区别？</p>\n<p>首先，防抖动函数工作时，如果在指定的延迟时间内，某个事件连续触发，那么绑定在这个事件上的回调函数永远不会触发，只有在延迟时间内，这个事件没再触发，对应的回调函数才会执行。防抖动函数非常适合改变窗口大小这一事件，这也符合 <em>拖动到位以后再触发事件，如果一直拖个不停，始终不触发事件</em> 这一直觉。</p>\n<p>而截流函数是在延迟时间内，绑定到事件上的回调函数能且只能触发一次，这和截流函数不同，即便是在延迟时间内连续触发事件，也不会阻止在延迟时间内有一个回调函数执行。并且截流函数允许我们指定回调函数是在延迟时间开始时还是结束时执行。</p>\n<p>鉴于截流函数的上述两个特性，尤其适合优化滚动/滑动事件：</p>\n<ul>\n<li>可以限制频率；</li>\n<li>不会因为滚动/滑动事件太灵敏（在延迟时间内不断触发）导致注册在事件上的回调函数无法执行；</li>\n<li>可以设置在延迟时间开始时触发回调函数，从而避免用户感到操作之后的短暂延时。</li>\n</ul>\n<p>这里不介绍防抖动函数和截流函数的实现原理，感兴趣的可以看<a href=\"https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf\">Throttling and Debouncing in JavaScript</a>，下面是实现的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 防抖动函数，method 回调函数，context 上下文，event 传入的时间，delay 延迟函数</span></span><br><span class=\"line\"><span class=\"title function_\">debounce</span>(<span class=\"params\">method, context, event, delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">clearTimeout</span>(method.<span class=\"property\">tId</span>);</span><br><span class=\"line\">  method.<span class=\"property\">tId</span> = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    method.<span class=\"title function_\">call</span>(context, event);</span><br><span class=\"line\">  &#125;, delay);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 截流函数，method 回调函数，context 上下文，delay 延迟函数，</span></span><br><span class=\"line\"><span class=\"comment\">// 这里没有提供是在延迟时间开始还是结束的时候执行回调函数的选项，</span></span><br><span class=\"line\"><span class=\"comment\">// 直接在延迟时间开始的时候执行回调</span></span><br><span class=\"line\"><span class=\"title function_\">throttle</span>(<span class=\"params\">method, context, delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> wait = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!wait) &#123;</span><br><span class=\"line\">      method.<span class=\"title function_\">apply</span>(context, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">      wait = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        wait = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>《JavaScript 高级程序设计 - 第三版》 22.33.3 节中介绍的 throttle 函数和此处定义的不同，高程中定义的 throttle 函数对应此处的 debounce 函数，但网上大多数文章都和高程中的不同，比如 lodash 中定义的 <a href=\"https://lodash.com/docs/4.17.10#debounce\">debounce</a>。</p>\n</blockquote>\n<h3 id=\"6-2-改造-PC-端滚动事件\"><a href=\"#6-2-改造-PC-端滚动事件\" class=\"headerlink\" title=\"6.2 改造 PC 端滚动事件\"></a>6.2 改造 PC 端滚动事件</h3><p>通过上述说明，我们已经知道截流函数可以通过限定滚动事件触发频率提升性能，同时，设置在<strong>延迟时间开始阶段立即调用滚动事件的回调函数</strong>并不会牺牲用户体验。</p>\n<p>截流函数上文已经定义好，使用起来就很简单了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置截流函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> handleMouseWheel = utils.<span class=\"title function_\">throttle</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">scrollMouse</span>, <span class=\"variable language_\">this</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">DELAY</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 鼠标滚轮监听，火狐鼠标滚动事件不同其他</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (navigator.<span class=\"property\">userAgent</span>.<span class=\"title function_\">toLowerCase</span>().<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;firefox&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;mousewheel&#x27;</span>, handleMouseWheel);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMMouseScroll&#x27;</span>, handleMouseWheel);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这部分代码是写在 class 的 <code>init</code> 方法中，所以截流函数的上下文（context）传入的是 <code>this</code>，表示当前 class 实例。</p>\n<h2 id=\"7）其他\"><a href=\"#7）其他\" class=\"headerlink\" title=\"7）其他\"></a>7）其他</h2><h3 id=\"7-1-导航按钮\"><a href=\"#7-1-导航按钮\" class=\"headerlink\" title=\"7.1 导航按钮\"></a>7.1 导航按钮</h3><p>为了简化 html 结构，导航按钮通过 js 创建。这里的难点在于<strong>如何实现点击不同按钮实现对应页面的跳转并更新对应按钮的样式</strong>。</p>\n<p>解决的思路是：</p>\n<ul>\n<li>页面跳转：页面个数和导航按钮的个数一致，所以点击第 i 个按钮也就是跳转到第 i 个页面，而第 i 个页面对应的容器 <code>top</code> 值恰好是 <code>-(i * this.viewHeight)</code></li>\n<li>更改样式：更改样式即先删除所有按钮的选中样式，然后给当前点击的按钮添加选中样式。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建右侧点式导航</span></span><br><span class=\"line\"><span class=\"title function_\">createNav</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nav = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">  nav.<span class=\"property\">className</span> = <span class=\"string\">&#x27;nav&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">container</span>.<span class=\"title function_\">appendChild</span>(nav);</span><br><span class=\"line\">  <span class=\"comment\">// 有几页，显示几个点</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">pagesNum</span>; i++) &#123;</span><br><span class=\"line\">    nav.<span class=\"property\">innerHTML</span> += <span class=\"string\">&#x27;&lt;p class=&quot;nav-dot&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> navDots = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.nav-dot&#x27;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">navDots</span> = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(navDots);</span><br><span class=\"line\">  <span class=\"comment\">// 添加初始样式</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">navDots</span>[<span class=\"number\">0</span>].<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;active&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 添加点式导航点击事件</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">navDots</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">el, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    el.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 页面跳转</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span> = -(i * <span class=\"variable language_\">this</span>.<span class=\"property\">viewHeight</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">turnPage</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 更改样式</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">navDots</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span><br><span class=\"line\">        utils.<span class=\"title function_\">deleteClassName</span>(el, <span class=\"string\">&#x27;active&#x27;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      event.<span class=\"property\">target</span>.<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;active&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-自定义参数\"><a href=\"#7-2-自定义参数\" class=\"headerlink\" title=\"7.2 自定义参数\"></a>7.2 自定义参数</h3><p>得当的自定义参数可以增加插件的灵活性。</p>\n<p>参数通过构造函数传入，并通过 <code>Object.assign()</code> 进行参数合并：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认配置</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultOptions = &#123;</span><br><span class=\"line\">    <span class=\"attr\">isShowNav</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">delay</span>: <span class=\"number\">150</span>,</span><br><span class=\"line\">    <span class=\"attr\">definePages</span>: <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 合并自定义配置</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(defaultOptions, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-3-窗口尺寸改变时更新数据\"><a href=\"#7-3-窗口尺寸改变时更新数据\" class=\"headerlink\" title=\"7.3 窗口尺寸改变时更新数据\"></a>7.3 窗口尺寸改变时更新数据</h3><p>浏览器窗口尺寸改变的时候，需要重新获取可视区、页面元素高度，并重新确定容器当前的 <code>top</code> 值。</p>\n<p>同时，为了避免不必要的性能开支，这里使用了防抖动函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// window resize 时重新获取位置</span></span><br><span class=\"line\"><span class=\"title function_\">getNewPosition</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">viewHeight</span> = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">container</span>.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">viewHeight</span> + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> activeNavIndex;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">navDots</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.<span class=\"property\">classList</span>.<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;active&#x27;</span>)) &#123;</span><br><span class=\"line\">      activeNavIndex = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span> = -(activeNavIndex * <span class=\"variable language_\">this</span>.<span class=\"property\">viewHeight</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">turnPage</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">currentPosition</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">handleWindowResize</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置防抖动函数</span></span><br><span class=\"line\">  utils.<span class=\"title function_\">debounce</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">getNewPosition</span>, <span class=\"variable language_\">this</span>, event, <span class=\"variable language_\">this</span>.<span class=\"property\">DELAY</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 窗口尺寸变化时重置位置</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">handleWindowResize</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-4-兼容性\"><a href=\"#7-4-兼容性\" class=\"headerlink\" title=\"7.4 兼容性\"></a>7.4 兼容性</h3><p>这里的兼容性主要指两个方面：一是不同浏览器对同一行为定义了不同 API，比如上文提到的获取鼠标滚动信息的 API Firefox 和其他浏览器不一样；第二点就是 ES6 新语法、新 API 的兼容处理。</p>\n<p>对于 class、箭头函数这类新语法的转换，通过 babel 就可完成，鉴于本插件代码量很小，都处于可控的状态，并没有引入 babel 提供的 polyfill 方案，因为新 API 只有 <code>Object.assign()</code> 需要做兼容处理，单独写个 polyfill 就好，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// polyfill Object.assign</span></span><br><span class=\"line\"><span class=\"title function_\">polyfill</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span>.<span class=\"property\">assign</span> != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Object</span>, <span class=\"string\">&#x27;assign&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">value</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">assign</span>(<span class=\"params\">target, varArgs</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Cannot convert undefined or null to object&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> to = <span class=\"title class_\">Object</span>(target);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">1</span>; index &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> nextSource = <span class=\"variable language_\">arguments</span>[index];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (nextSource != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> nextKey <span class=\"keyword\">in</span> nextSource) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(nextSource, nextKey)) &#123;</span><br><span class=\"line\">                to[nextKey] = nextSource[nextKey];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> to;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>引用自：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\">MDN-Object.assign()</a></p>\n<blockquote>\n<p>因为本插件只兼容到 IE10，所以不打算对事件做兼容处理，毕竟 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Browser_compatibility\">IE9 都支持</a> <code>addEventListener</code> 了。</p>\n</blockquote>\n<h3 id=\"7-5-通过惰性载入进一步优化性能\"><a href=\"#7-5-通过惰性载入进一步优化性能\" class=\"headerlink\" title=\"7.5 通过惰性载入进一步优化性能\"></a>7.5 通过惰性载入进一步优化性能</h3><p>在 5.1 中写的 <code>getWheelDelta</code> 函数每次执行都需要检测是否支持 <code>event.wheelDelta</code>，实际上，浏览器只需在第一次加载时检测，如果支持，接下来都会支持，再做检测是没必要的。</p>\n<p>并且这个检测在页面的生命周期中会执行很多次，这种情况下可以通过 <em>惰性载入</em> 技巧进行优化，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getWheelDelta</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">wheelDelta</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次调用之后惰性载入，无需再做检测</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getWheelDelta</span> = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> event.<span class=\"property\">wheelDelta</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次调用使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> event.<span class=\"property\">wheelDelta</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 兼容火狐</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getWheelDelta</span> = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> -event.<span class=\"property\">detail</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -event.<span class=\"property\">detail</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/tangdou5682/article/details/52351404\">纯 JS 全屏滚动 / 整屏翻页</a><br><a href=\"https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf\">Throttling and Debouncing in JavaScript</a><br><a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\">Debouncing and Throttling Explained Through Examples</a><br><a href=\"https://davidwalsh.name/javascript-debounce-function\">JavaScript Debounce Function</a><br><a href=\"https://stackoverflow.com/questions/27078285/simple-throttle-in-js\">Simple throttle in js</a><br><a href=\"https://jsfiddle.net/jonathansampson/m7G64/\">Simple throttle in js - jsfiddle</a><br><a href=\"https://nicolas-hoizey.com/2015/02/viewport-height-is-taller-than-the-visible-part-of-the-document-in-some-mobile-browsers.html\">Viewport height is taller than the visible part of the document in some mobile browsers</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\">MDN-Object.assign()</a><br><a href=\"https://www.zhihu.com/question/49382420\">Babel 编译出来还是 ES 6？难道只能上 polyfill？- Henry 的回答</a></p>\n","categories":["JavaScript"],"tags":["JavaScript","ES6"]},{"title":"开发 React Native APP（二）","url":"https://xiaogliu.github.io/2018/02/27/develop-react-native-app-2/","content":"<p>经过第一部分<a href=\"https://xiaogliu.github.io/2018/02/27/develop-react-native-app-1/\">开发 React Native APP（一）</a>介绍，App 框架基本构建完成，这部分主要讨论 UI/交互、App 发布前的准备工作及如何发布，具体内容包括：</p>\n<ul>\n<li>在使用 react navigation 的前提下，<strong>iOS 实现单个页面从下往上（modal）的进入动画</strong></li>\n<li>尺寸自适应</li>\n<li>设置启动页，更换桌面图标、app 展示名称、appID</li>\n<li>打包发布</li>\n</ul>\n<p>完整 demo 在这 <a href=\"https://github.com/xiaogliu/react-native-complete-demo\">react-native-complete-demo</a></p>\n<h1 id=\"一-扩展-react-navigation\"><a href=\"#一-扩展-react-navigation\" class=\"headerlink\" title=\"一 扩展 react navigation\"></a>一 扩展 react navigation</h1><p>这里的扩展指的是实现<strong>可单独配置页面的进入方式</strong>（<a href=\"https://reactnavigation.org/docs/stack-navigator.html\">react navigation</a> 默认只支持全局配置，要么 <code>card</code>，要么 <code>modal</code>，配置后所有页面进入动画相同）。</p>\n<p>实现上述效果需要做两方面修改：<code>StackNavigator</code> API（在 <code>route.js</code> 中使用）和进入某个页面是的调用方式。</p>\n<h2 id=\"1-1-修改-StackNavigator-API\"><a href=\"#1-1-修改-StackNavigator-API\" class=\"headerlink\" title=\"1.1 修改 StackNavigator API\"></a>1.1 修改 <code>StackNavigator</code> API</h2><p>修改后如果使页面默认状态为 card，只需要输入对应页面即可，比如 <code>..navigate(&#39;ScreenSome1&#39;)</code>；如果要使某个页面进入方式为 modal 只需要在路径上加上 Modal 比如：<code>..navigate(&#39;ScreenSome2Modal&#39;)</code>。</p>\n<p>需要注意的是<strong>如果页面进入方式为 modal，需要自定义 header，因为默认 header 样式失效，都叠在一块了</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * route.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义 StackNavigator，可以选择 screen 进入方式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">StackModalNavigator</span> = (<span class=\"params\">routeConfigs, navigatorConfig</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">CardStackNavigator</span> = <span class=\"title class_\">StackNavigator</span>(routeConfigs, navigatorConfig);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> modalRouteConfig = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> routeNames = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(routeConfigs);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; routeNames.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    modalRouteConfig[<span class=\"string\">`<span class=\"subst\">$&#123;routeNames[i]&#125;</span>Modal`</span>] = routeConfigs[routeNames[i]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">ModalStackNavigator</span> = <span class=\"title class_\">StackNavigator</span>(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"title class_\">CardStackNavigator</span>: &#123; <span class=\"attr\">screen</span>: <span class=\"title class_\">CardStackNavigator</span> &#125;,</span><br><span class=\"line\">      ...modalRouteConfig</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果页面进入方式为 modal，需要自定义 header（默认 header 样式失效，都叠在一块了）</span></span><br><span class=\"line\">      <span class=\"attr\">mode</span>: <span class=\"string\">&quot;modal&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">headerMode</span>: <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">ModalStackNavigator</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置路由</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AppNavigator</span> = <span class=\"title class_\">StackModalNavigator</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-页面中调用\"><a href=\"#1-2-页面中调用\" class=\"headerlink\" title=\"1.2 页面中调用\"></a>1.2 页面中调用</h2><p>首先我们新建页面 <code>ScreenSome2</code>，接下来就让它以 modal 的形式进入（从屏幕下面进入），作为对比 <code>ScreenSome1</code> 以 <code>card</code> 的形式进入（默认进入方式，从屏幕右侧进入）。</p>\n<p>因为以 modal 形式进入的页面需要自定义 header，一般只是一个关闭按钮，以 <code>ScreenSome2</code> 为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenSome2/view.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义 header（关闭按钮）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">&lt;<span class=\"title class_\">View</span>&gt;</span><br><span class=\"line\">  &#123;<span class=\"comment\">/* TouchableHighlight 为关闭按钮的热区 */</span>&#125;</span><br><span class=\"line\">  &lt;<span class=\"title class_\">TouchableHighlight</span></span><br><span class=\"line\">    onPress=&#123;<span class=\"function\">() =&gt;</span> self.<span class=\"property\">navigation</span>.<span class=\"title function_\">goBack</span>()&#125;</span><br><span class=\"line\">    underlayColor=<span class=\"string\">&quot;transparent&quot;</span></span><br><span class=\"line\">    style=&#123;&#123;</span><br><span class=\"line\">      <span class=\"attr\">display</span>: <span class=\"string\">&quot;flex&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">justifyContent</span>: <span class=\"string\">&quot;center&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">marginTop</span>: <span class=\"title function_\">pxToDp</span>(<span class=\"number\">30</span>),</span><br><span class=\"line\">      <span class=\"attr\">width</span>: <span class=\"title function_\">pxToDp</span>(<span class=\"number\">150</span>),</span><br><span class=\"line\">      <span class=\"attr\">height</span>: <span class=\"title function_\">pxToDp</span>(<span class=\"number\">90</span>),</span><br><span class=\"line\">      <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&quot;yellow&quot;</span></span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">marginLeft:</span> <span class=\"attr\">pxToDp</span>(<span class=\"attr\">24</span>) &#125;&#125;&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\">  &lt;/<span class=\"title class_\">TouchableHighlight</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">fontSize:</span> <span class=\"attr\">pxToDp</span>(<span class=\"attr\">36</span>) &#125;&#125;&gt;</span>some2，以 modal 的形式进入<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">View</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>然后就是更改进入 <code>ScreenSome2</code> 代码，这里是 <code>ScreenHome</code> 页面中的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenHome/view.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义 header（关闭按钮）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ScreenSome2 从屏幕右侧进入 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">Button</span></span><br><span class=\"line\">  title=<span class=\"string\">&quot;goSome1&quot;</span></span><br><span class=\"line\">  onPress=&#123;<span class=\"function\">() =&gt;</span> self.<span class=\"property\">navigation</span>.<span class=\"title function_\">navigate</span>(<span class=\"string\">&quot;ScreenSome1&quot;</span>)&#125;</span><br><span class=\"line\">/&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ScreenSome2 从屏幕下面进入 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">Button</span></span><br><span class=\"line\">  title=<span class=\"string\">&quot;goSome2Modal&quot;</span></span><br><span class=\"line\">  onPress=&#123;<span class=\"function\">() =&gt;</span> self.<span class=\"property\">navigation</span>.<span class=\"title function_\">navigate</span>(<span class=\"string\">&quot;ScreenSome2Modal&quot;</span>)&#125;</span><br><span class=\"line\">/&gt;;</span><br></pre></td></tr></table></figure>\n<p>最终效果图：<br><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/nav_diff_entry.gif\" alt=\"自定义页面进入动画\"></p>\n<h1 id=\"二-自适应\"><a href=\"#二-自适应\" class=\"headerlink\" title=\"二 自适应\"></a>二 自适应</h1><p>自适应主要包括两方面：尺寸根据屏幕大小自适应，包括 <code>fontSize</code>，<code>width</code> 等；图片分辨率根据屏幕分辨率自适应，也就常说的二倍图、三倍图等。</p>\n<h2 id=\"2-1-尺寸自适应\"><a href=\"#2-1-尺寸自适应\" class=\"headerlink\" title=\"2.1 尺寸自适应\"></a>2.1 尺寸自适应</h2><p>尺寸自适应的原理是通过获取手机屏幕的宽度，尺寸做相应比例的调整，为此封装了一个工具函数，放在了 <code>config/pxToDp.js</code> 中。</p>\n<p>调整后的目录如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/px_to_dp.png\" alt=\"尺寸转换函数目录\"></p>\n<ul>\n<li><code>config/pxToDp.js</code> 尺寸转换的工具函数</li>\n</ul>\n<blockquote>\n<p>尺寸转换的工具函数在第一部分<a href=\"https://xiaogliu.github.io/2018/02/27/develop-react-native-app-1/\">开发 React Native APP（一）</a>已经添加</p>\n</blockquote>\n<p>1）编写自适应尺寸工具函数</p>\n<p>因为所有涉及尺寸的数据都要转换（<code>fontSize</code>，<code>width</code>等），所以对转换后的数据要做处理，保证：1.大于等于 1 的数字向上取整；2.小于 1 的数字，如果是 ios 平台统一设为 0.5；如果是安卓平台统一设为 1（因为安卓平台分辨率千差万别万别，低分辨率的屏幕显示 0.5 的尺寸会有锯齿状）。工具函数完整代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * pxToDp.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 自适应布局</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> uiElementPx: ui给的原始尺寸</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Dimensions</span>, <span class=\"title class_\">Platform</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app 只有竖屏模式，所以可以只获取一次 width</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> deviceWidthDp = <span class=\"title class_\">Dimensions</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;window&quot;</span>).<span class=\"property\">width</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UI 默认给图是 750</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uiWidthPx = <span class=\"number\">750</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pxToDp</span>(<span class=\"params\">uiElementPx</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> transferNumb = uiElementPx * deviceWidthDp / uiWidthPx;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (transferNumb &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 避免出现循环小数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(transferNumb);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title class_\">Platform</span>.<span class=\"property\">OS</span> === <span class=\"string\">&quot;android&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是安卓，最小为1，避免边框出现锯齿</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0.5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> pxToDp;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实际上，通过 <code>Dimensions.get(&#39;window&#39;).width</code> 获取的屏幕宽度和自己想象的可能有出入，比如，iphone7 屏幕 4.7’’，获取到的宽度是 <code>375</code>，华为 P9 是 5.2’，但获取到的宽度却是是 <code>360</code>！有点坑，这个工具函数还有待优化。</p>\n</blockquote>\n<p>2）使用自适应尺寸工具函数</p>\n<p>使用方法很简单，在需要转换单位的组件中将转换尺寸的工具函数引入，将需要转换的尺寸传入工具函数即可，以 <code>ScreenHome</code> 为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenHome/view.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入尺寸转换工具函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pxToDp <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../config/pxToDp&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将需要转换的单位传入 pxToDp 中</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">fontSize:</span> <span class=\"attr\">pxToDp</span>(<span class=\"attr\">36</span>) &#125;&#125;&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-图片分辨率自适应\"><a href=\"#2-3-图片分辨率自适应\" class=\"headerlink\" title=\"2.3 图片分辨率自适应\"></a>2.3 图片分辨率自适应</h2><p>手机分辨率越来越多，尤其安卓，React Native 可以根据不同分辨率加载不同尺寸的图片，只需在图片命名上面加以区分。</p>\n<ul>\n<li>提供不同分辨率的图片</li>\n</ul>\n<p>比如我们有张图片叫 <code>test.png</code>，尺寸为 <code>40 x 40</code>（单位像素），为了做到自适应屏幕分辨率，我们还需要提供它的 2 倍图，3 倍图，这样，一张图片就对应 3 个尺寸，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一张图片提供 3个尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">test.png <span class=\"comment\"># 尺寸 40 x 40</span></span><br><span class=\"line\"><span class=\"built_in\">test</span>@2x.png <span class=\"comment\"># 尺寸 80 x 80</span></span><br><span class=\"line\"><span class=\"built_in\">test</span>@3x.png <span class=\"comment\"># 尺寸 120 x 120</span></span><br></pre></td></tr></table></figure>\n<p><code>name@nx</code>是 n (n &gt; 1) 倍图命名规范，React Native 也是根据命名判断图片尺寸的。</p>\n<ul>\n<li>使用</li>\n</ul>\n<p>在引用图片的时候直接使用 <strong>不加倍率后缀的图片名</strong>，比如，直接使用 <code>test.png</code>，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenTab3/view.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"title class_\">Image</span></span><br><span class=\"line\">  source=&#123;<span class=\"built_in\">require</span>(<span class=\"string\">&quot;../../assets/images/test.png&quot;</span>)&#125;</span><br><span class=\"line\">  style=&#123;&#123; <span class=\"attr\">height</span>: <span class=\"title function_\">pxToDp</span>(<span class=\"number\">80</span>), <span class=\"attr\">width</span>: <span class=\"title function_\">pxToDp</span>(<span class=\"number\">80</span>) &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>最终效果图如下：</p>\n<ul>\n<li>iphone6： 2 倍图（图片放大后可以看到里面有 <code>2X</code> 字样）</li>\n<li>iphone7Plus：3 倍图（图片放大后可以看到里面有 <code>3X</code> 字样）</li>\n<li>Nexus4：2 倍图</li>\n<li>Pixel2：3 倍图</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/autod_pic.png\" alt=\"自定加载不同分辨率图片\"></p>\n<h1 id=\"三-修改桌面图标、App-展示名称，设置启动页\"><a href=\"#三-修改桌面图标、App-展示名称，设置启动页\" class=\"headerlink\" title=\"三 修改桌面图标、App 展示名称，设置启动页\"></a>三 修改桌面图标、App 展示名称，设置启动页</h1><p>修改桌面图标、App 展示名称相对简单，设置启动页稍微麻烦。另外，iOS 修改桌面图标、App 展示名称，设置启动页都需要在 Xcode 中进行。</p>\n<h2 id=\"3-1-设置桌面图标\"><a href=\"#3-1-设置桌面图标\" class=\"headerlink\" title=\"3.1 设置桌面图标\"></a>3.1 设置桌面图标</h2><p>因为 App 图标对应多个尺寸，手动改写太麻烦，这个网站可以自动生成 <a href=\"https://makeappicon.com/\">MakeAppIcon</a>。(Thanks Alejandra’s recommendation that <a href=\"https://www.websiteplanet.com/webtools/favicon-generator/\">Website Planet</a> also can generate App icon and supports file less 5M.)</p>\n<blockquote>\n<p>并不是所有尺寸的图片都需要，见下文。</p>\n</blockquote>\n<ul>\n<li>iOS</li>\n</ul>\n<p>准确点讲不能叫设置桌面图标，而应该是 App 图标，因为我们需要设置的不止有桌面展示的图标，还有设置时 app 图标、消息推送时 app 图标，此外如果要发布到 App store，还需要设置 Apple Store 展示用的 App 图标。</p>\n<p>1）图片准备</p>\n<p>以上不同地方用到的 app 图标尺寸各不相同，具体如下（<strong>只针对 iphone，不包括 ipad，iwatch</strong>）：</p>\n<table>\n<thead>\n<tr>\n<th>尺寸</th>\n<th>名称</th>\n<th>用途</th>\n<th>是否必须</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>120x120</td>\n<td><a href=\"mailto:Icon-60@2x.png\">Icon-60@2x.png</a></td>\n<td>桌面图标 (2x)</td>\n<td>必须</td>\n</tr>\n<tr>\n<td>180x180</td>\n<td><a href=\"mailto:Icon-60@3x.png\">Icon-60@3x.png</a></td>\n<td>桌面图标 (3x)</td>\n<td>可选，但推荐设置</td>\n</tr>\n<tr>\n<td>80x80</td>\n<td><a href=\"mailto:Icon-40@2x.png\">Icon-40@2x.png</a></td>\n<td>Spotlight 图标 (2x)</td>\n<td>可选，但推荐设置</td>\n</tr>\n<tr>\n<td>120x120</td>\n<td><a href=\"mailto:Icon-40@3x.png\">Icon-40@3x.png</a></td>\n<td>Spotlight 图标 (3x)</td>\n<td>可选，但推荐设置</td>\n</tr>\n<tr>\n<td>58x58</td>\n<td><a href=\"mailto:Icon-29@2x.png\">Icon-29@2x.png</a></td>\n<td>设置图标 (2x)</td>\n<td>可选，但推荐设置</td>\n</tr>\n<tr>\n<td>87x87</td>\n<td><a href=\"mailto:Icon-29@3x.png\">Icon-29@3x.png</a></td>\n<td>设置图标 (3x)</td>\n<td>可选，但推荐设置</td>\n</tr>\n<tr>\n<td>40x40</td>\n<td><a href=\"mailto:Icon-20@2x.png\">Icon-20@2x.png</a></td>\n<td>通知图标 (3x)</td>\n<td>可选，但推荐设置</td>\n</tr>\n<tr>\n<td>80x80</td>\n<td><a href=\"mailto:Icon-20@3x.png\">Icon-20@3x.png</a></td>\n<td>通知图标 (3x)</td>\n<td>可选，但推荐设置</td>\n</tr>\n<tr>\n<td>1024x1024</td>\n<td><a href=\"mailto:iTunesArtwork@2x.png\">iTunesArtwork@2x.png</a></td>\n<td>App Store (2x)</td>\n<td>必须</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>名称不是说一定要和上面相同，但 <code>Icon</code> 、尺寸（如 <code>60</code>）还有倍率（@nx）要有，类型为 <code>png</code>。</p>\n</blockquote>\n<p>2）将图片拖放至 Xcode 指定位置，具体是：<code>Project Navigator -&gt; Images.xcassets -&gt; AppIcon</code>，如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/ios_app_icon.png\" alt=\"iOS AppIcon\"></p>\n<blockquote>\n<p>拖放完成后，通过文件管理器查看项目目录，也会发现相应图片。</p>\n</blockquote>\n<ul>\n<li>安卓</li>\n</ul>\n<p>安卓的 app 图标相对简单，只需要设置桌面图标。设置位置在 <code>yourApp/android/app/src/main/res/</code> 目录下，这个目录默认有四个文件夹，里面各对应放置了一种尺寸的桌面图标图片，图片尺寸不同，但名称相同，统一为 <code>ic_launcher.png</code>，具体如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>文件夹名称</th>\n<th>含义</th>\n<th>文件夹内部图片尺寸</th>\n<th>文件夹内部图片名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mipmap-ldpi</td>\n<td>Low Density Screen</td>\n<td>36x36</td>\n<td>ic_launcher.png</td>\n</tr>\n<tr>\n<td>mipmap-mdpi</td>\n<td>Medium Density Screen</td>\n<td>48x48</td>\n<td>ic_launcher.png</td>\n</tr>\n<tr>\n<td>mipmap-hdpi</td>\n<td>High Density Screen</td>\n<td>72x72</td>\n<td>ic_launcher.png</td>\n</tr>\n<tr>\n<td>mipmap-xhdpi</td>\n<td>Extra-high density screen</td>\n<td>96x96</td>\n<td>ic_launcher.png</td>\n</tr>\n<tr>\n<td>mipmap-xxhdpi</td>\n<td>xx-high density screen</td>\n<td>144x144</td>\n<td>ic_launcher.png</td>\n</tr>\n<tr>\n<td>mipmap-xxxhdpi</td>\n<td>xxx-high density screen</td>\n<td>192x192</td>\n<td>ic_launcher.png</td>\n</tr>\n</tbody>\n</table>\n<p>如果你使用了 MakeAppIcon 的服务，直接将对应文件夹全部放入 <code>res/</code> 目录下就好，不然就手动替换图标。</p>\n<blockquote>\n<p>可以根据实际需求删除不必要的文件，比如，120 DPI 的屏幕很少了，那么这个文件夹就可以不要</p>\n</blockquote>\n<h2 id=\"3-2-修改-App-展示名称\"><a href=\"#3-2-修改-App-展示名称\" class=\"headerlink\" title=\"3.2 修改 App 展示名称\"></a>3.2 修改 App 展示名称</h2><ul>\n<li>iOS</li>\n</ul>\n<p>调出工程设置菜单（双击工程名称或者单击然后然后右侧选择 Targets –&gt; yourProject），进入 <code>info</code> 选项，在 <code>Custom iOS Target Properties</code> 中添加 <code>Bundle display name</code>，其 <code>value</code> 便是 App 的名称。具体设置如下图：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/ios_app_name.png\" alt=\"ios修改app名称\"></p>\n<ul>\n<li>安卓</li>\n</ul>\n<p>安卓修改 App 展示名称在这个文件中 <code>yourApp/android/app/src/main/res/values/strings.xml</code>。</p>\n<p><code>strings.xml</code> 这个文件很简单，全部内容如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;app_name&quot;</span>&gt;</span>你的app名称<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>替换 <code>你的app名称</code> 为你想要的名字就好。</p>\n<p>NOTE：</p>\n<p>安卓的话，还要修改默认包名（<code>applicationId</code>），如果不修改，如果系统监测到当前应用的 <code>applicationId</code> 和已安装的某个应用相同而签名不同，会报错：“签名不一致 该应用可能已被恶意篡改”。</p>\n<p>在这个文件中修改包名： <code>yourApp/android/app/build.gradle</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">defaultConfig &#123;</span><br><span class=\"line\">    applicationId <span class=\"string\">&quot;com.yourAppId&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-设置启动页\"><a href=\"#3-3-设置启动页\" class=\"headerlink\" title=\"3.3 设置启动页\"></a>3.3 设置启动页</h2><p>这里使用了第三方插件<a href=\"https://github.com/crazycodeboy/react-native-splash-screen/\">react-native-splash-screen</a>，官网教程已经很详细，这里做简要介绍。</p>\n<ul>\n<li>项目中安装依赖</li>\n</ul>\n<p>1）下载依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add react-native-splash-screen</span><br></pre></td></tr></table></figure>\n<p>2）添加到项目中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">react-native link react-native-splash-screen</span><br></pre></td></tr></table></figure>\n<p>3）在 React Native 配置</p>\n<p>这里指的是设置启动页什么时候消失，下面的代码是首页加载完 5s 后启动页消失。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenHome/index.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置启动页消失时间</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">SplashScreen</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-splash-screen&quot;</span>; <span class=\"comment\">// 引入 react-native-splash-screen</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScreenHome</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...other code</span></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 隐藏启动页，如果不设置消失时间，在组件加载完启动页自动隐藏</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">SplashScreen</span>.<span class=\"title function_\">hide</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...other code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>iOS 设置</li>\n</ul>\n<p>1）更新 <code>AppDelegate.m</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;React/RCTBundleURLProvider.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;React/RCTRootView.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;SplashScreen.h&quot;</span>  <span class=\"comment\">// 导入启动页插件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation AppDelegate</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...其他代码</span></span><br><span class=\"line\">    [self.window makeKeyAndVisible];</span><br><span class=\"line\">    [SplashScreen show];  <span class=\"comment\">// 显示启动页</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>2）准备启动页图片</p>\n<p><strong>文件必须是 png 格式的图片</strong>，命名需对应尺寸，可参考下面的命名：</p>\n<blockquote>\n<p>如需自动生成可使用这个网页：<a href=\"https://www.appicon.build/\">appicon</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>尺寸</th>\n<th>名称</th>\n<th>用途</th>\n<th>是否必须</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>640 x 960</td>\n<td><a href=\"mailto:Default@2x.png\">Default@2x.png</a></td>\n<td>iPhone 4</td>\n<td>非必须，推荐设置</td>\n</tr>\n<tr>\n<td>640 x 1136</td>\n<td><a href=\"mailto:Default-568h@2x.png\">Default-568h@2x.png</a></td>\n<td>iPhone 5</td>\n<td>非必须，推荐设置</td>\n</tr>\n<tr>\n<td>750 x 1334</td>\n<td><a href=\"mailto:Default-667h@2x.png\">Default-667h@2x.png</a></td>\n<td>iPhone 6, 竖屏</td>\n<td>必须（必须有至少一个启动页图片）</td>\n</tr>\n<tr>\n<td>1242 x 2208</td>\n<td><a href=\"mailto:Default-736h@3x.png\">Default-736h@3x.png</a></td>\n<td>iPhone 6 Plus, 竖屏</td>\n<td>非必须，推荐设置</td>\n</tr>\n<tr>\n<td>2208 x 1242</td>\n<td><a href=\"mailto:Default-Landscape-736h@3x.png\">Default-Landscape-736h@3x.png</a></td>\n<td>iPhone 6 Plus, 横屏</td>\n<td>非必须，推荐设置</td>\n</tr>\n<tr>\n<td>1125 × 2436</td>\n<td><a href=\"mailto:Default-812h@3x.png\">Default-812h@3x.png</a></td>\n<td>iPhone X, 竖屏</td>\n<td>非必须，推荐设置</td>\n</tr>\n<tr>\n<td>2436 x 1125</td>\n<td><a href=\"mailto:Default-Landscape-812h@3x.png\">Default-Landscape-812h@3x.png</a></td>\n<td>iPhone X, 横屏</td>\n<td>非必须，推荐设置</td>\n</tr>\n</tbody>\n</table>\n<p>NOTE:</p>\n<ul>\n<li>很多教程给出的启动页尺寸比上面的要多，有可能是 Xcode 版本不同导致，Xcode 9.2，iOS 7+ 只需要上面七个尺寸；</li>\n<li>名称并非一定要按照上面的要求，直接使用 <code>Default尺寸x尺寸.png</code> 也可以；</li>\n</ul>\n<p>3）在 Xcode 中设置启动页</p>\n<p>首先新建 <code>LaunchImage</code> 文件，操作步骤如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/launch_image1.png\" alt=\"设置启动页\"></p>\n<p>然后在 <code>general</code> 设置中将启动页指向刚才新建的 <code>LaunchImage</code> 文件，<strong>注意 Launch Screen File 必须为空，不然就指向 LaunchScreen.xib 中默认的启动页了</strong>:</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/launch_image2.png\" alt=\"设置启动页\"></p>\n<ul>\n<li>安卓配置</li>\n</ul>\n<p>1）更新 <code>MainActivity.java</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle; <span class=\"comment\">// here</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.facebook.react.ReactActivity;</span><br><span class=\"line\"><span class=\"comment\">// react-native-splash-screen &gt;= 0.3.1</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.devio.rn.splashscreen.SplashScreen; <span class=\"comment\">// here</span></span><br><span class=\"line\"><span class=\"comment\">// react-native-splash-screen &lt; 0.3.1</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.cboy.rn.splashscreen.SplashScreen; <span class=\"comment\">// here</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ReactActivity</span> &#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        SplashScreen.show(<span class=\"built_in\">this</span>);  <span class=\"comment\">// here</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...other code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2）新建 <code>launch_screen.xml</code></p>\n<p>在 <code>app/src/main/res/layout</code> 中创建 <code>launch_screen.xml</code>（如果没有 <code>layout</code> 目录，新建），内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/launch_screen&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3）准备不同尺寸的启动页图片并放到项目中</p>\n<p>安卓是通过文件夹路径寻找启动页面的，所以，多张尺寸的启动页名称相同，都为 <code>launch_screen.png</code>，但要放在不同文件夹中，文件夹放置目录为 <code>yourApp/android/app/src/main/res/</code>，名称及对应放置的图片尺寸如下：</p>\n<table>\n<thead>\n<tr>\n<th>文件夹名称</th>\n<th>含义</th>\n<th>文件夹内部图片尺寸</th>\n<th>文件夹内部图片名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>drawable-ldpi</td>\n<td>Low Density Screen</td>\n<td>240x320</td>\n<td>launch_screen.png</td>\n</tr>\n<tr>\n<td>drawable-mdpi</td>\n<td>Medium Density Screen</td>\n<td>320x480</td>\n<td>launch_screen.png</td>\n</tr>\n<tr>\n<td>drawable-hdpi</td>\n<td>High Density Screen</td>\n<td>480x800</td>\n<td>launch_screen.png</td>\n</tr>\n<tr>\n<td>drawable-xhdpi</td>\n<td>Extra-high density screen</td>\n<td>720x1280</td>\n<td>launch_screen.png</td>\n</tr>\n<tr>\n<td>drawable-xxhdpi</td>\n<td>xx-high density screen</td>\n<td>960x1600</td>\n<td>launch_screen.png</td>\n</tr>\n<tr>\n<td>drawable-xxxhdpi</td>\n<td>xxx-high density screen</td>\n<td>1280x1920</td>\n<td>launch_screen.png</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>建议直接从 <code>480x800</code> 起步放置 4 张图片就好。</p>\n</blockquote>\n<p>4）优化启动页出现前的短暂白屏</p>\n<p>到这里，启动页功能已经 ok，但如果仔细看，可以看到启动页出现前会有短暂白屏，此时可通过更改<code>android/app/src/main/res/values/styles.xml</code> 解决：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Base application theme. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;AppTheme&quot;</span> <span class=\"attr\">parent</span>=<span class=\"string\">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"comment\">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"comment\">&lt;!--设置透明背景--&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这种方案实际没有根本解决问题：会发现这样设置以后点击图片不能立即弹出应用，而有短暂的等待时间，待填坑。</p>\n</blockquote>\n<p>5）<strong>解决安卓 6.0，7.0 安装配置完成后出现闪退</strong>，参考下面设置：</p>\n<p>在 <code>android/app/src/main/res/values</code> 下面新建 <code>colors.xml</code> 文件，内容如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- this is referenced by react-native-splash-screen and will throw an error if not defined.  its value does nothing, just here to avoid a runtime error. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;primary_dark&quot;</span>&gt;</span>#000000<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为 react-native-splash-screen 需要一个名为 <code>primary_dark</code> 的颜色值作为状态栏的颜色。</p>\n<h2 id=\"3-4-最终效果图\"><a href=\"#3-4-最终效果图\" class=\"headerlink\" title=\"3.4 最终效果图\"></a>3.4 最终效果图</h2><p>设置完桌面图标、修改 APP 展示名称及设置启动页之后的效果图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/launch_image.gif\" alt=\"图标及启动页\"></p>\n<h1 id=\"四-打包发布\"><a href=\"#四-打包发布\" class=\"headerlink\" title=\"四 打包发布\"></a>四 打包发布</h1><h2 id=\"4-1-安卓打包发布\"><a href=\"#4-1-安卓打包发布\" class=\"headerlink\" title=\"4.1 安卓打包发布\"></a>4.1 安卓打包发布</h2><ul>\n<li>生成签名</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore my-release-key.keystore -<span class=\"built_in\">alias</span> my-key-alias -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></table></figure>\n<p>如果使用 mac，执行该命令的目录随意。但一定要保管好自己的 <code>my-release-key.keystore</code> 文件，如果忘记签名，不能在原有 App 上面升级，只能重新打包发布。同时，不要将 <code>keystore</code> 文件放入版本控制中。</p>\n<ul>\n<li>设置 gradle 变量</li>\n</ul>\n<p>1）首先将签名文件 <code>my-release-key.keystore</code> 放在目录 <code>yourApp/android/app/</code> 下</p>\n<p>2）修改文件 <code>yourApp/android/gradle.properties</code> 添加下面代码 (替换 <code>*****</code> 为正确的 keystore 密码、别名、和 key 密码)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class=\"line\">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class=\"line\">MYAPP_RELEASE_STORE_PASSWORD=*****</span><br><span class=\"line\">MYAPP_RELEASE_KEY_PASSWORD=*****</span><br></pre></td></tr></table></figure>\n<p>3）添加签名信息到 app 的 gradle 配置中</p>\n<p>编辑文件 <code>yourApp/android/app/build.gradle</code> 加入签名信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    defaultConfig &#123; ... &#125;</span><br><span class=\"line\">    signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (project.hasProperty(<span class=\"string\">&#x27;MYAPP_RELEASE_STORE_FILE&#x27;</span>)) &#123;</span><br><span class=\"line\">                storeFile <span class=\"title function_\">file</span><span class=\"params\">(MYAPP_RELEASE_STORE_FILE)</span></span><br><span class=\"line\">                storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class=\"line\">                keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class=\"line\">                keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            signingConfig signingConfigs.release</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打包</li>\n</ul>\n<p>在终端输入下面命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> android &amp;&amp; ./gradlew assembleRelease</span><br></pre></td></tr></table></figure>\n<p>等待构建完成，便可以在 <code>yourApp/android/app/build/outputs/apk/release/app-release.apk</code> 中找到编译后的发布版本。</p>\n<p>NOTE：如果遇到这个错误：<code>Execution failed for task &#39;:app:processReleaseResources&#39;</code>，做下述修改：</p>\n<p>在 <code>yourApp/android/gradle.properties</code> 文件最后添加下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">classpath <span class=\"string\">&#x27;com.android.tools.build:gradle:3.0.0&#x27;</span></span><br><span class=\"line\">distributionUrl=<span class=\"attr\">https</span>:<span class=\"comment\">//services.gradle.org/distributions/gradle-4.1-all.zip</span></span><br><span class=\"line\">android.<span class=\"property\">enableAapt2</span>=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>如果还有其他问题，可参考下这篇文章：<a href=\"https://github.com/xiaogliu/step_by_step/blob/master/other/react/react_native/36.%E5%AE%89%E5%8D%93%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E9%82%A3%E4%BA%9B%E5%9D%91.md\">安卓打包发布那些坑</a></p>\n<h2 id=\"4-2-iOS-打包发布\"><a href=\"#4-2-iOS-打包发布\" class=\"headerlink\" title=\"4.2 iOS 打包发布\"></a>4.2 iOS 打包发布</h2><p>iOS 打包发布有些麻烦，对于大多数非 iOS 开发者的限制不是 React Native 本身，而是苹果本身的机制，比如，必须要有苹果开发者账号。iOS 打包发布打算另写文章。如果要了解发布流程，可以参考这两篇文章：<a href=\"http://www.cocoachina.com/appstore/20170627/19622.html\">iOS 发布 App Store 详细图文教程</a>，<a href=\"https://www.jianshu.com/p/6d1ee919ded3\">React Native iOS 详细打包步骤</a></p>\n<blockquote>\n<p>注意一点：打包时 <code>--entry-file</code> 安卓、iOS 是同一个入口文件 <code>index.js</code>，不在区分安卓/iOS</p>\n</blockquote>\n<h1 id=\"五-小结\"><a href=\"#五-小结\" class=\"headerlink\" title=\"五 小结\"></a>五 小结</h1><p>到目前位置，从改造官方 demo 开始，一个比较完整的 React Native App 完成了，在此基础上可以不断扩展完善。</p>\n<p>当然，从生产角度来说，这个 demo 的完成度不高，比如，很多样式还是最原始的状态、比如 WebView（App 中嵌入 H5）、下拉刷新等也没有涉及。其中 WebView、下拉刷新等常用功能会逐步集成到这个 demo 中，但样式并不打算做过多优化，因为从使用角度来讲，样式的完成度越高意味着可定制性越差，并且，那样也会导致代码的可读性变差。希望这个 demo 可以成为完整、普适但不臃肿的脚手架。</p>\n<p>不过，同一套代码，安卓和 iOS 上展示的样式会有不同，针对这个，会写文章单独说明。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://github.com/react-navigation/react-navigation/issues/707#issuecomment-299859578\">Choose transition mode for each screen in StackNavigator</a><br><a href=\"http://www.devio.org/2017/10/06/How-to-develop-a-React-Native-application-for-Android-and-iOS-dual-platforms/\">React Native 开发适配心得</a><br><a href=\"https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/app-icon/\">Apple Developer - App Icon</a><br><a href=\"https://github.com/crazycodeboy/react-native-splash-screen/issues/149\">在模拟器安卓 4.0 上运行正常，在手机上安卓 6.0 7.0 都闪退 不知道什么情况求解</a><br><a href=\"https://stackoverflow.com/questions/45954209/issues-with-resources-generated-by-react-in-android-studio-3\">Issues with resources generated by react in Android Studio 3</a><br><a href=\"https://segmentfault.com/a/1190000004878644\">React Native 的默认单位和自适应布局方案</a></p>\n","categories":["Hybrid App"],"tags":["Hybrid App","React","Android"]},{"title":"开发 React Native APP（一）","url":"https://xiaogliu.github.io/2018/02/27/develop-react-native-app-1/","content":"<p>最开始接到公司通知要开发 React Native APP 的时候，很兴奋，因为之前的技术栈主要是 Vue 和 Angular，对于 React 只是写过几个 Demo，一直想在实际项目中使用但没有机会。不过公司给的开发时间很短，从设计需求到第一版送审只给了一个月时间。鉴于之前使用 Vue 的经验（即便不是很熟的情况下也可以把官网 Demo 撸下来改改就能上线，功能及性能可以后续迭代优化）以及业务 API 90%以上都已和后台同学联调 OK，当时想一个月绰绰有余。</p>\n<p>虽说最后 APP 上线了（<a href=\"https://itunes.apple.com/cn/app/%E6%A6%84%E7%9B%9B%E9%87%91%E8%9E%8D/id1336295162?mt=8\">iOS</a>，<a href=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/lsapp.apk\">安卓</a>），但开发过程中踩了很多坑。</p>\n<p>首先，难以找到一个开箱即用的 React Native APP Demo。目前存在的 Demo 要么过于简单，比如 React Native 官网提供的 Demo <a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">AwesomeProject</a> ，这个 Demo 只提供了最简功能，对于路由（导航组件）、状态管理等并没有涉及。虽然 React Native 教程中对于复杂应用应如何选择组件及第三方库都有提及，但并没有给出完整示例。而另一方面，又有很多 <a href=\"https://github.com/ReactNativeNews/React-Native-Apps\">React Native APP</a> 虽已开源，但都是用于特定场合的完整 APP，有些 APP 的目录结构本身就不友好，并且也没有完整的说明文档。</p>\n<p>其次，React 本身的学习曲线就相对陡峭，尤其涉及状态管理部分，很难找到可以直接 copy-paste 的代码，除此之外原生 App 本身还有很多区别于 web 的需求。</p>\n<p>鉴于以上原因，所以决定写篇文章详细介绍开发 React Native APP 的过程。</p>\n<p>内容较多，分两部分介绍，这部分主要内容为：</p>\n<ul>\n<li>react navigation 作为路由（导航）组件的初步使用</li>\n<li>自定义组件</li>\n<li>通过 fetch API 发送网络请求</li>\n<li>集成 redux，并实现 redux 状态的持久化存储</li>\n</ul>\n<p>完整 demo 在这 <a href=\"https://github.com/xiaogliu/react-native-complete-demo\">react-native-complete-demo</a></p>\n<h1 id=\"一-准备工作\"><a href=\"#一-准备工作\" class=\"headerlink\" title=\"一 准备工作\"></a>一 准备工作</h1><h2 id=\"1-1-开发工具\"><a href=\"#1-1-开发工具\" class=\"headerlink\" title=\"1.1 开发工具\"></a>1.1 开发工具</h2><p>如果要开发 iOS 应用并发布到 APP Store 必须使用 Xcode 并有 Apple 开发者账号。如果是开发安卓应用，有电脑就好，最好有梯子。</p>\n<h2 id=\"1-2-代码检查及自动修正\"><a href=\"#1-2-代码检查及自动修正\" class=\"headerlink\" title=\"1.2 代码检查及自动修正\"></a>1.2 代码检查及自动修正</h2><p>开始改造代码之前，推荐先安装 eslint 和 prettier 作为代码检查和自动格式化工具，这样可以确保自己写的代码始终如一且避免低级错误，我使用 vscode 作为编辑器，之前写过一篇文章<a href=\"https://xiaogliu.github.io/2017/12/26/develop-react-using-vscode/\">VSCode 配置 react 开发环境</a>，如果你也使用 vscode 可参考下。</p>\n<p>最终的目的就是保存操作后代码按照 eslint 的配置，自动格式化代码。</p>\n<h1 id=\"二-官方-Demo-下载及介绍\"><a href=\"#二-官方-Demo-下载及介绍\" class=\"headerlink\" title=\"二 官方 Demo 下载及介绍\"></a>二 官方 Demo 下载及介绍</h1><p>官方 demo 虽然不完整，但却是一个很好的开始。介绍完官方 Demo（包括环境配置），后文会一步步介绍如何从这个不完整的官方 Demo 改造成可用于生产的 APP。</p>\n<h2 id=\"2-1-环境配置\"><a href=\"#2-1-环境配置\" class=\"headerlink\" title=\"2.1 环境配置\"></a>2.1 环境配置</h2><p>下载官方 Demo：AwesomeProject，然后运行。</p>\n<p>所需的环境配置<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">官方文档</a>讲的很清楚，这里不在赘述。需要指出的是 React Native 对于运行 Demo 提供了两种方法：一种是在 <a href=\"https://expo.io/\">Expo</a> 客户端中运行，另一种是编译成原生代码（安卓编译成 Java，iOS 编译成 objective-C）后在模拟器或者在真机上运行。推荐直接使用第二种，如果想发布 APP 这也是绕不过去的。</p>\n<p>如果之前没有开发过原生 APP，还需要熟悉下原生 APP 的开发工具：安卓使用 <a href=\"https://developer.android.com/studio/index.html\">Android Studio</a>，iOS 使用 <a href=\"https://developer.apple.com/support/xcode/\">Xcode</a>。它们如何配合 React Native 使用在 <a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">官方文档</a>有说明，这部分没有太多坑，遇到问题自行谷歌一般都有解决方案。</p>\n<p>需要说明的是 Android Studio 很多依赖更新需要访问谷歌服务，所以请自备梯子。</p>\n<blockquote>\n<p>在 <a href=\"https://github.com/xiaogliu/step_by_step/tree/master/other/react/react_native\">step_by_step/other/react/react_native/</a> 中详细记录了我在初次使用 React Native 过程中遇到的问题及解决方案，因为以记录为目的，所以稍显啰嗦，有兴趣可以看下。</p>\n</blockquote>\n<h2 id=\"2-2-官方-Demo-目录介绍\"><a href=\"#2-2-官方-Demo-目录介绍\" class=\"headerlink\" title=\"2.2 官方 Demo 目录介绍\"></a>2.2 官方 Demo 目录介绍</h2><p>良好的目录结构有助于今后的开发及维护，本文后半部分每添加新功能，除了代码部分，如果目录结构有变，还会着重指出。首先，让我们看下官方 Demo 的目录结构：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/aw_content.jpeg\" alt=\"AwesomeProject 目录结构\"></p>\n<p>上面的目录结构说明如下，重要的有：</p>\n<ul>\n<li><code>android/</code> android 原生代码（使用 android studio 要打开这个目录，如果直接打开父目录报错）</li>\n<li><code>ios/</code> ios 原生代码（使用 xcode 打开这个目录，如果直接打开父目录报错）</li>\n<li><code>index.js</code> 打包 app 时进入 react native（js 部分） 的入口文件（0.49 以后安卓、ios 共用一个入口文件）</li>\n<li><code>App.js</code> 可以理解为 react native（js 部分） 代码部分的入口文件，比如整个项目的路由在这里导入</li>\n</ul>\n<p>上面是最重要的四个目录/文件，其他说明如下：</p>\n<ul>\n<li><code>_test_/</code> 测试用（暂未使用）</li>\n<li><code>app.json</code> 项目说明，主要给原生 app 打包用，包括项目名称和手机桌面展示名称 <a href=\"https://stackoverflow.com/questions/42409459/react-native-0-41-app-json\">React Native : 0.41 app.json</a></li>\n<li><code>package.json</code> 项目依赖包配置文件</li>\n<li><code>node_modules</code> 依赖包安装目录</li>\n<li><code>yarn.lock</code> yarn 包管理文件</li>\n<li>其他配置文件暂时无需改动，在此不做说明</li>\n</ul>\n<h1 id=\"3-配置路由\"><a href=\"#3-配置路由\" class=\"headerlink\" title=\"3 配置路由\"></a>3 配置路由</h1><p>这里使用 <a href=\"https://reactnavigation.org/docs/getting-started.html\">react navigation</a> 管理路由，大而全的介绍或者原理说明不是这部分的重点，这里主要讲怎么用。</p>\n<p>react navigation 常用 API 有三个：</p>\n<ul>\n<li><code>StackNavigator</code>：页面间跳转（每次跳转后都会将前一个页面推入返回栈，需要返回上个页面特别好用）</li>\n<li><code>TabNavigator</code>：顶部或底部 tab 跳转，一般在底部使用</li>\n<li><code>DrawerNavigator</code>：侧滑导航</li>\n</ul>\n<p>最为常用的是前两个，接下来也只介绍前两个的使用。</p>\n<h2 id=\"3-1-StackNavigator-实现页面间跳转\"><a href=\"#3-1-StackNavigator-实现页面间跳转\" class=\"headerlink\" title=\"3.1 StackNavigator 实现页面间跳转\"></a>3.1 StackNavigator 实现页面间跳转</h2><p><strong>首先我们要调整下目录结构</strong>，调整后的结构如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/stack_navigator.png\" alt=\"添加 StackNavigator 后目录结构\"></p>\n<ul>\n<li><code>src/</code> 放置所有原始的 react native 代码</li>\n<li><code>config/</code> 配置文件，比如路由配置</li>\n<li><code>route.js</code> 路由配置文件</li>\n<li><code>screens/</code> 所有页面文件</li>\n<li><code>ScreenHome/</code> 这个目录是放具体页面文件的，为了进一步进行代码分离，里面又分为三个文件：<code>index.js</code> 中包含逻辑部分，<code>style.js</code> 中包含样式部分；<code>view.js</code> 中包含视图或者说页面元素部分。其他页面文案结构与此相同。</li>\n</ul>\n<blockquote>\n<p>注意页面文件的命名方式：大驼峰命名法，react native 推荐组件命名用大驼峰命名法，每个页面相当于一个组件。</p>\n</blockquote>\n<p>简单介绍了 react navigation 下面进行具体改造:</p>\n<p>1）首先配置路由：路由文件 <code>route.js</code> 此时内容如下，这也是 <code>StackNavigator</code> 最简单的使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * route.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StackNavigator</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-navigation&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入页面组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ScreenHome</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../screens/ScreenHome&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ScreenSome1</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../screens/ScreenSome1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置路由</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AppNavigator</span> = <span class=\"title class_\">StackNavigator</span>(&#123;</span><br><span class=\"line\">  <span class=\"title class_\">ScreenHome</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">screen</span>: <span class=\"title class_\">ScreenHome</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">ScreenSome1</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">screen</span>: <span class=\"title class_\">ScreenSome1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AppNavigator</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n<p>2）更新 <code>App.js</code>，对接路由文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * App.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RootApp</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 渲染页面</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> /&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）具体页面设置，以 <code>ScreenHome</code> 为例</p>\n<p>在 <code>index.js</code> 中自定义当前页面路由逻辑和样式，比如 title 及其样式、在导航栏自定义按钮等，到目前为止，我们只需要简单设置 title 就好：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenHome/index.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScreenHome</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 自定义当前页面路由配置，后面介绍的TabNavigator也使用这个对象中的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> navigationOptions = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置 title</span></span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&quot;首页&quot;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">navigation</span> = props.<span class=\"property\">navigation</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">view</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>view.js</code> 中在具体元素上定义具体跳转页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenHome/index.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入依赖略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> self =&gt; (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">fontSize:</span> <span class=\"attr\">36</span> &#125;&#125;&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">title</span>=<span class=\"string\">&quot;goSomePage1&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      // <span class=\"attr\">路由跳转</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> self.navigation.navigate(&quot;ScreenSome1&quot;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>经过上述配置，效果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/stack_navigator.gif\" alt=\"StackNavigator效果图\"></p>\n<h2 id=\"3-2-TabNavigator-实现页面底部-tab-切换\"><a href=\"#3-2-TabNavigator-实现页面底部-tab-切换\" class=\"headerlink\" title=\"3.2 TabNavigator 实现页面底部 tab 切换\"></a>3.2 TabNavigator 实现页面底部 tab 切换</h2><p>首先在 <code>screens</code> 目录下新建 <code>ScreenBottomTab</code> 页面，用于配置 <code>TabNavigator</code>。每个 tab 对应一个页面，按需新建页面，并且新建的页面需要在 <code>route.js</code> 中进行配置，更新后的目录结构如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/tab_navigator.png\" alt=\"添加tab导航后目录结构\"></p>\n<ul>\n<li><code>ScreenBottomTab</code> 配置底部 tab 导航</li>\n<li><code>ScreenTab1/2/3</code> 新建页面，配合底部 tab 导航</li>\n</ul>\n<p>1）没有 tab 图标的最简配置</p>\n<p>此时只需要配置 <code>ScreenBottomTab</code> 里面的 <code>index.js</code> 文件就好，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenBottomTab/index.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ScreenTab</span> = <span class=\"title class_\">TabNavigator</span>(</span><br><span class=\"line\">  <span class=\"comment\">// 配置 tab 路由</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">ScreenHome</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">screen</span>: <span class=\"title class_\">ScreenHome</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title class_\">ScreenTab1</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">screen</span>: <span class=\"title class_\">ScreenTab1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title class_\">ScreenTab2</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">screen</span>: <span class=\"title class_\">ScreenTab2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title class_\">ScreenTab3</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">screen</span>: <span class=\"title class_\">ScreenTab3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 其他配置选项</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">tabBarPosition</span>: <span class=\"string\">&quot;bottom&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ScreenTab</span>;</span><br></pre></td></tr></table></figure>\n<p>页面文件现在无需配置，需要注意的是 tab 下面的文字默认和在 <code>StackNavigator</code> 中定义的头部导航 title 相同。</p>\n<p>2）自定义 tab 图标</p>\n<p>tab 图标除了自定义外，还需要根据是否选中显示不同颜色，这可以通过配置 <code>TabNavigator</code> 的 <a href=\"https://reactnavigation.org/docs/tab-navigator.html\">tabBarIcon</a> 实现，修改的具体文件是 tab 对应页面的 <code>index.js</code> 文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenHome/index.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> navigationOptions = &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;首页&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">tabBarIcon</span>: <span class=\"function\">(<span class=\"params\">&#123; focused &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据是否选中，显示不同图片</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> icon = focused</span><br><span class=\"line\">      ? <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../assets/images/tab_home_active.png&#x27;</span>)</span><br><span class=\"line\">      : <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../assets/images/tab_home.png&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">source</span>=<span class=\"string\">&#123;icon&#125;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">height:</span> <span class=\"attr\">22</span>, <span class=\"attr\">width:</span> <span class=\"attr\">22</span> &#125;&#125; /&gt;</span></span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>最终的效果如下:</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/tab_navigator.gif\" alt=\"底部 tab 导航效果图\"></p>\n<h2 id=\"3-3-单个页面实现-modal-模式的切换\"><a href=\"#3-3-单个页面实现-modal-模式的切换\" class=\"headerlink\" title=\"3.3 单个页面实现 modal 模式的切换\"></a>3.3 单个页面实现 modal 模式的切换</h2><p>对于 ios 常见的需求是：登录页面是由下往上进入，而其他页面是由左至右默认进入，react navigation 只提供了全局配置页面的方式，并没提供单个页面的交互方式，但这个功能还是可以实现的，这个在第二部分<a href=\"https://xiaogliu.github.io/2018/02/27/develop-react-native-app-2/\">开发 React Native APP（二）</a>中介绍。</p>\n<h1 id=\"四-自定义组件\"><a href=\"#四-自定义组件\" class=\"headerlink\" title=\"四 自定义组件\"></a>四 自定义组件</h1><p>react native 已经封装了很多常用组件，但有时我们仍然需要在次基础上进行封装，比如某些组件需要大量复用而原生组件样式或者交互逻辑不符合需求。</p>\n<p>这里只介绍目录结构的调整，具体代码可参考 Github 上项目代码，因为自定义组件的需求千差万别，具体编写过程也有很多教程，这里不再具体介绍，只添加了自定义 Toast 组件。目录结构调整如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/define_components.png\" alt=\"组件目录\"></p>\n<ul>\n<li><code>components/</code> 自定义组件都放这里</li>\n<li><code>XgToast.js</code> 自定义组件具体代码</li>\n</ul>\n<blockquote>\n<p>文件 <code>config/pxToDp.js</code> 用于尺寸自适应，在 <code>XgToast.js</code> 中有使用，<a href=\"https://xiaogliu.github.io/2018/02/27/develop-react-native-app-2/\">开发 React Native APP（二）</a>中详细介绍。</p>\n</blockquote>\n<h1 id=\"五-网络请求\"><a href=\"#五-网络请求\" class=\"headerlink\" title=\"五 网络请求\"></a>五 网络请求</h1><p>react native 使用上有个最大的好处是可以不用考虑新语法兼容性的问题，既然如此，自然使用设计更加优良的 API，在网络请求方面，本项目使用<a href=\"http://bubkoo.com/2015/05/08/introduction-to-fetch/\">fetch API</a>。</p>\n<p>添加网络请求后目录结构调整如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/http_request.png\" alt=\"网络请求目录\"></p>\n<ul>\n<li><code>xgHttp.js</code> 配置 fetch api</li>\n<li><code>xgRequest.js</code> api 请求列表</li>\n</ul>\n<h2 id=\"5-1-配置-fetch-api\"><a href=\"#5-1-配置-fetch-api\" class=\"headerlink\" title=\"5.1 配置 fetch api\"></a>5.1 配置 fetch api</h2><p><code>xgHttp.js</code>全部代码如下，里面有简单注释，这里不再详解，fetch api 的使用可以参考 <a href=\"http://bubkoo.com/2015/05/08/introduction-to-fetch/\">fetch API 简介</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * xgHttp.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求服务器host</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> host = <span class=\"string\">&quot;http://api.juheapi.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  method,</span></span><br><span class=\"line\"><span class=\"params\">  url,</span></span><br><span class=\"line\"><span class=\"params\">  &#123; bodyParams = &#123;&#125;, urlParams = &#123;&#125; &#125;</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> headers = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>();</span><br><span class=\"line\">  headers.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将url参数写入URL</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> urlParStr = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> urlParArr = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(urlParams);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (urlParArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(urlParams).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">      urlParStr += <span class=\"string\">`<span class=\"subst\">$&#123;element&#125;</span>=<span class=\"subst\">$&#123;urlParams[element]&#125;</span>&amp;`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    urlParStr = <span class=\"string\">`?<span class=\"subst\">$&#123;urlParStr&#125;</span>`</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(<span class=\"string\">`<span class=\"subst\">$&#123;host&#125;</span><span class=\"subst\">$&#123;url&#125;</span><span class=\"subst\">$&#123;urlParStr&#125;</span>`</span>, &#123;</span><br><span class=\"line\">      method,</span><br><span class=\"line\">      headers,</span><br><span class=\"line\">      <span class=\"comment\">// 如果是 get 或者 head 方法，不添加请求头部</span></span><br><span class=\"line\">      <span class=\"attr\">body</span>: method === (<span class=\"string\">&quot;GET&quot;</span> || <span class=\"string\">&quot;HEAD&quot;</span>) ? <span class=\"literal\">null</span> : <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(bodyParams)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.<span class=\"property\">status</span> &lt; <span class=\"number\">200</span> || res.<span class=\"property\">status</span> &gt; <span class=\"number\">299</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`出错啦：<span class=\"subst\">$&#123;res.status&#125;</span>`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的配置还不完善，比如，生产环境中很多接口都有验证功能，一般是 token + 用户 id，上面的配置并没有这个功能。但现在实现这个功能还会涉及到在哪存放 token，一展开又有很多内容，缺少验证功能暂时并不影响 APP 的完整度，所以这个坑后续填。</p>\n</blockquote>\n<h2 id=\"5-2-请求-api-编写及使用\"><a href=\"#5-2-请求-api-编写及使用\" class=\"headerlink\" title=\"5.2 请求 api 编写及使用\"></a>5.2 请求 api 编写及使用</h2><ul>\n<li><strong>api 列表文件</strong></li>\n</ul>\n<p>具体 api 请求代码我放在了 <code>xgRequest.js</code> 文件中，以 <code>get</code> 请求为例，<code>xgRequest.js</code> 代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * xgRequest.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">XgHttp</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./xgHttp&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">todayOnHistory</span>: <span class=\"function\"><span class=\"params\">urlPar</span> =&gt;</span> <span class=\"title class_\">XgHttp</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;/japi/toh&quot;</span>, &#123; <span class=\"attr\">urlParams</span>: urlPar &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>&quot;/japi/toh&quot;</code> 为接口地址，这里我使用了聚合数据<a href=\"https://www.juhe.cn/docs/api/id/63\">历史上的今天</a> API。</p>\n<blockquote>\n<p>再调用聚合数据<a href=\"https://www.juhe.cn/docs/api/id/63\">历史上的今天</a> API 的时候使用了我自己的 APPKEY，每天免费调用 100 次，超出后回报错<code>request exceeds the limit!</code>，如果你想进行更多的测试，注册后替换成自己的 APPKEY 就可以。</p>\n</blockquote>\n<ul>\n<li><strong>使用</strong></li>\n</ul>\n<p>首先，调用接口，获取数据。</p>\n<p>接口调用是在页面文件的 <code>index.js</code> 中进行的，以 <code>ScreenTab1/index.js</code> 为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenTab1/index.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> urlPar = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 大佬们，这个是我申请的聚合数据应用的key，每天只有100免费请求次数</span></span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"string\">&#x27;7606e878163d494b376802115f30dd4e&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">v</span>: <span class=\"string\">&#x27;1.0&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">month</span>: <span class=\"title class_\">Number</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">inputMonthText</span>),</span><br><span class=\"line\">  <span class=\"attr\">day</span>: <span class=\"title class_\">Number</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">inputDayText</span>),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拿到返回数据后就可以进一步操作了</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> todayOnHistoryInfo = <span class=\"keyword\">await</span> <span class=\"title class_\">XgRequest</span>.<span class=\"title function_\">todayOnHistory</span>(urlPar);</span><br></pre></td></tr></table></figure>\n<p>然后，展示数据。</p>\n<p>拿到数据以后就可以在做进一步操作了，一般就是在页面中展示了。<strong>react 是数据驱动的框架</strong>，对于动态变化的展示数据一般是放在 react native 的 <code>state</code> 对象中，<code>state</code> 一经改变，便会触发 <code>render()</code> 函数重新渲染 DOM 中变化了的那部分。</p>\n<p>首先是在 <code>index.js</code> 中把需要动态展示的数据先写入 <code>state</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenTab1/index.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将需要动态更新的数据放入 state</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">todayOnHistoryInfo</span>: &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后在 <code>view.js</code> 中读取 <code>state</code> 中的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenTab1/view.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 查询 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">Button</span> title=<span class=\"string\">&quot;查询&quot;</span> onPress=&#123;<span class=\"function\">() =&gt;</span> self.<span class=\"title function_\">getTodayOnHistoryInfo</span>()&#125; /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 展示查询数据 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">Text</span>&gt;</span><br><span class=\"line\">  发生了啥事：&#123;self.<span class=\"property\">state</span>.<span class=\"property\">todayOnHistoryInfo</span>.<span class=\"property\">result</span></span><br><span class=\"line\">    ? self.<span class=\"property\">state</span>.<span class=\"property\">todayOnHistoryInfo</span>.<span class=\"property\">result</span>[<span class=\"number\">0</span>].<span class=\"property\">des</span></span><br><span class=\"line\">    : <span class=\"string\">&quot;暂无数据&quot;</span>&#125;</span><br><span class=\"line\">&lt;/<span class=\"title class_\">Text</span>&gt;;</span><br></pre></td></tr></table></figure>\n<p>上述 <code>view.js</code> 中的代码主要做两件事：发送调用指令，展示返回数据。</p>\n<p>最终的效果图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/network.gif\" alt=\"网络请求效果\"></p>\n<h1 id=\"六-集成-redux\"><a href=\"#六-集成-redux\" class=\"headerlink\" title=\"六 集成 redux\"></a>六 集成 redux</h1><p>在 App 中有一些全局状态是所有页面共享的，比如登录状态，或者账户余额（购买商品后所有展示余额的页面都要跟着更新）。在本项目中，使用 <a href=\"https://redux.js.org/\">Redux</a> 进行状态管理。</p>\n<p>引入 redux 后后目录结构调整如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/redux.png\" alt=\"redux目录\"></p>\n<ul>\n<li><code>redux</code> 存放 redux 相关配置文件</li>\n<li><code>actions.js</code> redux action</li>\n<li><code>reducers.js</code> redux reducer</li>\n<li><code>store.js</code> redux store</li>\n</ul>\n<blockquote>\n<p>如果对 redux 毫无概念，可以看下这篇文章 <a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\">Redux 入门教程</a></p>\n</blockquote>\n<p><a href=\"https://redux.js.org/\">Redux</a> 实际上是非常难用的，，，如果之前使用过 <a href=\"https://vuex.vuejs.org/\">vuex</a>，在使用 Redux 的过程中，会发现需要自己配置的东西太多（这里没有好坏之分，不想引战，自己的使用感受而已），为了简化 Redux 的操作， Redux 作者开发了 <a href=\"https://github.com/reactjs/react-redux\">react-redux</a>，虽然使用的便捷性上还没法和 vuex 比，但总算是比直接使用 Redux 好用很多。</p>\n<p>在集成 Redux 进行状态管理之前我们先思考一个问题：集成过程中难点在哪？</p>\n<p>因为在一个 App 中 Redux 只有一个 Store，这个 Store 应该为所有（页面）组件共享，所以，集成的难点就是<strong>如何使所有（页面）组件可以访问到这个唯一的 store，并且可以触发 action</strong>。为此，redux-react 引入了 <code>connect</code> 函数和 <code>Provide</code> 组件，他们必须配合使用才能实现 redux 的集成。</p>\n<p>通过这 <code>connect</code> 和 <code>Provide</code> 实现 store 在组件间共享的思想是：</p>\n<ol>\n<li>Redux store 可以（注意是“可以”，并不是“一定”，需要配置，见第 2 条）对 <code>connect</code> 方法可见，所以在组件中可以通过调用 <code>connect</code> 方法实现对 store 数据的访问；</li>\n<li>实现 Redux store 对 <code>connect</code> 的可见的前提条件是，<strong>需要保证这个组件为 <code>Provide</code> 组件的子组件</strong>，这样通过将 store 作为 <code>Provide</code> 组件的 props，就可以层层往下传递给所有子组件；</li>\n<li>但子组件必须通过 <code>connect</code> 方法实现对 store 的访问，而无法直接访问。</li>\n</ol>\n<h2 id=\"6-1-引入依赖\"><a href=\"#6-1-引入依赖\" class=\"headerlink\" title=\"6.1 引入依赖\"></a>6.1 引入依赖</h2><p>首先是安装依赖 redux，react-redux：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add redux react-redux</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-2-配置-redux\"><a href=\"#6-2-配置-redux\" class=\"headerlink\" title=\"6.2 配置 redux\"></a>6.2 配置 redux</h2><p>这里指的是配置 <code>actions</code>, <code>reducers</code> 和 <code>store</code>。</p>\n<blockquote>\n<p>据说应用大了，最好将 redux 分拆，但现在项目还小，暂时没有做拆分。</p>\n</blockquote>\n<ul>\n<li>配置 <code>actions</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * actions.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">setUserInfo</span>(<span class=\"params\">userInfo</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// action 类型</span></span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;SET_USER_INFO&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// userinfo 是传进来的参数</span></span><br><span class=\"line\">    userInfo</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">clearReduxStore</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;CLEAR_REDUX_STORE&quot;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 <code>reducers</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * reducers.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state = initialState, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;SET_USER_INFO&quot;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 合并 userInfo 对象</span></span><br><span class=\"line\">      action.<span class=\"property\">userInfo</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, state.<span class=\"property\">userInfo</span>, action.<span class=\"property\">userInfo</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 更新状态</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, state, &#123; <span class=\"attr\">userInfo</span>: action.<span class=\"property\">userInfo</span> &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;CLEAR_REDUX_STORE&quot;</span>:</span><br><span class=\"line\">      <span class=\"comment\">// 清空 store 中的 userInfo 信息</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">userInfo</span>: &#123;&#125; &#125;;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> reducer;</span><br></pre></td></tr></table></figure>\n<p>注意 <code>SET_USER_INFO</code> 这条路径下的代码，使用了 <code>Object.assign()</code>。这是因为 <code>reducer</code> 函数每次都会返回全新的 <code>state</code> 对象，<strong>这意味着如果 <code>state</code> 对象含有多个属性而在 <code>reducer</code> 函数返回时没有合并之前的 <code>state</code>，可能会导致 <code>state</code> 对象属性丢失</strong>。</p>\n<p>这是一个很常见的错误，因为通常我们在触发 <code>actions</code> 时只需要传入更改的那部分 <code>state</code> 属性，而不是将整个 <code>state</code> 再传一遍。</p>\n<blockquote>\n<p>redux 经典计数器教程在触发 <code>state</code> 变化时通常这样写 <code>return &#123; defaultNum: state.defaultNum - 1 &#125;;</code>，因为计数器例子中只有一个属性，即 <code>defaultNum</code>，所以合并之前的 <code>state</code> 就没有意义了，但生产环境中的应用 <code>state</code> 对象中往往不止一个属性，此时上述的写法就会出错。</p>\n</blockquote>\n<ul>\n<li>配置 <code>store</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * store.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">&quot;./reducers&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义初始值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">  <span class=\"attr\">userInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;小光&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducers, initialState);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-3-组件中使用\"><a href=\"#6-3-组件中使用\" class=\"headerlink\" title=\"6.3 组件中使用\"></a>6.3 组件中使用</h2><p>配置完 redux，接下来就是使用了。</p>\n<ul>\n<li>配置 <code>index.js</code></li>\n</ul>\n<p>在配置 <code>index.js</code> 中 主要是配置 <code>Provide</code> 作为根组件，并传入 <code>store</code> 作为其属性，为接下来组件使用 redux 创造条件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * index.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRegistry</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/redux/store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ReduxApp</span> = (<span class=\"params\"></span>) =&gt; (</span><br><span class=\"line\">  <span class=\"comment\">// 配置 Provider 为根组件，同时传入 store 作为其属性</span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">AppRegistry</span>.<span class=\"title function_\">registerComponent</span>(<span class=\"string\">&quot;AwesomeProject&quot;</span>, <span class=\"function\">() =&gt;</span> <span class=\"title class_\">ReduxApp</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置组件</li>\n</ul>\n<p>这里以 <code>ScreenTab2</code> 为例：</p>\n<p>首先，在 <code>index.js</code> 中关联 redux</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenTab2/index.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// redux 依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; bindActionCreators &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actionCreators <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../redux/actions&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">changeReduxStore</span>(<span class=\"params\">userInfo</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置 redux store，相当于 dispatch，这里触发 actions 中的 &#x27;SET_USER_INFO&#x27;</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">setUserInfo</span>(userInfo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 store 中的状态映射（map）到当前组件的 props 中，这样才能在该组建中访问 redux state</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">userInfo</span>: state.<span class=\"property\">userInfo</span> &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 actions 中定义的方法映射到当前组件的 props 中，这样才能在该组建中触发 action</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">bindActionCreators</span>(actionCreators, dispatch);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 store 和 当前组件连接（connect）起来</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">ScreenTab2</span>);</span><br></pre></td></tr></table></figure>\n<p>然后，就是在 view 中控制具体改变的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenTab2/view.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"title class_\">Button</span> title=<span class=\"string\">&quot;改变名字&quot;</span> onPress=&#123;<span class=\"function\">() =&gt;</span> self.<span class=\"title function_\">changeReduxStore</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vince&#x27;</span> &#125;)&#125; /&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;改变性别&quot;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> self.changeReduxStore(&#123; gender: &#x27;女&#x27; &#125;)&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;还原&quot;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> self.changeReduxStore(&#123; name: &#x27;小光&#x27;, gender: &#x27;男&#x27; &#125;)&#125; /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最终效果图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/redux_gif.gif\" alt=\"集成redux后效果\"></p>\n<h2 id=\"6-4-持久化存储\"><a href=\"#6-4-持久化存储\" class=\"headerlink\" title=\"6.4 持久化存储\"></a>6.4 持久化存储</h2><p>手机 App 一般都有这样的需求：<strong>除非用户主动退出，不然即便 App 进程被杀死，App 重新打开后登录信息依旧会保存</strong>。</p>\n<p>在本项目中，为了便于各组件共享登录状态，我把登录状态写在了 redux store 中，但原生 redux 有个特性：页面刷新后 redux store 会回恢复初始状态。为了达到上述需求，就需要考虑 redux store 持久化存储方案。本项目中使用了 <a href=\"https://github.com/rt2zz/redux-persist\">redux-persist</a>，下面介绍如何配置：</p>\n<ul>\n<li>引入依赖</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add redux-persist</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改 redux 配置</li>\n</ul>\n<p>1）修改 <code>store.js</code>。</p>\n<p>除了引入 <code>redux-persist</code> 外，这里使用了 react native 提供的 <a href=\"https://facebook.github.io/react-native/docs/asyncstorage.html\">AsyncStorage</a> 作为持久化存储的容器。另外，初始化 <code>state</code> 移到了 <code>reducers.js</code> 中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * store.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 更改为持久化存储</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入 AsyncStorage 作为存储容器</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AsyncStorage</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入 redux-persist</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; persistStore, persistCombineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux-persist&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">&quot;./reducers&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 持久化存储配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">storage</span>: <span class=\"title class_\">AsyncStorage</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> persistReducers = <span class=\"title function_\">persistCombineReducers</span>(config, &#123;</span><br><span class=\"line\">  reducers</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">configureStore</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(persistReducers);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> persistor = <span class=\"title function_\">persistStore</span>(store);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; persistor, store &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> configureStore;</span><br></pre></td></tr></table></figure>\n<p>2）修改 <code>reducers.js</code></p>\n<p>只是将初始化 <code>state</code> 移入。至于为什么要将初始化 <code>state</code> 从 <code>store.js</code> 移入 <code>reducers.js</code> 实在是无奈之举：不然在 <code>store.js</code> 中创建 <code>store</code> 报错，后续再填坑，暂时先放在 <code>reducers.js</code> 中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * reducers.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 更改为持久化存储</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化 state 放在这里</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">  <span class=\"attr\">userInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;小光&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducers</span>(<span class=\"params\">state = initialState, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... 代码未修改</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> reducers;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改使用 redux 的文件</li>\n</ul>\n<p>1）修改根目录下的 <code>index.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * index.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 更改为持久化存储</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PersistGate</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux-persist/es/integration/react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> configureStore <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/redux/store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; persistor, store &#125; = <span class=\"title function_\">configureStore</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ReduxApp</span> = (<span class=\"params\"></span>) =&gt; (</span><br><span class=\"line\">  <span class=\"comment\">// 配置 Provider 为根组件，同时传入 store 作为其属性</span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;/* redux 持久化存储 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">PersistGate</span> <span class=\"attr\">persistor</span>=<span class=\"string\">&#123;persistor&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">PersistGate</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>2）因为修改为持久化存储的过程过程中把初始化的 <code>state</code> 存在了 <code>reducers.js</code> 中，所以在页面组件映射 <code>state</code> 到当前页面时需要还需要修改对应属性的引入地址，依然以 <code>ScreenTab2</code> 为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ScreenTab2/index.js</span></span><br><span class=\"line\"><span class=\"comment\"> * 更改为持久化存储</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改前</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 引用 state.userInfo</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">userInfo</span>: state.<span class=\"property\">userInfo</span> &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改后</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 引用 state.reducers.userInfo</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">userInfo</span>: state.<span class=\"property\">reducers</span>.<span class=\"property\">userInfo</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过上述修改，便可以实现 redux 的持久化存储：初始化姓名是 <code>小光</code>，更改为 <code>vince</code> 后重新加载页面，姓名还是 <code>vince</code>（而非初始状态 <code>小光</code>）。效果图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/persist_redux.gif\" alt=\"redux持久化存储\"></p>\n<h1 id=\"七-小结\"><a href=\"#七-小结\" class=\"headerlink\" title=\"七 小结\"></a>七 小结</h1><p>经过这部分介绍，App 框架基本构建完成，在第二部分主要讨论 UI/交互、App 发布前的准备工作及如何发布，具体内容包括：</p>\n<ul>\n<li>在使用 react navigation 的前提下，<strong>iOS 实现单个页面从下往上（modal）的进入动画</strong></li>\n<li>尺寸自适应</li>\n<li>设置启动页，更换桌面图标、app 展示名称、appID</li>\n<li>打包发布</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://bubkoo.com/2015/05/08/introduction-to-fetch/\">fetch API 简介</a><br><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\">Redux 入门教程</a><br><a href=\"https://segmentfault.com/a/1190000010416732\">对 React-redux 中 connect 方法的理解</a></p>\n","categories":["Hybrid App"],"tags":["Hybrid App","React","Android"]},{"title":"通过 gh-pages 创建 Hexo 博客子目录","url":"https://xiaogliu.github.io/2018/01/29/create-hexo-subdir-using-gh-pages/","content":"<h1 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h1><p>如何使用 Hexo 创建博客可以查看这篇文章 <a href=\"https://xiaogliu.github.io/2016/06/09/build-blog-by-hexo-github/\">使用 Hexo + Github 搭建个人博客</a> ，创建完成后个人博客地址格式如下：   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">username.github.io</span><br></pre></td></tr></table></figure>\n<p>假设我们现在有个需求，比如说把自己的简历挂在个人博客地址下面，访问地址如下，要怎么实现呢？   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">username.github.io/resume</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者下面的格式</span></span><br><span class=\"line\">username.github.io/resume/index.html</span><br></pre></td></tr></table></figure>\n<p>当然，可以使用简单文字加图片以文章的形式展现，但这不是我们想要的效果。我们希望子目录下包含的是可以独立控制的文件，比如独立的css、js文件，从而可以实现复杂的展示效果。    </p>\n<p>或者说，我们的需求是<strong>给博客添加子目录，子目录可以独立于 Hexo 工作</strong>。</p>\n<h1 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h1><p>Github 实际上已经提供了实现方式，操作如下：   </p>\n<ol>\n<li>新建仓库，仓库名比如是 resume；</li>\n<li>在仓库 resume 下面创建新分支 <code>gh-pages</code>（默认已创建 <code>master</code> 分支，所以现在 resume 下面有两个分支）；</li>\n<li>在分支 <code>gh-pages</code> 下面新建 <code>index.html</code>。</li>\n</ol>\n<p>此时，如果 resume 仓库的远程分支 <code>gh-pages</code> 下面已经存在 <code>index.html</code>，那么通过访问下述任一网址，就可以访问到刚才的 <code>index.html</code> 了:    </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">username.github.io/resume</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者下面的格式</span></span><br><span class=\"line\">username.github.io/resume/index.html</span><br></pre></td></tr></table></figure>\n<p><strong>NOTE: </strong> <code>username.github.io/reponame</code> 访问的是仓库 <code>reponame</code> 下分支 <code>gh-pages</code> 中的 <code>index.html</code> 文件，所以上述操作的关键是必须建立 <code>gh-pages</code> 分支以及必须在其下创建 <code>index.html</code> 文件。   </p>\n<p>后续更新维护只需要在分支 <code>gh-pages</code> 上进行，但出于最佳实践考虑，最好始终保持和 <code>master</code> 同步。   </p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>受 <a href=\"https://facebook.github.io/react-native/docs/tutorial.html\">React Native</a> 官网启发。</p>\n","categories":["Tools"],"tags":["git","hexo"]},{"title":"React数据传递之组件内部通信","url":"https://xiaogliu.github.io/2017/12/31/react-components-inner-communication/","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>脱离初级前端一段时间后会发现，写样式的时间越来越少，处理数据的时间越来越多。处理数据的过程也就是实现业务逻辑的过程，这在项目中无疑是最重要的。   </p>\n<p>所以学习前端框架，了解完基本语法后，接下来就要学习其如何进行数据传递。   </p>\n<p>Angular 设计之初的一大亮点就是实现了数据的双向绑定，使用 Vue 一段时间后发现，所谓数据的双向绑定，组件内部唯一的应用场景就是 form 表单（input，textarea，select， radio），而这种场景下的数据双向绑定，即便框架内部没有实现，自己实现起来也非常简单。明白这一点后感觉之前认为 React 没有实现数据双向绑定很 low 的想法很幼稚。   </p>\n<p>对于 React 的数据传递，涉及两方面的内容：   </p>\n<ol>\n<li>组件内部的数据传递，典型的应用场景包括如何实现 form 表单双向数据绑定、如何绑定事件；</li>\n<li>组件间的数据传递。 包括父组件往子组件传递数据、子组件往父组件传递数据以及兄弟组件之间传递数据。   </li>\n</ol>\n<p>本文先讨论组件内部的数据传递。   </p>\n<h1 id=\"2-组件内部数据传递\"><a href=\"#2-组件内部数据传递\" class=\"headerlink\" title=\"2. 组件内部数据传递\"></a>2. 组件内部数据传递</h1><p>React 组件内部通信主要分为两部分：数据展示与事件处理。</p>\n<h2 id=\"2-1-数据展示\"><a href=\"#2-1-数据展示\" class=\"headerlink\" title=\"2.1 数据展示\"></a>2.1 数据展示</h2><p>组件内部数据的展示和更新都是通过 <code>state</code> 来实现的，如果要使用 <code>state</code> 必须使用 ES6 的 class 定义组件。数据更新在双向数据绑定部分探讨，这部分仅讨论展示初始化数据。   </p>\n<blockquote>\n<p>如果你熟悉 Vue，React 的 <code>state</code> 对象相当于 Vue 的 <code>data</code> 对象    </p>\n</blockquote>\n<p>下面是一个纯展示数据的示例：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 state</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">inputValue</span>: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意，在 react 中，DOM 元素是对象，所以使用‘()’包住 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.state.inputValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在通过 class 定义的 React 组件中，除了生命周期钩子函数，<code>constructor()</code> 和 <code>render()</code> 着两个方法也是自动执行的，先执行 <code>constructor()</code>，执行 <code>constructor()</code> 的同时也是再为 <code>render()</code> 渲染 DOM 做数据准备。   </p>\n<blockquote>\n<p>实际上 <code>constructor()</code> 函数是组件生命周期中调用的第一个函数。</p>\n</blockquote>\n<h2 id=\"2-2-事件\"><a href=\"#2-2-事件\" class=\"headerlink\" title=\"2.2 事件\"></a>2.2 事件</h2><h3 id=\"2-2-1-与-DOM-中事件的异同\"><a href=\"#2-2-1-与-DOM-中事件的异同\" class=\"headerlink\" title=\"2.2.1 与 DOM 中事件的异同\"></a>2.2.1 与 DOM 中事件的异同</h3><p>在 React 中处理事件和在 DOM 中处理事件类似，有两点不同：   </p>\n<ol>\n<li>React 中通过驼峰命名法命名事件，而不是全是小写字母；</li>\n<li>在 JSX 中直接传递函数作为事件处理程序，而不是字符串。 </li>\n</ol>\n<blockquote>\n<p>第 2 点不同有坑，后面细说</p>\n</blockquote>\n<p>举个例子，HTML中的事件：   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;activateLasers()&quot;</span>&gt;</span></span><br><span class=\"line\">  Activate Lasers</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>React 中的事件：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 因为 jsx 中&#x27;&#123;&#125;&#x27;里面代表函数表达式，</span></span><br><span class=\"line\"><span class=\"comment\">// 所以传递给 onClick 的实际是函数 activateLasers 的函数体部分，</span></span><br><span class=\"line\"><span class=\"comment\">// 因此需要指定 this 指向，不然会报错</span></span><br><span class=\"line\">&lt;button onClick=&#123;activateLasers&#125;&gt;</span><br><span class=\"line\">  <span class=\"title class_\">Activate</span> <span class=\"title class_\">Lasers</span></span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-2-存在的坑\"><a href=\"#2-2-2-存在的坑\" class=\"headerlink\" title=\"2.2.2 存在的坑\"></a>2.2.2 存在的坑</h3><p>直接传递 function 作为 event handler 需要指定函数的执行环境，即需要手动绑定 <code>this</code>，不然会报 <code>this</code> 为 <code>undefined</code> 的错。见下面的例子：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">isToggleOn</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 手动绑定 this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不在 constructor() 方法中手动绑定 this，直接将其作为事件处理程序 this 为 undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"function\"><span class=\"params\">prevState</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      <span class=\"attr\">isToggleOn</span>: !prevState.<span class=\"property\">isToggleOn</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;this.state.isToggleOn ? &quot;on&quot; : &quot;off&quot;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-3-为什么会有坑\"><a href=\"#2-2-3-为什么会有坑\" class=\"headerlink\" title=\"2.2.3 为什么会有坑\"></a>2.2.3 为什么会有坑</h3><p><a href=\"https://reactjs.org/docs/handling-events.html\">React 官网</a>说这个锅要 JS 原生语法来背，其实不尽然，React 实在 JS 语法早已确定的情况下设计了这样的事件系统，如果一定要有人站出来背锅，他们五五分吧。   </p>\n<p><strong>1, JS原生语法存在的问题</strong>   </p>\n<p>JS语法中有这样的规则：如果将一个函数的函数体（没有<code>()</code>）赋值给另一个变量，函数体内部的 <code>this</code> 指向可能会发生变化。会不会变化取决于函数和被赋值的变量是否处于同一个作用域（相同的执行环境）中，但实际使用中，将一个函数赋值给相同作用域的变量没有意义，那样的话直接使用那个函数就好，没必要在赋值给另一个变量。   </p>\n<ul>\n<li><p><code>this</code> 指向不发生改变的没有意义的例子（为了方便说明，直接使用 <code>var</code> 操作符）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(); <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"title function_\">a</span>(); <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>this</code> 指向发生改变的例子：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将函数体赋值给一个对象的属性，函数执行时 this 和定义时指向不同</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: fn,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(); <span class=\"comment\">// window</span></span><br><span class=\"line\">o.<span class=\"title function_\">a</span>(); <span class=\"comment\">// o，即&#123;a:f&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果想要在将函数体赋值另一个变量的同时把原函数的 <code>this</code> 指向也一块赋值过去，就需要在赋值的过程中进行绑定 <code>this</code> 的操作，如下：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fn 在赋值的同时将内部的 this 打包一块赋值给了 a</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: fn.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(); <span class=\"comment\">// window</span></span><br><span class=\"line\">o.<span class=\"title function_\">a</span>(); <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>通常在将函数体赋值给变量的时候为了避免 <code>this</code> 出错，都会进行<strong>绑定执行环境的操作</strong>，典型的例子是 <code>var bindId = document.getElementById.bind(document)</code>   </p>\n<p><strong>2, JSX 存在的问题</strong>   </p>\n<p>因为 JSX 中 DOM 元素也是对象，给元素的属性赋值实际是给 DOM 元素对象的属性赋值，见下：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;button&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">onClick</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: <span class=\"string\">&#x27;click me&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这实际就是<strong>将函数体赋值给一个对象的属性，函数执行时 this 和定义时指向不同</strong>的场景，和原生语法相同的是 <strong>this</strong> 指向发生了改变，不同的是原生 JS 中不管怎样，<code>this</code> 总归是有个指向的，而 JSX 直接 <code>undefined</code>。    </p>\n<p>所以说不绑定 <code>this</code> 报 <code>undefined</code> 的错不能全怪 JS 原生语法。   </p>\n<h2 id=\"3-双向数据绑定\"><a href=\"#3-双向数据绑定\" class=\"headerlink\" title=\"3. 双向数据绑定\"></a>3. 双向数据绑定</h2><p>通过 <code>state</code> 传递数据加上事件处理程序便能实现数据的双向绑定，其背后的思想是（以 input 为例）：初始化时将 <code>state</code> 中预定义的 state <code>a</code> 赋值给 input，当 input 的 value 发生改变时，触发事件处理程序，将改变后的 value 赋值给状态 <code>a</code>，React 监测到 <code>state</code> 改变时重新调用 <code>render()</code> 方法，即重新渲染组件，达到双向绑定的目的。   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">inputValue</span>: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">changeInput</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">changeInput</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">changeInput</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将改变后的 input 值赋值给 inputValue，通过事件对象 $event.target.value 实现</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">inputValue</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// input 改变时触发 changeInput</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.inputValue&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.changeInput&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;this.state.inputValue&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里用到了事件对象，React 的事件对象和 JS 原生事件对象保持一致。 </p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://reactjs.org/docs/handling-events.html\">Handling Events</a><br>【2】<a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">State and Lifecycle</a><br>【3】<a href=\"https://reactjs.org/docs/introducing-jsx.html\">Introducing JSX</a><br>【4】<a href=\"https://www.jianshu.com/p/4784216b8194\">React组件生命周期小结</a>   </p>\n","categories":["React"],"tags":["React"]},{"title":"VSCode 配置 react 开发环境","url":"https://xiaogliu.github.io/2017/12/26/develop-react-using-vscode/","content":"<blockquote>\n<p>update 2018-05-16：这篇文章比较久了，如果配置完有问题，可参考这篇文章 <a href=\"https://xiaogliu.github.io/2018/05/15/format-code-by-eslint-and-prettier/\">使用 ESLint &amp;&amp; Prettier 规范代码格式</a></p>\n</blockquote>\n<p>vscode 默认配置对于 react 的 JSX 语法不友好，体现在使用自动格式化或者粘贴后默认缩进错误，尽管可以通过改变 language mode 缓解错误，但更改 language mode 后的格式化依然不够理想。    </p>\n<p>通过搭配使用 <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint</a> 和 <a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier</a> 插件可以实现在 vscode 中完美支持 JSX 语法。      </p>\n<h1 id=\"编辑器安装插件\"><a href=\"#编辑器安装插件\" class=\"headerlink\" title=\"编辑器安装插件\"></a>编辑器安装插件</h1><p>在 vscode 中需要安装下面插件：   </p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier</a></li>\n</ul>\n<h1 id=\"项目中的配置\"><a href=\"#项目中的配置\" class=\"headerlink\" title=\"项目中的配置\"></a>项目中的配置</h1><h2 id=\"配置ESLint\"><a href=\"#配置ESLint\" class=\"headerlink\" title=\"配置ESLint\"></a>配置ESLint</h2><h3 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h3><ol>\n<li>项目中安装 <code>babel-eslint</code>, <code>eslint-plugin-jsx-a11y</code>, <code>eslint-plugin-react</code> 依赖：   </li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install babel-eslint eslint-plugin-jsx-a11y eslint-plugin-react --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>推荐的 ESLint 配置如下（修改<code>.eslintrc</code>）  </li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// Use the AirBnB JS styleguide - https://github.com/airbnb/javascript</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;airbnb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We use &#x27;babel-eslint&#x27; mainly for React Native Classes</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;parser&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;babel-eslint&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ecmaFeatures&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;classes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// jsx相关插件</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;react&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;jsx-a11y&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;import&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We can add/overwrite custom rules here</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// React Native has JSX in JS files</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;react/jsx-filename-extension&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;extensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.jsx&quot;</span><span class=\"punctuation\">]</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// React Native includes images via require(&quot;../images/example.png&quot;)</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;global-require&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>需要注意几点：   </p>\n<ul>\n<li>如果使用 yarn 安装，需要手动创建 <code>.eslintrc</code> 文件</li>\n<li><strong>如果在使用过程中 eslint 报错，提示缺少依赖，安装相关依赖就好</strong></li>\n</ul>\n<h3 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h3><ul>\n<li>如果在项目中文件名后缀是 <code>.js</code> 而不是 <code>.jsx</code>，可能会遇到下面的错误：   </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[eslint] JSX not allowed <span class=\"keyword\">in</span> files with extension <span class=\"string\">&#x27;.js&#x27;</span> (react/jsx-filename-extension)</span><br></pre></td></tr></table></figure>\n<p>在 <code>.eslintrc</code> 中添加新的 <code>rules</code> 允许 <code>.js</code> 和 <code>.jsx</code> 后缀就好：   </p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;react/jsx-filename-extension&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;extensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.jsx&quot;</span><span class=\"punctuation\">]</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>react-native 0.49 及以后版本已经不建议使用 <code>.jsx</code> 为后缀了，参考这个讨论 <a href=\"https://github.com/facebookincubator/create-react-app/issues/87\">No .jsx extension?</a>   </p>\n</blockquote>\n<ul>\n<li>props validation 错误</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[eslint] <span class=\"string\">&#x27;navigation&#x27;</span> is missing <span class=\"keyword\">in</span> props validation (react/prop-types)</span><br></pre></td></tr></table></figure>\n<p>检测 props 的类型有助于写出复用组件，最好不要把这个提醒关掉，如果一定要关，添加下面规则：   </p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;react/prop-types&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Prettier\"><a href=\"#配置Prettier\" class=\"headerlink\" title=\"配置Prettier\"></a>配置Prettier</h2><p>我们想要的效果是：<strong>配置 Prettier 按照 ESLint 的规则保存文件时自动格式化 JSX 代码</strong>，步骤如下：</p>\n<ol>\n<li>项目中安装 <code>prettier-eslint</code>   </li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install prettier-eslint --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置 vscode workspace</li>\n</ol>\n<p>在 vscode workspace 用户自定义部分添加如下代码：   </p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Format a file on save. </span></span><br><span class=\"line\"><span class=\"comment\">// A formatter must be available, </span></span><br><span class=\"line\"><span class=\"comment\">// the file must not be auto-saved, </span></span><br><span class=\"line\"><span class=\"comment\">// and editor must not be shutting down.</span></span><br><span class=\"line\"><span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">// Enable/disable default JavaScript formatter (For Prettier)</span></span><br><span class=\"line\"><span class=\"attr\">&quot;javascript.format.enable&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">// Use &#x27;prettier-eslint&#x27; instead of &#x27;prettier&#x27;. </span></span><br><span class=\"line\"><span class=\"comment\">// Other settings will only be fallbacks </span></span><br><span class=\"line\"><span class=\"comment\">// in case they could not be inferred from eslint rules.</span></span><br><span class=\"line\"><span class=\"attr\">&quot;prettier.eslintIntegration&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h1><p>进行保存操作后，自动格式化文件</p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/vscode_format_react.gif\" alt=\"vscode 格式化 react 效果图\"></p>\n<blockquote>\n<p>ps：随着 vscode 不断升级，编辑器默认支持 react 越来越好，这片文章基于 vscode 19.0版本。    </p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://hackernoon.com/configure-eslint-prettier-and-flow-in-vs-code-for-react-development-c9d95db07213\">Configure ESLint, Prettier, and Flow in VS Code for React Development</a><br>【2】<a href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md\">eslint-plugin-react/docs/rules/prop-types.md</a><br>【3】<a href=\"https://medium.com/pvtl/linting-for-react-native-bdbb586ff694\">Linting for React Native</a>   </p>\n","categories":["Tools"],"tags":["React","vscode"]},{"title":"使用vuex进行菜单管理","url":"https://xiaogliu.github.io/2017/12/20/vuex-manage-menu-states/","content":"<p>vuex 的优势在复杂状态管理中才能提现出来。   </p>\n<p>如果项目中有多级菜单，且不同组件中散布多个相同级别的菜单，项目同一时刻各级菜单有且仅有一个高亮，菜单跳转时除了路由改变，相应菜单也要高亮（之前的恢复非高亮状态），这便是个使用 vuex 再好不过的场景。   </p>\n<h1 id=\"使用-DOM-操作进行简单菜单管理\"><a href=\"#使用-DOM-操作进行简单菜单管理\" class=\"headerlink\" title=\"使用 DOM 操作进行简单菜单管理\"></a>使用 DOM 操作进行简单菜单管理</h1><p>使用 DOM 进行菜单管理，背后的思想是：在点击菜单的同时，将事件对象传入事件处理程序，想让当前高亮的 menu 非高亮，再让点击的 menu 高亮。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;menu-url&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active userList&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;menuClicked($event, &#x27;userList&#x27;)&quot;</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chargeList&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;menuClicked($event, &#x27;chargeList&#x27;)&quot;</span>&gt;</span>充值<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;buyList&quot;</span>  @<span class=\"attr\">click</span>=<span class=\"string\">&quot;menuClicked($event, &#x27;buyList&#x27;)&quot;</span>&gt;</span>购买<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bangList&quot;</span>  @<span class=\"attr\">click</span>=<span class=\"string\">&quot;menuClicked($event, &#x27;bangList&#x27;)&quot;</span>&gt;</span>到期<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;withDrawList&quot;</span>  @<span class=\"attr\">click</span>=<span class=\"string\">&quot;menuClicked($event, &#x27;withDrawList&#x27;)&quot;</span>&gt;</span>提现<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">menuClicked (event, url) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前高亮的 menu 非高亮</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentActiveLink = <span class=\"variable language_\">this</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.active&#x27;</span>);</span><br><span class=\"line\">  currentActiveLink.<span class=\"property\">classList</span>.<span class=\"title function_\">remove</span>(<span class=\"string\">&#x27;active&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当前点击的 menu 高亮</span></span><br><span class=\"line\">  event.<span class=\"property\">target</span>.<span class=\"property\">classList</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;active&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 路由跳转</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(<span class=\"string\">`/panel/list/<span class=\"subst\">$&#123;url&#125;</span>`</span>);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这样虽然实现了点击切换时 menu 高亮，但有一个 bug：每次初始化都会使默认的 menu 变成高亮，如果此时在非默认高亮的 menu 中用户手动刷新页面，会导致 menu 高亮错误（比如在 buylist 页面刷新页面后，页面内容依然停留在 buylist，但高亮的菜单却变成了 userlist）。   </p>\n<p>如果要解决这个 bug，就需要在本地存储（刷新不改变存储状态） menu 状态，本地存储可以选择不同的方案，在此不做讨论，但可以肯定的是 DOM + 本地存储控制 menu 高亮的方案在项目逐渐变大以后会变得难以维护。   </p>\n<p>现在是 vuex 登场的时候了。   </p>\n<h1 id=\"使用-vuex-进行菜单管理\"><a href=\"#使用-vuex-进行菜单管理\" class=\"headerlink\" title=\"使用 vuex 进行菜单管理\"></a>使用 vuex 进行菜单管理</h1><p>使用 vuex 进行菜单管理需要<strong>在开发前就规划好菜单的层级</strong>，以便在 vuex 分配 <code>state</code> 和 <code>mutations</code>。 </p>\n<h2 id=\"规划层级\"><a href=\"#规划层级\" class=\"headerlink\" title=\"规划层级\"></a>规划层级</h2><p>确定项目中哪些是一级菜单，哪些是二级菜单，以此类推…… 这里要注意的是，为简化操作，同级别菜单都以不同名称命名，这样在 vuex 中就不需要关注菜单属于那个页面，只关注状态就好。菜单层级通常如下：   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">|-root</span><br><span class=\"line\">|  |</span><br><span class=\"line\">|  |-first-menu1</span><br><span class=\"line\">|  |     |- second-menu1</span><br><span class=\"line\">|  |     |- second-menu2</span><br><span class=\"line\">|  |     |- second-menu3</span><br><span class=\"line\">|  |</span><br><span class=\"line\">|  |-first-menu2</span><br><span class=\"line\">|        |- second-menu3</span><br><span class=\"line\">|        |- second-menu4</span><br><span class=\"line\">|        |- second-menu5</span><br></pre></td></tr></table></figure>\n<h2 id=\"在-vuex-分配-state-和-mutations\"><a href=\"#在-vuex-分配-state-和-mutations\" class=\"headerlink\" title=\"在 vuex 分配 state 和 mutations\"></a>在 vuex 分配 <code>state</code> 和 <code>mutations</code></h2><p>不同层级的菜单分别占用一个 <code>state</code>，至于 <code>mutations</code>，本例中不同 <code>state</code> 分别对应写了一个 <code>mutations</code>，实际工作中为了更大成都减少代码复用，对于 menu 的状态管理可以只写一个 <code>mutations</code>，通过传参判断是更改哪个层级及对应的 menu。   </p>\n<p>需要注意的是<strong> vuex 在页面刷新后状态会重新初始化</strong>，这显然和管理菜单所需功能不符（除了主动触发，其他操作不能对菜单产生影响）。可以通过<a href=\"https://github.com/robinvdvleuten/vuex-persistedstate\">vuex-persistedstate</a> 改变 vuex 默认生命周期，下面示例代码将 vuex 状态存储在了 cookie 中：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    <span class=\"attr\">activeFirstMenu</span>: <span class=\"string\">&#x27;firstMenu1&#x27;</span>,</span><br><span class=\"line\">    activeSecondMenu : <span class=\"string\">&#x27;secondMenu1&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 防止刷新后vuex状态变为初始状态，使用cookie存储，有效期为session</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title function_\">createPersistedState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">storage</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">getItem</span>: <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> <span class=\"title class_\">Cookies</span>.<span class=\"title function_\">get</span>(key),</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在项目中添加&#123; secure: true &#125;无法加入cookie，原因未知</span></span><br><span class=\"line\">        <span class=\"attr\">setItem</span>: <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> <span class=\"title class_\">Cookies</span>.<span class=\"title function_\">set</span>(key, value),</span><br><span class=\"line\">        <span class=\"attr\">removeItem</span>: <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> <span class=\"title class_\">Cookies</span>.<span class=\"title function_\">remove</span>(key),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更改一级菜单</span></span><br><span class=\"line\">    changeFirstActiveMenu (state, menu) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">activeFirstMenu</span> = menu;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 更改二级二级菜单</span></span><br><span class=\"line\">    changeSecondActiveMenu (state, menu) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">activeSecondMenu</span> = menu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"组件中渲染\"><a href=\"#组件中渲染\" class=\"headerlink\" title=\"组件中渲染\"></a>组件中渲染</h2><ul>\n<li>在 template 动态加载高亮 class，通过 vuex 中 state 控制：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;subMenu&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; activeSecondMenu: activeMenu.secondMenu1 &#125;&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">click</span>=<span class=\"string\">&quot;menuClicked(&#x27;secondMenu1&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\">    secondMenu1</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;subMenu&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; activeSecondMenu: activeMenu.secondMenu2 &#125;&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">click</span>=<span class=\"string\">&quot;menuClicked(&#x27;secondMenu2&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\">    secondMenu2</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;subMenu&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; activeSecondMenu: activeMenu.secondMenu3 &#125;&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">click</span>=<span class=\"string\">&quot;menuClicked(&#x27;secondMenu3&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\">    secondMenu3</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>写 js 时有个技巧：路由 path 和对应高亮的 menu 名称最好相同，因为路由跳转和高亮 menu 直接相关，这样可以减少一个参数：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    <span class=\"attr\">activeMenu</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// menu 名称相同，和对应路由的 path 相同</span></span><br><span class=\"line\">      <span class=\"attr\">secondMenu1</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">secondMenu2</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">secondMenu3</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  activeMenuName () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检测 vuex 中 activeSecondMenu 的变化</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">activeSecondMenu</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">menuClicked</span>(<span class=\"params\">path</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取消当前 tab 高亮</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">activeMenu</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">activeMenuName</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新 vuex 状态及 menu 高亮</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;changeSecondActiveMenu&quot;</span>, path);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">activeMenu</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">activeMenuName</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 路由跳转 path 和对应 menu 名称相同 </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(<span class=\"string\">`/somePath/<span class=\"subst\">$&#123;path&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  init () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 刷新页面重置正确高亮菜单tab</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">activeMenu</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">activeMenuName</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">mounted</span>: &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"对于-vuex-的优化\"><a href=\"#对于-vuex-的优化\" class=\"headerlink\" title=\"对于 vuex 的优化\"></a>对于 vuex 的优化</h2><p>上文有谈到，实际工作中为了更大程度实现代码复用，对于某个类别的状态管理可以只写一个 <code>mutations</code>，通过传参（<a href=\"https://vuex.vuejs.org/zh-cn/mutations.html\">Payload</a>）判断更改内容。还是以 menu 管理为例，可进行下面的优化：   </p>\n<ul>\n<li>vuex 优化后如下：   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其他代码略</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 优化后代码，合并 changeFirstActiveMenu 和 changeSecondActiveMenu</span></span><br><span class=\"line\">    changeActiveMenu (state, menuInfo) &#123;</span><br><span class=\"line\">      state[menuInfo.<span class=\"property\">menuHierarchy</span>] = menuInfo.<span class=\"property\">name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>组件 js 部分优化后如下：   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">menuClicked</span>(<span class=\"params\">path</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 其他代码略高亮</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 优化后代码：更改一级和二级菜单触发同个 mutation</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;changeActiveMenu&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">menuHierarchy</span>: <span class=\"string\">&#x27;activeFirstMenu&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: path,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;changeActiveMenu&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">menuHierarchy</span>: <span class=\"string\">&#x27;activeSecondMenu&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: path,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其他代码略</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n","categories":["Vue"],"tags":["Vue"]},{"title":"JSONP和CORS实现跨源请求","url":"https://xiaogliu.github.io/2017/10/18/cross-origin-request-using-jsonp-and-cors/","content":"<h1 id=\"为什么会产生跨源\"><a href=\"#为什么会产生跨源\" class=\"headerlink\" title=\"为什么会产生跨源\"></a>为什么会产生跨源</h1><p>跨源产生的场景主要是在：如果A页面（通过B页面提供的API）获取B页面的资源，而A页面和B页面的源信息不同，那么便会产生跨源错误。  </p>\n<blockquote>\n<p>源信息包括：协议、域名、端口三部分，同源指的是源信息的协议、域名、端口都相同</p>\n</blockquote>\n<p>这主要源于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\">跨源安全策略</a>，简单说，如果两个页面的源信息不同，就不能通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">XHR</a> 对象获取对方的信息。</p>\n<p><strong>需要注意的是，跨源策略是浏览器基于安全考虑做的限制，而非服务器端做了不允许跨源的限制</strong>。如果将浏览器设置为允许跨源请求，跨源策略随即失效（Safari浏览器开发菜单下拉列表中有“停用跨源限制”的选项，Chrome设置略复杂，请自行搜索解决）。   </p>\n<p>通过更改代码跳过浏览器跨源限制的方法很多，本文主要讨论常用的JSONP和CORS方法，完整代码已放在 Github 上 <a href=\"https://github.com/xiaogliu/cross_origin_example\">cross_origin_example</a>。</p>\n<h1 id=\"跨源场景\"><a href=\"#跨源场景\" class=\"headerlink\" title=\"跨源场景\"></a>跨源场景</h1><h2 id=\"跨源场景说明\"><a href=\"#跨源场景说明\" class=\"headerlink\" title=\"跨源场景说明\"></a>跨源场景说明</h2><table>\n<thead>\n<tr>\n<th>url</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.domain.com/a.js\">http://www.domain.com/a.js</a> <br> <a href=\"http://www.domain.com/b.js\">http://www.domain.com/b.js</a> <br> <a href=\"http://www.domain.com/c/c.js\">http://www.domain.com/c/c.js</a></td>\n<td>同源，不同文件或路径</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.domain.com:8080/a.js\">http://www.domain.com:8080/a.js</a> <br> <a href=\"http://www.domain.com/b.js\">http://www.domain.com/b.js</a></td>\n<td>协议、域名相同，端口不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.domain.com/a.js\">http://www.domain.com/a.js</a> <br> <a href=\"http://www.domain111.com/b.js\">http://www.domain111.com/b.js</a></td>\n<td>协议、端口相同，域名不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.domain.com/a.js\">http://www.domain.com/a.js</a> <br> <a href=\"http://x.domain.com/b.js\">http://x.domain.com/b.js</a> <br> <a href=\"http://domain.com/c.js\">http://domain.com/c.js</a></td>\n<td>协议、端口相同，域名不同（主域相同，子域不同）</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.domain.com/a.js\">http://www.domain.com/a.js</a> <br> <a href=\"http://127.0.0.1/b.js\">http://127.0.0.1/b.js</a></td>\n<td>协议、端口相同，域名不同（即便 <a href=\"http://www.domain.com\">www.domain.com</a> 对应的ip地址为 127.0.0.1）</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.domain.com/a.js\">http://www.domain.com/a.js</a> <br> <a href=\"https://www.domain.com/b.js\">https://www.domain.com/b.js</a></td>\n<td>域名、端口相同，协议不同</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"跨源实例\"><a href=\"#跨源实例\" class=\"headerlink\" title=\"跨源实例\"></a>跨源实例</h2><p>下面是通过写原生 XHR 对象，调用豆瓣图书的API</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.<span class=\"property\">status</span> &lt; <span class=\"number\">300</span> || xhr.<span class=\"property\">status</span> === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Error&quot;</span> + xhr.<span class=\"property\">status</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 获取id为6548683的图书信息</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;https://api.douban.com/v2/book/6548683&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>直接使用上述代码会报下面的错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Failed to load https://api.douban.com/v2/book/6548683:</span><br><span class=\"line\">No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br><span class=\"line\">Origin &#x27;http://127.0.0.1:7070&#x27; is therefore not allowed access.</span><br></pre></td></tr></table></figure>\n<p>该错误说明 <code>https://api.douban.com</code> 在响应头信息中没有设置 <code>Access-Control-Allow-Origin</code> （CORS标准中定义的内容，后面讨论），这就不允许跨源请求。</p>\n<blockquote>\n<ul>\n<li>此处我通过Node开启了本地服务，通过<a href=\"http://127.0.0.1:7070\">http://127.0.0.1:7070</a> 这个地址进行的请求，如果直接将上述代码插入到 html 文件中，在本地直接访问也会报跨源错误，错误提示中 Origin 由 <a href=\"http://127.0.0.1:7070\">http://127.0.0.1:7070</a> 变为 <code>null</code>。    </li>\n<li>不同浏览器的跨源安全策略实现方式有差异，上述代码在 Chrome（61.0.3163.100）浏览器下测试会报跨源错误，但 Safari（10.1.2）浏览器不会报跨源错误，可以正常返回数据。</li>\n</ul>\n</blockquote>\n<h1 id=\"JSONP实现跨源通信\"><a href=\"#JSONP实现跨源通信\" class=\"headerlink\" title=\"JSONP实现跨源通信\"></a>JSONP实现跨源通信</h1><p>JSONP(JSON with Padding) 实现跨源通信的原理是 <strong>Web 页面上调用外部 js 文件不受浏览器同源策略的限制，所以通过动态创建 <code>script</code> 便签，然后获取其内容，便实现了跨源通信</strong>，具体过程为：</p>\n<ol>\n<li>首先在 DOM 中创建 <code>script</code> 标签；</li>\n<li>将 <code>script</code> 标签的 <code>src</code> 属性值设置为请求API的地址（一般是一个绝对路径的url），这里的关键是 <strong>设置回调函数，并将其作为 url 的参数</strong>；</li>\n<li>服务端接收到请求后，通过该参数获得回调函数名，并将数据放在参数中将其返回；</li>\n<li>获取数据后就可以通过提前设置的回调函数进一步处理数据。</li>\n</ol>\n<h2 id=\"JSONP实例\"><a href=\"#JSONP实例\" class=\"headerlink\" title=\"JSONP实例\"></a>JSONP实例</h2><p>还是以调用豆瓣读书API为例，通过JSONP调用的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建script标签</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">script.<span class=\"property\">type</span> = <span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定script标签src属性值，同时传参并指定回调函数，此处为onBack</span></span><br><span class=\"line\">script.<span class=\"property\">src</span> = <span class=\"string\">&#x27;https://api.douban.com/v2/book/6548683?callback=onBack&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">head</span>.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onBack</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行上面代码，就可以跨源访问豆瓣API了。</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><ul>\n<li>优点</li>\n</ul>\n<ol>\n<li>兼容性很好，在古老的浏览器也能很好的运行；</li>\n<li>简单，不管通过创建 <code>script</code> 标签获取数据，还是通过回调函数处理获取的数据，都简单明了；</li>\n<li>不需要服务端单独为某个域名做设置（对比CORS方法，下文说明），这在请求自己不受控的资源是特别受用（你总不能要求豆瓣或者某个提供查询天气状况的API提供商单独为你的域名做设置）。</li>\n</ol>\n<ul>\n<li>缺点</li>\n</ul>\n<ol>\n<li>只支持 <code>get</code>；</li>\n<li>潜在的安全问题（大站提供的API可忽略）；</li>\n<li>稳定性存疑。毕竟，使用JSONP访问的资源往往都是别人家的，说不定哪天就关了或者代码有改动。</li>\n</ol>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>主要是在访问不能按自己的需求随意更改的公共API时使用，比如查个天气什么的。</p>\n<h1 id=\"CORS实现跨源通信\"><a href=\"#CORS实现跨源通信\" class=\"headerlink\" title=\"CORS实现跨源通信\"></a>CORS实现跨源通信</h1><p><a href=\"https://fetch.spec.whatwg.org/#http-cors-protocol\">CORS</a>(Cross-Origin Resource Sharing，跨源资源共享)是 W3C 一项推荐标准，定义了在必须访问跨源资源时，浏览器和服务器应该如何通信。   </p>\n<p>其实现方式是，通过使用自定义的HTTP头信息让浏览器和服务器进行通信，进而确定是否允许跨源通信。   </p>\n<p>浏览器向服务器发送请求时会在 Request Headers 中自动添加请求源信息（<code>Origin</code>字段），服务器端通过在 Response Headers 中添加 <code>Access-Control-Allow-Origin</code> 字段，指明允许那些源可以访问。经浏览器检查，如果请求源在服务器允许请求源列表中，则允许请求源从该服务器上的获取资源。   </p>\n<blockquote>\n<p>实际上，浏览器不会完全阻止跨源请求，如果源A要请求源B上的资源，浏览器会将请求到的数据放在 <a href=\"https://en.wikipedia.org/wiki/OSI_model#Layer_3:_Network_Layer\">网络层</a> ，然后检查源A是否在源B允许的请求源列表上，如果没有，浏览器就会触发 <code>XMLHttpRequest</code> 的 <code>error</code> 事件（此处就是跨源错误），同时阻止数据从网络层传送到源A的js代码中。</p>\n</blockquote>\n<h2 id=\"CORS实例\"><a href=\"#CORS实例\" class=\"headerlink\" title=\"CORS实例\"></a>CORS实例</h2><p>实现CORS方法需要服务源做设置，为了模拟这个场景通过Node搭建两个本地服务器，一个做请求源，一个做服务源。   </p>\n<blockquote>\n<p>需要对Node有基本了解，如何使用Node搭建本地服务器不在本文中讨论</p>\n</blockquote>\n<h3 id=\"服务源设置\"><a href=\"#服务源设置\" class=\"headerlink\" title=\"服务源设置\"></a>服务源设置</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入http模块（http是node自带模块，安装node后自带，无需额外安装）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> serv = http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在respnse headers中注明是编码、数据类型</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 允许跨域请求源，端口后面不能有&#x27;/&#x27;</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"string\">&#x27;http://127.0.0.1:7070&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;这是你要的数据：data&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">serv.<span class=\"title function_\">listen</span>(<span class=\"number\">3030</span>, <span class=\"string\">&#x27;127.0.0.1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;服务启动，监听 127.0.0.1:3030&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>上述代码中，关键是在 response headers 中添加 <code>&#39;Access-Control-Allow-Origin&#39;: &#39;http://127.0.0.1:7070&#39;,</code>，据此明确允许访问的源（列表）。如果是开放源，可以将 <code>Access-Control-Allow-Origin</code> 的值设为 <code>&#39;*&#39;</code>，这样任何请求源都可以访问该服务源上的数据。</p>\n<h3 id=\"请求源设置\"><a href=\"#请求源设置\" class=\"headerlink\" title=\"请求源设置\"></a>请求源设置</h3><ul>\n<li>设置静态服务器</li>\n</ul>\n<p>为方便起见，直接通过 <code>http-server</code> 模块搭建静态服务器，目的是通过指定源（此处为<a href=\"http://127.0.0.1:7070）发送请求。安装完\">http://127.0.0.1:7070）发送请求。安装完</a> <code>http-server</code>模块后通过下面命令进行启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http-server -a 127.0.0.1 -p 7070</span><br></pre></td></tr></table></figure>\n<p>这里启动的静态服务器域名为 <code>127.0.0.1</code>， 端口为 <code>7070</code>，协议默认为 <code>http</code>，静态目录就是当前运行命令所在目录，点击事先准备好的请求文件模拟跨域请求。</p>\n<blockquote>\n<p>这里全局安装 <code>http-server</code> 模块后才能直接使用该命令，不过更推荐通过本地（局部）安装，然后通过 <a href=\"https://xiaogliu.github.io/2017/05/13/package.json-instruction/#npm-script\">npm script</a> 启动服务。</p>\n</blockquote>\n<ul>\n<li>设置请求文件</li>\n</ul>\n<p>实际发送请求的代码可以通过多种形式写，原生、axios 或者 jquery，随意，只要请求 url 是上文设置的服务源就好。下面是使用原生方式写的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.<span class=\"property\">status</span> &lt; <span class=\"number\">300</span> || xhr.<span class=\"property\">status</span> === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Error&quot;</span> + xhr.<span class=\"property\">status</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 注明服务源地址</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;http://127.0.0.1:3030/&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"优缺点-1\"><a href=\"#优缺点-1\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><ul>\n<li>优点</li>\n</ul>\n<ol>\n<li>前端不需要改动代码，就像访问同源资源一样；</li>\n<li>没有对请求方法的限制。</li>\n</ol>\n<ul>\n<li>缺点</li>\n</ul>\n<ol>\n<li>存在<a href=\"http://caniuse.com/#search=cors\">兼容性问题</a>：IE10以上。</li>\n<li>最重要的是不能设置 cookie（cookie 遵循同源策略）。</li>\n</ol>\n<h2 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>在服务源可以按照自己的需求更改（即在 response headers 中添加请求源信息）时使用，公司项目一般都是通过CORS方法实现跨源通信的。</p>\n<h2 id=\"待补充\"><a href=\"#待补充\" class=\"headerlink\" title=\"待补充\"></a>待补充</h2><p>涉及到简单请求和复杂请求，其中 preflight 请求是不带任何自定义请求头的，是浏览器自发行为。</p>\n<h1 id=\"通过-Nginx-反向代理\"><a href=\"#通过-Nginx-反向代理\" class=\"headerlink\" title=\"通过 Nginx 反向代理\"></a>通过 Nginx 反向代理</h1><p>这是最好的方法，简单，前后端也不需要做额外更改。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://stackoverflow.com/questions/10636611/how-does-access-control-allow-origin-header-work\">How does Access-Control-Allow-Origin header work?</a><br>【2】<a href=\"https://zhuanlan.zhihu.com/p/25778815\">关于跨域，你想知道的全在这里</a></p>\n","categories":["JavaScript"],"tags":["JavaScript","Node.js"]},{"title":"Vue组件中使用Sass全局变量","url":"https://xiaogliu.github.io/2017/09/09/use-sass-global-variables-in-every-vue-components/","content":"<p>在Vue组件中使用Sass全局变量是项目中常见的需求，比如，网站基本色、常用字号等，这些变量设为全局变量，不仅在开发时更加规范，后期维护也更加便捷。   </p>\n<p>本文介绍的是通过<a href=\"https://github.com/vuejs/vue-cli\">Vue-CLI</a><code>webpack-simple</code>脚手架构建的项目中添加Sass全局变量的方法。在这个脚手架中可以在<code>main.js</code>中引入全局<code>css</code>文件，但直接引入<code>scss</code>文件会报错。下面介绍两种引入Sass全局变量的方法（第一种是常规做法，只做介绍用，实际项目中推荐使用配置Webpack的方法）：</p>\n<h1 id=\"每个组件中单独引用\"><a href=\"#每个组件中单独引用\" class=\"headerlink\" title=\"每个组件中单独引用\"></a>每个组件中单独引用</h1><p>假设Sass全局变量保存在<code>global.scss</code>文件中，路径为<code>../path/global.scss</code>,在需要引用该全局变量的组件中通过<code>import</code>引入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// some vue component</span><br><span class=\"line\">&lt;template lang=&quot;html&quot;&gt;</span><br><span class=\"line\">&lt;!-- some code --&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">// some code</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class=\"line\">// 引入sass全局变量</span><br><span class=\"line\">import ../path/global.scss;</span><br><span class=\"line\"></span><br><span class=\"line\">// other code</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>这样做的弊端显而易见：每个组件需要单独写<code>import</code>，除了代码重复，如果组件间目录结构不一样，路径还要小心调整。虽然可以设置路径变量防止路径出错，但重复的问题还是没有解决。<strong>所以不推荐这种方法</strong>。</p>\n<h1 id=\"更改Webpack配置文件\"><a href=\"#更改Webpack配置文件\" class=\"headerlink\" title=\"更改Webpack配置文件\"></a>更改Webpack配置文件</h1><p>推荐项目中使用这种方法，只需在Webpack中配置一次，项目中所有Vue组件都可以直接使用Sass全局变量，不需要通过<code>import</code>方式重复引用。</p>\n<h2 id=\"webpack-simple\"><a href=\"#webpack-simple\" class=\"headerlink\" title=\"webpack-simple\"></a>webpack-simple</h2><p>这里是使用Vue脚手架<code>webpack-simple</code>中配置的方法：</p>\n<ol>\n<li>安装<a href=\"https://github.com/shakacode/sass-resources-loader\">sass-resources-loader</a>   </li>\n</ol>\n<p>官方介绍该loader的作用：This loader will <code>@import</code> your SASS resources into every <code>required</code> SASS module. So you can use your shared variables &amp; mixins across all SASS styles without manually importing them in each file.   </p>\n<p>但是在<code>webpack-simple</code>脚手架中按照Github主页上的介绍，并没有成功引入Sass全局变量。。。而是通过修改默认<code>vue-loader</code>解决的</p>\n<ol start=\"2\">\n<li>修改默认vue-loader</li>\n</ol>\n<p>在Webpack配置文件中修改后的整个<code>vue-loader</code>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js中vue-loader部分代码</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">  <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">loaders</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">sass</span>: [</span><br><span class=\"line\">          <span class=\"string\">&#x27;vue-style-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// postcss-loader非必须</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;sass-loader?indentedSyntax=1&#x27;</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;sass-resources-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">// 需更改为项目中实际scss文件路径</span></span><br><span class=\"line\">              <span class=\"attr\">resources</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../path/global.scss&#x27;</span>),</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">scss</span>: [</span><br><span class=\"line\">          <span class=\"string\">&#x27;vue-style-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// postcss-loader非必须</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;sass-loader&#x27;</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;sass-resources-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">// 需更改为项目中实际scss文件路径</span></span><br><span class=\"line\">              <span class=\"attr\">resources</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../path/global.scss&#x27;</span>),</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>经过上述配置，项目中所有Vue组件，只要<code>&lt;style lang=&quot;scss&quot;&gt;</code> (或者sass)标签中的代码都可以使用在<code>global.scss</code>中定义的全局变量了，等效将<code>global.scss</code>引入进来。</p>\n<h2 id=\"nuxt\"><a href=\"#nuxt\" class=\"headerlink\" title=\"nuxt\"></a>nuxt</h2><p>这里是使用<a href=\"https://nuxtjs.org/\">Nuxt.js</a>时配置方法：</p>\n<ol>\n<li><p>同样需要安装<a href=\"https://github.com/shakacode/sass-resources-loader\">sass-resources-loader</a>   </p>\n</li>\n<li><p>在<code>nuxt.config.js</code>中进行如下配置：   </p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>).<span class=\"property\">resolve</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isVueRule</span> = (<span class=\"params\">rule</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rule.<span class=\"property\">test</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;/\\\\.vue$/&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isSASSRule</span> = (<span class=\"params\">rule</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;/\\\\.sass$/&#x27;</span>, <span class=\"string\">&#x27;/\\\\.scss$/&#x27;</span>].<span class=\"title function_\">indexOf</span>(rule.<span class=\"property\">test</span>.<span class=\"title function_\">toString</span>()) !== -<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sassResourcesLoader = &#123;</span><br><span class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;sass-resources-loader&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">resources</span>: [</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;sass/variables.sass&#x27;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">css</span>: [<span class=\"string\">&#x27;~/sass/main.scss&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">    extend (config) &#123;</span><br><span class=\"line\">      config.<span class=\"property\">module</span>.<span class=\"property\">rules</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">rule</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isVueRule</span>(rule)) &#123;</span><br><span class=\"line\">          rule.<span class=\"property\">query</span>.<span class=\"property\">loaders</span>.<span class=\"property\">sass</span>.<span class=\"title function_\">push</span>(sassResourcesLoader)</span><br><span class=\"line\">          rule.<span class=\"property\">query</span>.<span class=\"property\">loaders</span>.<span class=\"property\">scss</span>.<span class=\"title function_\">push</span>(sassResourcesLoader)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isSASSRule</span>(rule)) &#123;</span><br><span class=\"line\">          rule.<span class=\"property\">use</span>.<span class=\"title function_\">push</span>(sassResourcesLoader)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://github.com/vuejs/vue-loader/issues/328\">Load a global settings.scss file in every vue component?</a><br>【2】<a href=\"https://github.com/nuxt/nuxt.js/issues/1092\">Enable pre-processors of global scss variables</a><br>【3】<a href=\"https://vue-loader.vuejs.org/en/configurations/pre-processors.html#loading-a-global-settings-file\">Using Pre-Processors — Loading a global settings file</a>   </p>\n","categories":["Vue"],"tags":["Vue","Webpack"]},{"title":"Atom配置","url":"https://xiaogliu.github.io/2017/08/27/atom-configuration/","content":"<p>用 vscode 很长一段时间，因为相比 atom，vscode 占用内存和 CPU 更少，并且体积也比 atom 小很多。但是 vscode 耗电量太大了，自己经常带笔记本出去不带电源，如果打开 vscode 电量消耗太快。所以，又用回 atom（2018-5）。</p>\n<h1 id=\"编辑器配置\"><a href=\"#编辑器配置\" class=\"headerlink\" title=\"编辑器配置\"></a>编辑器配置</h1><h2 id=\"Non-Word-Charactors\"><a href=\"#Non-Word-Charactors\" class=\"headerlink\" title=\"Non Word Charactors\"></a>Non Word Charactors</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/\\()&quot;&#x27;:,.;&lt;&gt;~!@#$%^&amp;*|+=[]&#123;&#125;`?…</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>双击选择文本时中划线<code>-</code>作为单词的一部分，不作为分割依据</p>\n</blockquote>\n<h2 id=\"Preferred-Line-Length\"><a href=\"#Preferred-Line-Length\" class=\"headerlink\" title=\"Preferred Line Length\"></a>Preferred Line Length</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1000</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不一定是 200，主要不想看到编辑器中的分割线，大于编辑器能显示的最大字符就好</p>\n</blockquote>\n<h2 id=\"Show-Indent-Guide\"><a href=\"#Show-Indent-Guide\" class=\"headerlink\" title=\"Show Indent Guide\"></a>Show Indent Guide</h2><p>复选框打钩，可以显示对齐线。</p>\n<h1 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h1><h2 id=\"自定义快捷键配置如下：\"><a href=\"#自定义快捷键配置如下：\" class=\"headerlink\" title=\"自定义快捷键配置如下：\"></a>自定义快捷键配置如下：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;atom-text-editor&#x27;</span>:</span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-alt-i&#x27;</span>:        <span class=\"string\">&#x27;editor:auto-indent&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;ctrl-shift-cmd-m&#x27;</span>: <span class=\"string\">&#x27;markdown-preview:toggle&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># markdown-writer keymap</span></span><br><span class=\"line\"><span class=\"string\">&#x27;.platform-darwin atom-text-editor:not([mini])&#x27;</span>:</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift-cmd-K&#x27;</span>: <span class=\"string\">&#x27;markdown-writer:insert-link&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;shift-cmd-I&#x27;</span>: <span class=\"string\">&#x27;markdown-writer:insert-image&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-v&#x27;</span>:       <span class=\"string\">&#x27;markdown-writer:insert-image-clipboard&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-i&#x27;</span>:       <span class=\"string\">&#x27;markdown-writer:toggle-italic-text&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-b&#x27;</span>:       <span class=\"string\">&#x27;markdown-writer:toggle-bold-text&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;cmd-&#x27;&quot;</span>:       <span class=\"string\">&#x27;markdown-writer:toggle-code-text&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-k&#x27;</span>:       <span class=\"string\">&#x27;markdown-writer:toggle-keystroke-text&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-h&#x27;</span>:       <span class=\"string\">&#x27;markdown-writer:toggle-strikethrough-text&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;ctrl-alt-1&#x27;</span>:  <span class=\"string\">&#x27;markdown-writer:toggle-h1&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;ctrl-alt-2&#x27;</span>:  <span class=\"string\">&#x27;markdown-writer:toggle-h2&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;ctrl-alt-3&#x27;</span>:  <span class=\"string\">&#x27;markdown-writer:toggle-h3&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;ctrl-alt-4&#x27;</span>:  <span class=\"string\">&#x27;markdown-writer:toggle-h4&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;ctrl-alt-5&#x27;</span>:  <span class=\"string\">&#x27;markdown-writer:toggle-h5&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;shift-cmd-O&#x27;</span>: <span class=\"string\">&#x27;markdown-writer:toggle-ol&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;shift-cmd-U&#x27;</span>: <span class=\"string\">&#x27;markdown-writer:toggle-ul&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;shift-cmd-&gt;&#x27;</span>: <span class=\"string\">&#x27;markdown-writer:toggle-blockquote&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;shift-cmd-&#x27;&quot;</span>: <span class=\"string\">&#x27;markdown-writer:toggle-codeblock-text&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-j cmd-p&#x27;</span>: <span class=\"string\">&#x27;markdown-writer:jump-to-previous-heading&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-j cmd-n&#x27;</span>: <span class=\"string\">&#x27;markdown-writer:jump-to-next-heading&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-j cmd-d&#x27;</span>: <span class=\"string\">&#x27;markdown-writer:jump-to-reference-definition&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;cmd-j cmd-t&#x27;</span>: <span class=\"string\">&#x27;markdown-writer:jump-to-next-table-cell&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># enable emmet in .vue file</span></span><br><span class=\"line\"><span class=\"string\">&#x27;atom-text-editor[data-grammar~=&quot;vue&quot;]:not([mini])&#x27;</span>:</span><br><span class=\"line\">  <span class=\"string\">&#x27;tab&#x27;</span>: <span class=\"string\">&#x27;emmet:expand-abbreviation-with-tab&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"系统默认常用快捷键\"><a href=\"#系统默认常用快捷键\" class=\"headerlink\" title=\"系统默认常用快捷键\"></a>系统默认常用快捷键</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>toggle 目录树</td>\n<td>cmd + \\</td>\n</tr>\n<tr>\n<td>在当前行的下一行插入一空行</td>\n<td>cmd + enter</td>\n</tr>\n<tr>\n<td>在项目中搜索文件</td>\n<td>cmd + p</td>\n</tr>\n<tr>\n<td>调出命令窗口</td>\n<td>cmd + shift + p</td>\n</tr>\n<tr>\n<td>tab 间切换</td>\n<td>cmd + 数字 or ctrl + tab</td>\n</tr>\n<tr>\n<td>全局搜索</td>\n<td>cmd + shift + f</td>\n</tr>\n<tr>\n<td>当前行复制到下一行</td>\n<td>cmd + shift + d</td>\n</tr>\n<tr>\n<td>选中相同字符</td>\n<td>cmd + d</td>\n</tr>\n<tr>\n<td>删除当前行</td>\n<td>ctrl + shift + k</td>\n</tr>\n<tr>\n<td>通过 prettier 格式化</td>\n<td>ctrl + options + f</td>\n</tr>\n<tr>\n<td>通过 atom-beautify 格式化</td>\n<td>ctrl + options + b</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>显示隐藏不可见字符操作：首先<code>cmd + shift + p</code>调出命令行，然后在搜索框输入<code>invisible</code>，选中<code>Window Toggle Invisibles</code>。这在确认编辑器中是否混用<code>tab</code>，<code>space</code>，或者查看行结尾是 Unix 类型还是 Windows 类型时很便捷，不用去设置里设置。</p>\n</blockquote>\n<h1 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h1><h2 id=\"必备\"><a href=\"#必备\" class=\"headerlink\" title=\"必备\"></a>必备</h2><p><a href=\"https://atom.io/packages/Sublime-Style-Column-Selection\">sublime-style-column-selection</a>：支持列选择；<br><a href=\"https://atom.io/packages/prettier-atom\">prettier-atom</a>：格式化代码；<br><a href=\"https://atom.io/packages/atom-beautify\">atom-beautify</a>：格式化代码（以 prettier 为主，没有 prettier 时用，同时在 setting 设置 vue 的格式化插件为 prettier-atom）；<br><a href=\"https://atom.io/packages/linter-eslint\">linter-eslint</a>：js 检查，可设置和 prettier 配合使用（还有其他相关依赖，atom 会提示安装）；<br><del><a href=\"https://atom.io/packages/atom-terminal\">atom-terminal</a>：在当前目录打开终端；</del><br><a href=\"https://atom.io/packages/highlight-selected\">highlight-selected</a>：自动高亮选中的相同字符；<br><del><a href=\"https://atom.io/packages/minimap\">minimap</a>：代码缩略地图；</del><br><a href=\"https://github.com/magbicaleman/open-in-browser\">open-in-browser</a>：在浏览器中打开文件，主要针对 html</p>\n<h2 id=\"语言相关\"><a href=\"#语言相关\" class=\"headerlink\" title=\"语言相关\"></a>语言相关</h2><p><a href=\"https://atom.io/packages/emmet\">emmet</a>：编写 html 神奇，强大的自动补全（<strong>vue 组件中使用需更改自定义快捷键配置，见上文快捷键配置</strong>）；<br><a href=\"https://atom.io/packages/markdown-writer\">markdown-writer</a>：书写 markdown 利器，支持各种快捷键（<strong>需自定义快捷键，见上文快捷键配置</strong>）；<br><a href=\"https://atom.io/packages/language-vue\">language-vue</a>：Vue 语法高亮；<br><a href=\"https://atom.io/packages/pigments\">pigments</a>：CSS 颜色高亮；<br><a href=\"https://atom.io/packages/atom-typescript\">atom-typescript</a>：typescript 颜色高亮；<br><a href=\"https://atom.io/packages/language-ejs\">language-ejs</a>：ejs 颜色高亮；</p>\n<blockquote>\n<p>vue 的 template 不能设置自定义规则格式化，再另安装插件感觉没必要，但支持手动批量缩进，见自定义快捷键。</p>\n</blockquote>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><a href=\"https://atom.io/packages/file-icons\">file-icons</a>：显示文件类型图标；<br><a href=\"https://atom.io/packages/docblockr\">docblockr</a>：快速注释；<br><a href=\"https://atom.io/packages/autocomplete-paths\">autocomplete-paths</a>：路径不全，vue 中貌似 not working；<br><a href=\"https://atom.io/packages/script\">script</a>：选中代码即可在 atom 中返回执行结果；<br><a href=\"https://atom.io/packages/merge-conflicts\">merge-conflicts</a>：处理冲突的文件（还没用过）；</p>\n<h1 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h1><p><strong>UI Theme</strong>： one dark;<br><del><strong>Syntax Theme</strong>: Monokai。</del><br><strong>Syntax Theme</strong>: one dark。</p>\n<blockquote>\n<p><a href=\"https://atom.io/themes/monokai\">Monokai</a>主题需要单独安装</p>\n</blockquote>\n<h1 id=\"其他-1\"><a href=\"#其他-1\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"windows-下默认安装失败\"><a href=\"#windows-下默认安装失败\" class=\"headerlink\" title=\"windows 下默认安装失败\"></a>windows 下默认安装失败</h2><p>如果在 windows 下默认安装失败，提示<code>Path too long exception</code>，下载安装包后参考下面解决方式：</p>\n<ol>\n<li>用解压文件打开 AtomSetup.exe；</li>\n<li>将文件内容导出到相对较短的路径中，比如<code>C:\\Temp</code>；</li>\n<li>打开 CMD，进入刚才放 Atom 导出文件的文件目录；</li>\n<li>运行<code>Update.exe --install=.</code> 。</li>\n</ol>\n<h2 id=\"更新说明\"><a href=\"#更新说明\" class=\"headerlink\" title=\"更新说明\"></a>更新说明</h2><p>2017-09-16 更新为基于 Mac 进行的配置。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://github.com/atom/atom/issues/5109\">Path too long exception on Windows install</a><br>【2】<a href=\"https://gxnotes.com/article/71037.html\">Atom 编辑器中的自动缩进代码</a><br>【3】<a href=\"https://github.com/zhuochun/md-writer/wiki/Settings-for-Keymaps\">zhuochun/md-writer-Settings for Keymaps</a></p>\n","categories":["Tools"],"tags":["atom"]},{"title":"获取JS对象属性（自身/原型/可枚举/不可枚举）","url":"https://xiaogliu.github.io/2017/08/06/get-js-object-properties/","content":"<p>在看JS构造函数、原型、原型链、继承相关内容时对对象的属性，比如<code>[[Prototype]]</code>, <code>constructor</code>, <code>prototype</code>有些云里雾里，因为画原型链时，使用的是对象的自身属性（own property），但实际使用时，对象中又能继承原型属性（prototype property）。</p>\n<p>还有些特点会让自己更加迷惑，比如“JS高程”提到任何对象都有<code>constructor</code>属性，但实际这里的<code>constructor</code>属性实际是原型属性。</p>\n<p>学习当中如果能通过代码验证，印象会更加深刻，所以这篇文章记录下怎么获取对象的四种属性：自身可枚举属性，自身所有属性（可枚举+不可枚举），自身+原型可枚举属性，自身+原型所有属性（可枚举+不可枚举），以便在学习当中加以验证。</p>\n<blockquote>\n<p>关于<code>constructor</code>属性为什么定义在原型中，可以参考这个问答<a href=\"https://stackoverflow.com/questions/8093057/javascript-inheritance-and-the-constructor-property\">JavaScript inheritance and the constructor property</a></p>\n</blockquote>\n<h1 id=\"自身可枚举属性\"><a href=\"#自身可枚举属性\" class=\"headerlink\" title=\"自身可枚举属性\"></a>自身可枚举属性</h1><h2 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5+\"></a>ES5+</h2><p>如果支持ES5+的浏览器（即IE8以上），可以通过JS内建方法：</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj); <span class=\"comment\">// 返回的是所有属性组成的数组</span></span><br></pre></td></tr></table></figure>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建原型属性</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;xiaog&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在person实例中创建不可枚举属性&quot;job&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&#x27;job&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;FEDer&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只能返回自身可枚举属性</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(person); <span class=\"comment\">// [&quot;name&quot;]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>题外话：如果使用<code>Object.defineProperty()</code>方法，如果省略指明<code>configurable</code>等属性值，默认为<code>false</code>。</p>\n</blockquote>\n<h2 id=\"ES3\"><a href=\"#ES3\" class=\"headerlink\" title=\"ES3+\"></a>ES3+</h2><p>如果需要兼容IE8及以下浏览器，可使用<code>for...in</code>。</p>\n<blockquote>\n<p><code>for...in</code>是默认枚举自身及原型中继承来的所有可枚举属性，下面讲完“自身/原型可枚举属性”再看怎么通过<code>for...in</code>来枚举“自身可枚举属性”</p>\n</blockquote>\n<h1 id=\"自身-原型可枚举属性\"><a href=\"#自身-原型可枚举属性\" class=\"headerlink\" title=\"自身+原型可枚举属性\"></a>自身+原型可枚举属性</h1><p>如上所述，通过<code>for..in</code>实现：   </p>\n<p>语法：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (property <span class=\"keyword\">in</span> object) &#123; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>举例：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建原型属性</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;xiaog&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在person实例中创建不可枚举属性&quot;job&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&#x27;job&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;FEDer&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;xiaog&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只能打印自身+原型中可枚举属性</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p); <span class=\"comment\">// &quot;name&quot;, &quot;age&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-hasOwnProperty\"><a href=\"#Object-hasOwnProperty\" class=\"headerlink\" title=\"Object.hasOwnProperty()\"></a>Object.hasOwnProperty()</h2><p>结合<code>Object.hasOwnProperty()</code>方法可以通过<code>for...in</code>实现对自身可枚举属性的遍历：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建原型属性</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;xiaog&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在person实例中创建不可枚举属性&quot;job&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&#x27;job&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;FEDer&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只有是自身属性时，打印</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"title function_\">hasOwnProperty</span>(p)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p); <span class=\"comment\">// &quot;name&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"自身所有属性\"><a href=\"#自身所有属性\" class=\"headerlink\" title=\"自身所有属性\"></a>自身所有属性</h1><p>通过JS内建方法即可实现：</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(obj);</span><br></pre></td></tr></table></figure>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建原型属性</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;xiaog&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在person实例中创建不可枚举属性&quot;job&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&#x27;job&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;FEDer&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ownAllProperties = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以打印自身可枚举属性&quot;name&quot;以及不可枚举属性&quot;job&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ownAllProperties); <span class=\"comment\">// [&quot;name&quot;, &quot;job&quot;]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"自身-原型所有属性\"><a href=\"#自身-原型所有属性\" class=\"headerlink\" title=\"自身+原型所有属性\"></a>自身+原型所有属性</h1><p>想要获取自身+原型所有属性没有内建的JS方法，可通过下面代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取所有属性方法封装</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAllPropertyNames</span>(<span class=\"params\"> obj </span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> props = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>( obj ).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\"> prop </span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( props.<span class=\"title function_\">indexOf</span>( prop ) === -<span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">          props.<span class=\"title function_\">push</span>( prop );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> ( obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>( obj ) );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> props;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建原型属性</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;xiaog&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在person实例中创建不可枚举属性&quot;job&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&#x27;job&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;FEDer&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> allPropertiesNames = <span class=\"title function_\">getAllPropertyNames</span>(person);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(allPropertiesNames); <span class=\"comment\">// 返回的数组中会包括&quot;name&quot;, &quot;job&quot;, &quot;age&quot;, 还有原型对象中其他默认不可枚举属性</span></span><br></pre></td></tr></table></figure>\n<p>方法<code>getAllPropertyNames</code>可以简化成下面的代码：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAllPropertyNames</span>(<span class=\"params\"> obj </span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> props = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      props= props.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>( obj ));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> ( obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>( obj ) );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> props;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">MDN for…in</a><br>【2】<a href=\"https://stackoverflow.com/questions/7306669/how-to-get-all-properties-values-of-a-javascript-object-without-knowing-the-key\">How to get all properties values of a Javascript Object (without knowing the keys)?</a><br>【3】<a href=\"https://stackoverflow.com/questions/675231/how-do-i-access-properties-of-a-javascript-object-if-i-dont-know-the-names\">How do I access properties of a javascript object if I don’t know the names?</a><br>【4】<a href=\"https://stackoverflow.com/questions/8024149/is-it-possible-to-get-the-non-enumerable-inherited-property-names-of-an-object\">Is it possible to get the non-enumerable inherited property names of an object?</a><br>【5】<a href=\"https://stackoverflow.com/questions/8093057/javascript-inheritance-and-the-constructor-property\">JavaScript inheritance and the constructor property</a>   </p>\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"检测JS对象类型","url":"https://xiaogliu.github.io/2017/07/29/check-js-object-type/","content":"<p>这里检测对象类型不是指<code>typeof</code>操作符返回的六种对象类型（string, number, boolean, object, function, undefined），而是指要区分出具体的引用类型(<code>Object</code>, <code>Array</code>, <code>Date</code>, <code>RegExp</code>, <code>Function</code>)以及<code>null</code>。测试结果具体见下表</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">测试对象</th>\n<th style=\"text-align:left\">返回结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">undefined</td>\n<td style=\"text-align:left\">undefined</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">null</td>\n<td style=\"text-align:left\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">number</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">“”</td>\n<td style=\"text-align:left\">string</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{}</td>\n<td style=\"text-align:left\">object</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[]</td>\n<td style=\"text-align:left\">array</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">new Date()</td>\n<td style=\"text-align:left\">date</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/.css$/</td>\n<td style=\"text-align:left\">regexp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">function () {}</td>\n<td style=\"text-align:left\">function</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">window</td>\n<td style=\"text-align:left\">global</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>JS更多对象类型参见<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></p>\n</blockquote>\n<h1 id=\"检测对象是否是数组\"><a href=\"#检测对象是否是数组\" class=\"headerlink\" title=\"检测对象是否是数组\"></a>检测对象是否是数组</h1><p>工作中经常有需求检测一个对象是否是数组，常用方法有两种：</p>\n<h2 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray()\"></a>Array.isArray()</h2><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array.isArray(obj)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>举例：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([]); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"number\">1</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"instanceof操作符\"><a href=\"#instanceof操作符\" class=\"headerlink\" title=\"instanceof操作符\"></a>instanceof操作符</h2><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>举例</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用instanceof注意事项\"><a href=\"#使用instanceof注意事项\" class=\"headerlink\" title=\"使用instanceof注意事项\"></a>使用instanceof注意事项</h2><p><strong>如果变量是<code>String</code>, <code>Number</code>或者<code>Boolean</code>类型，使用<code>instanceof</code>操作符始终返回<code>false</code></strong>，见下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">b <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>这涉及<strong>基本包装类型</strong>的知识点，这里不做展开，可参考《JavaScript高级程序设计（第3版）》对<em>基本包装类型</em>的解释以及《The Principles of Object-Oriented JavaScript》对<em>Primitive wrapper Types</em>的解释。  </p>\n<h1 id=\"检测对象类型通用方法\"><a href=\"#检测对象类型通用方法\" class=\"headerlink\" title=\"检测对象类型通用方法\"></a>检测对象类型通用方法</h1><p>如果要判断某个对象是否是某种具体引用类型，使用<code>instanceof</code>操作符就可以解决。但如果是想知道一个对象的具体类型（具体哪种基本类型、引用类型），使用<code>instanceof</code>就不合理了，总不能一个个去试。</p>\n<p>并且，<code>instanceof</code>对于基本数据类型无能为力。</p>\n<h2 id=\"使用Object-prototype-toString-call-obj\"><a href=\"#使用Object-prototype-toString-call-obj\" class=\"headerlink\" title=\"使用Object.prototype.toString.call(obj)\"></a>使用Object.prototype.toString.call(obj)</h2><p>使用<code>Object.prototype.toString.call(obj)</code>可以判断某个对象的具体类型。</p>\n<ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>该方法返回字符串，其中包含对象类型，格式如下”[object type]”，其中type为对象具体类型</p>\n</blockquote>\n<ul>\n<li>举例</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([]); <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()); <span class=\"comment\">// &quot;[object Date]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(&#123;&#125;); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>使用<code>Object.prototype.toString.call(obj)</code>可以检测对象的具体类型，但性能损耗，如果要频繁使用，可以对该方法封装后使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装检测对象类型方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> type = (<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">global</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 下面六行注释依次为</span></span><br><span class=\"line\"><span class=\"comment\">         * // null</span></span><br><span class=\"line\"><span class=\"comment\">         * // window in browser or global in nodejs</span></span><br><span class=\"line\"><span class=\"comment\">         * // basic: string, boolean, number, undefined, function</span></span><br><span class=\"line\"><span class=\"comment\">         * // DOM element</span></span><br><span class=\"line\"><span class=\"comment\">         * // cached. date, regexp, error, object, array, math</span></span><br><span class=\"line\"><span class=\"comment\">         * // get XXXX from [object XXXX], and cache it</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span> ? <span class=\"string\">&#x27;null&#x27;</span></span><br><span class=\"line\">            : obj === <span class=\"variable language_\">global</span> ? <span class=\"string\">&#x27;global&#x27;</span></span><br><span class=\"line\">            : (key = <span class=\"keyword\">typeof</span> obj) !== <span class=\"string\">&#x27;object&#x27;</span> ? key</span><br><span class=\"line\">            : obj.<span class=\"property\">nodeType</span> ? <span class=\"string\">&#x27;object&#x27;</span></span><br><span class=\"line\">            : cache[key = (&#123;&#125;).<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj)]</span><br><span class=\"line\">            || (cache[key] = key.<span class=\"title function_\">slice</span>(<span class=\"number\">8</span>, -<span class=\"number\">1</span>).<span class=\"title function_\">toLowerCase</span>());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;(<span class=\"variable language_\">this</span>));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"title function_\">type</span>(&#123;&#125;); <span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"title function_\">type</span>([]); <span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"title function_\">type</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()); <span class=\"comment\">// Date</span></span><br><span class=\"line\"><span class=\"title function_\">type</span>(<span class=\"regexp\">/\\.css$/</span>); <span class=\"comment\">// Regexp</span></span><br></pre></td></tr></table></figure>\n<p>参考资料：<br>【1】<a href=\"https://stackoverflow.com/questions/7893776/the-most-accurate-way-to-check-js-objects-type\">The most accurate way to check JS object’s type?</a></p>\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"通过PostCSS自动添加CSS3属性前缀","url":"https://xiaogliu.github.io/2017/07/19/using-postcss-add-css-prefix/","content":"<p>有点标题党的感觉，给CSS3属性自动添加前缀只是<a href=\"https://github.com/postcss/postcss\">PostCSS</a>众多功能中的一种，但正是因为这项功能，使我开始使用PostCSS。本文主要介绍PostCSS是什么、为什么要使用以及怎么使用。</p>\n<h1 id=\"PostCSS是什么\"><a href=\"#PostCSS是什么\" class=\"headerlink\" title=\"PostCSS是什么\"></a>PostCSS是什么</h1><p>PostCSS是通过JS插件转化CSS样式的一个库，这种转化包括但不限于检查CSS语法、使用变量和mixins、将CSS语法转化为浏览器兼容模式（比如常用的添加浏览器厂商前缀）等等。   </p>\n<p>尽管PostCSS可以当做CSS预处理器来使用，就像SASS和LESS一样，但PostCSS能做的远不止如此，因为PostCSS的功能是可以通过插件进行扩展的。   </p>\n<p>目前而言，PostCSS最吸引我的是因为它可以提供SASS和LESS不能（轻易）完成的功能：<strong>给CSS3属性添加浏览器厂商前缀，转化Flex布局使其兼容IE10以下浏览器</strong>。   </p>\n<p>如果你习惯使用SASS语法，同时又想使用PostCSS给对CSS进行处理，也是可以做到的，这也是本篇文章重点介绍的。</p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><p>目前流行的使用方式是通过Gulp或者Webpack使用。   </p>\n<h2 id=\"通过Gulp使用\"><a href=\"#通过Gulp使用\" class=\"headerlink\" title=\"通过Gulp使用\"></a>通过Gulp使用</h2><ul>\n<li>简单使用   </li>\n</ul>\n<p>先贴出通过使用<a href=\"https://github.com/7rulnik/postcss-flexibility\">flexibility</a>插件，转换Flex语法兼容IE10以下浏览器的gulpfile.js文件内容：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入PostCSS</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-postcss&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过require引入PostCSS所需插件，这里除了引入flexibility</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;postcss&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/main.css&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">postcss</span>([<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-flexibility&#x27;</span>)]))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist/&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>通过<code>postcss([ require(&#39;postcss-flexibility&#39;) ])</code>便可以引入<code>postcss-flexibility</code>插件对CSS进行处理了。其中插件列表是一个数组，可以引入多个，比如还想给CSS3属性添加前缀可以这样写：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">postcss</span>([<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-flexibility&#x27;</span>), <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>)]))</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>插件使用前需要先通过npm进行安装。   </p>\n</blockquote>\n<ul>\n<li>结合SASS使用   </li>\n</ul>\n<p>如果已经习惯使用SASS语法写CSS，PostCSS也可以处理经过SASS转化后的CSS文件，gulpfile.js文件配置如下（这里也引入了添加CSS3属性前缀的插件）：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入PostCSS</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-postcss&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入SASS</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sass&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过require引入PostCSS所需插件，这里除了引入flexibility, autoprefixer插件</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;postcss&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/main.css&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">postcss</span>([<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-flexibility&#x27;</span>), <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>)]))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist/&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完整代码可参考这个仓库：<a href=\"https://github.com/xiaogliu/postcss_example\">postcss_example</a>   </p>\n<h2 id=\"通过Webpack使用\"><a href=\"#通过Webpack使用\" class=\"headerlink\" title=\"通过Webpack使用\"></a>通过Webpack使用</h2><p>待完善。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://github.com/postcss/postcss\">PostcCSS-Github仓库</a><br>【2】<a href=\"https://www.w3cplus.com/PostCSS/postcss-deep-dive-what-you-need-to-know.html\">PostCSS深入学习：你需要知道什么</a></p>\n","categories":["CSS"],"tags":["工程化","CSS","PostCSS","兼容性"]},{"title":"Async函数和Promise对象","url":"https://xiaogliu.github.io/2017/07/16/async-function-promise-object/","content":"<p>Async函数已写入ES7标准中，通过async函数可以更友好直观的写异步代码。调用Async函数时返回的是一个Promise对象，所以，介绍Async函数之前，有必要先介绍下Promise对象。</p>\n<h1 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h1><h2 id=\"为什么要用\"><a href=\"#为什么要用\" class=\"headerlink\" title=\"为什么要用\"></a>为什么要用</h2><p>在实际工作中，经常会遇到这样的场景：接口A需要的入参是接口B响应中的部分或全部内容，这时在执行请求接口A的代码时就需要等待接口B响应完成以后再执行，这就涉及<strong>异步调用</strong>。   </p>\n<p>异步调用最开始是通过回调函数进行的，但当代码依赖增多时，回调函数的写法就会变得难以维护（比如极端情况，接口A的入参依赖接口B的响应，接口B的入参依赖接口C的响应，接口C的入参依赖接口D的响应…）。而Promise对象就是解决<strong>回调函数地狱</strong>（callback hell。回调函数本身没有问题，但嵌套多个回调函数就变得难以维护了）的问题：它可以用类似写同步代码的模式写异步调用。</p>\n<blockquote>\n<p>这里异步调用不是说JS可以异步执行：JS是单线程（single-threaded），总是同步执行，但有多种多样的回调机制（callback mechanisms）。通过回调机制，可以实现异步操作。注意，回调函数只是多种多样的回调机制中的一种，正在介绍的Promise对象和将要介绍的Async函数都是回调机制的一种。</p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p><code>promise</code>是一个对象，它可以用于表示一个异步操作的执行结果（成功或者失败）并将执行结果返回。</p>\n<blockquote>\n<p>promise，顾名思义，“承诺”将来的某个时间点返回结果。</p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n<p>既然<code>promise</code>是对象，便可通过构造函数创建<code>promise</code>实例，Promise构造函数接受一个函数作为参数，而作为Promise的入参，该函数又接受两个函数作为入参：其中第一个函数（通常命名为<code>resolve</code>）在<code>promise</code>返回预期结果时调用，第二个函数（通常命名为<code>reject</code>）在不能如期返回结果时调用。</p>\n<blockquote>\n<p>为便于描述，以下如预期结果称为resolve的情况，不然称为reject的情况。</p>\n</blockquote>\n<h2 id=\"常用方法then-与catch\"><a href=\"#常用方法then-与catch\" class=\"headerlink\" title=\"常用方法then()与catch()\"></a>常用方法<code>then()</code>与<code>catch()</code></h2><p>通常，promise 实例和then()以及catch()方法一起使用。</p>\n<ul>\n<li><code>then()</code>方法返回一个<code>promise</code>，最多接受两个函数作为参数，分别处理resolve和reject两种情况：第一个参数是promise resolve时执行的回调函数，并且resolve的值作为入参传入回调函数；第二个参数是promise reject时调用的回调函数，并且将reject的原因作为参数传入回调函数。</li>\n</ul>\n<blockquote>\n<p>更常用的是resolve时使用then()方法，reject时使用catch()方法。</p>\n</blockquote>\n<p>语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">p.<span class=\"title function_\">then</span>(onFulfilled[, onRejected]);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// fulfillment</span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// rejection</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>catch()</code>方法也返回一个<code>promise</code>，但只接受一个函数作为参数，只在reject时执行。</li>\n</ul>\n<p>语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">p.<span class=\"title function_\">catch</span>(onRejected);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// rejection</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"举几个例子\"><a href=\"#举几个例子\" class=\"headerlink\" title=\"举几个例子\"></a>举几个例子</h2><ul>\n<li>模拟异步请求：生成随机数，如果随机数小于1则认为是resolve的情况，执行resolve函数；如果大于1，则认为reject，执行reject函数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise starting&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeOut = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;the random number is &#x27;</span> + timeOut + <span class=\"string\">&#x27;...&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模拟异步执行需要的时间</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeOut &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;返回结果如预期，调用resolve()...&#x27;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;200 OK&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;没得到预期返回结果，调用reject()...&#x27;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;请求超时：&#x27;</span> + timeOut + <span class=\"string\">&#x27;second ...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, timeOut * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolveValue</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resolveValue);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">rejectReason</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rejectReason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模拟promise强大之处：链式调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;直接返回resolve的promise&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> multiply = <span class=\"keyword\">function</span> (<span class=\"params\">input</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;计算&#x27;</span> + input + <span class=\"string\">&#x27;*&#x27;</span> + input + <span class=\"string\">&#x27;...&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置1s的计算延时，同样，认为为resolve的情况</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">1000</span>, input * input);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"keyword\">function</span> (<span class=\"params\">input</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;计算&#x27;</span> + input + <span class=\"string\">&#x27;+&#x27;</span> + input + <span class=\"string\">&#x27;...&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">1000</span>, input + input);   </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(multiply)</span><br><span class=\"line\"> .<span class=\"title function_\">then</span>(add)</span><br><span class=\"line\"> .<span class=\"title function_\">then</span>(multiply)</span><br><span class=\"line\"> .<span class=\"title function_\">then</span>(add)</span><br><span class=\"line\"> .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">result</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;最终结果是&#x27;</span> + result);</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Async函数\"><a href=\"#Async函数\" class=\"headerlink\" title=\"Async函数\"></a>Async函数</h1><h2 id=\"为什么要用-1\"><a href=\"#为什么要用-1\" class=\"headerlink\" title=\"为什么要用\"></a>为什么要用</h2><p>Promise对象相比回调函数已直观很多：将横向发展的回调函数变成了链式的写法。但Promise对象在编写和理解上实际并没有那么轻松。   </p>\n<p><strong>而调用Async函数时会自动返回一个Promise对象：当这个异步函数返回预期值时，Promise会调用resolve方法处理这个预期值；如果这个异步函数抛出异常或者返回非法值时，Promise会调用reject方法进行处理。</strong></p>\n<p>虽然依然使用Promise，但这一切都是交给Async函数去处理，我们不需要编写代码处理Promise对象，只关注返回值就好了。</p>\n<h2 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>Async函数本身的语法为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\">[param[, param[, ... param]]]</span>) &#123;</span><br><span class=\"line\">   statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在普通函数前面加<code>async</code>关键字就变成了Async函数。</p>\n<h2 id=\"await表达式\"><a href=\"#await表达式\" class=\"headerlink\" title=\"await表达式\"></a><code>await</code>表达式</h2><p>通常Async函数都会搭配<code>await</code>表达式和<code>try-catch</code>语句一起使用，代码格式为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myFirstAsyncFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fulfilledValue = <span class=\"keyword\">await</span> promise;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (rejectedValue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 捕获异常</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于<code>await</code>表达时的几点说明：</p>\n<ul>\n<li>await表达式必须放在Async函数中使用；</li>\n<li>await表达式后面可以跟一个Promise对象或者任何待解析的值（通常都是promise对象，不然没啥意义了），<strong>在等待Promise返回值时，Async函数暂停执行<code>await</code>表达式后面的代码，但不会阻塞JS主线程，即Async函数后面的代码正常执行</strong>。</li>\n</ul>\n<p>具体参见下面重写的promise例子。</p>\n<h2 id=\"重写promise的例子\"><a href=\"#重写promise的例子\" class=\"headerlink\" title=\"重写promise的例子\"></a>重写promise的例子</h2><ul>\n<li>模拟异步请求</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟异步请求生成的promise对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise starting&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeOut = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;the random number is &#x27;</span> + timeOut + <span class=\"string\">&#x27;...&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模拟异步执行需要的时间</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeOut &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;返回结果如预期，调用resolve()...&#x27;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;200 OK&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;没得到预期返回结果，调用reject()...&#x27;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;请求超时：&#x27;</span> + timeOut + <span class=\"string\">&#x27;second ...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, timeOut * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resolvedP = <span class=\"keyword\">await</span> p; <span class=\"comment\">// promise返回结果之前，函数暂停执行</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">222</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resolvedP);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">333</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">444</span>); <span class=\"comment\">// await等待promise的时候并不阻塞JS主线程，先于console.log(222)或者console.log(333)执行</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>promise链式写法重写</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;直接返回resolve的promise&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> multiply = <span class=\"keyword\">function</span> (<span class=\"params\">input</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;计算&#x27;</span> + input + <span class=\"string\">&#x27;*&#x27;</span> + input + <span class=\"string\">&#x27;...&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置1s的计算延时，同样，认为为resolve的情况</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">1000</span>, input * input);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"keyword\">function</span> (<span class=\"params\">input</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;计算&#x27;</span> + input + <span class=\"string\">&#x27;+&#x27;</span> + input + <span class=\"string\">&#x27;...&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">1000</span>, input + input);   </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> p;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"keyword\">await</span> <span class=\"title function_\">multiply</span>(a);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> c = <span class=\"keyword\">await</span> <span class=\"title function_\">add</span>(b);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">await</span> <span class=\"title function_\">multiply</span>(c);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"keyword\">await</span> <span class=\"title function_\">add</span>(d);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;最终结果是&#x27;</span> + e)</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000\">Promise</a><br>【2】<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN-Promise</a><br>【3】<a href=\"http://www.datchley.name/es6-promises/\">ES6 Promises</a><br>【4】<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a><br>【5】<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/async-functions\">Async functions - making promises friendly</a><br>【6】<a href=\"http://javascript.ruanyifeng.com/advanced/single-thread.html\">单线程模型</a><br>【7】<a href=\"https://www.zhihu.com/question/20866267\">JavaScript 既是单线程又是异步的，请问这二者是否冲突，以及有什么区别？</a><br>【8】<a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\">Javascript异步编程的4种方法</a><br>【9】<a href=\"https://stackoverflow.com/questions/2035645/when-is-javascript-synchronous\">When is JavaScript synchronous?</a>   </p>\n","categories":["JavaScript"],"tags":["ES7"]},{"title":"数据可视化","url":"https://xiaogliu.github.io/2017/07/09/visualization/","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>在项目中经常会遇到数据可视化的需求，目前接触到的可视化库有三个：</p>\n<ul>\n<li><a href=\"https://github.com/d3/d3\">D3.js</a></li>\n<li><a href=\"https://github.com/d3/d3\">Chart.js</a></li>\n<li><a href=\"https://github.com/ecomfe/echarts\">echarts.js</a></li>\n</ul>\n<p>三个库D3可扩展性最强，其他两个类似。<strong>那么项目实践中如何选型</strong>？   </p>\n<p>如果初次接触可视化，且开发时间短、无太多定制需求，建议用echarts，因为有很多示例，更改数据后可以直接使用，即便对个中原理不甚了解；   </p>\n<p>但感觉echarts <a href=\"http://echarts.baidu.com/api.html#echarts\">API文档</a>很混乱，并且在Github上就问题的讨论常常无疾而终或者很不详细，如果对echarts/Chart这类可视化库感兴趣，可以参考<a href=\"http://www.chartjs.org/docs/latest/\">chart的文档</a>；   </p>\n<p>如果有足够的时间和兴趣研究可视化，推荐D3，学习曲线很陡，但可定制和扩展性强，并且Github社区讨论活跃，不乏高质量问答。   </p>\n<blockquote>\n<p>没错，时间多用D3，时间少用echarts，chart仅仅看文档学习用。。。</p>\n</blockquote>\n<h1 id=\"echarts\"><a href=\"#echarts\" class=\"headerlink\" title=\"echarts\"></a>echarts</h1><p>目前使用的是echarts，将常用功能总结如下：   </p>\n<h2 id=\"1，引入echarts库\"><a href=\"#1，引入echarts库\" class=\"headerlink\" title=\"1，引入echarts库\"></a>1，引入echarts库</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;[yourpath]/echarts.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2，初始化\"><a href=\"#2，初始化\" class=\"headerlink\" title=\"2，初始化\"></a>2，初始化</h2><ul>\n<li>在html中设置图表容器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chartName&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 100%;height:400px;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，这里的<code>width</code>设为<code>100%</code>，主要为图表自适应做准备</p>\n</blockquote>\n<ul>\n<li>在js中基于准备好的DOM，初始化echarts实例</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chartName = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;chartName&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"3，配置项和数据显示（修改样式）\"><a href=\"#3，配置项和数据显示（修改样式）\" class=\"headerlink\" title=\"3，配置项和数据显示（修改样式）\"></a>3，配置项和数据显示（修改样式）</h2><p>去到<a href=\"http://echarts.baidu.com/examples.html\">echarts实例页面</a>，将需要的图表配置项和数据源码插入自己的js文件中，在此基础上修改就可以了。   </p>\n<p>这里以<a href=\"http://echarts.baidu.com/demo.html#line-marker\">折线图</a>为例对配置项和数据代码进行说明：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">option = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置标题</span></span><br><span class=\"line\">  <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">&#x27;未来一周气温变化&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">subtext</span>: <span class=\"string\">&#x27;纯属虚构&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置背景色</span></span><br><span class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#0ff&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过textStyle设置标题字体样式</span></span><br><span class=\"line\">    <span class=\"attr\">textStyle</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#408829&#x27;</span>  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 跟踪鼠标，显示相关数据</span></span><br><span class=\"line\">  <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;axis&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 线条名称说明，注意和series数组中元素一一对应，且和对象元素的name属性值保持一致</span></span><br><span class=\"line\">  <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>:[<span class=\"string\">&#x27;最高气温&#x27;</span>,<span class=\"string\">&#x27;最低气温&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 右上角小工具，比如下载图片，缩放图表等</span></span><br><span class=\"line\">  <span class=\"attr\">toolbox</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">feature</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">dataZoom</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">yAxisIndex</span>: <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">dataView</span>: &#123;<span class=\"attr\">readOnly</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">      <span class=\"attr\">magicType</span>: &#123;<span class=\"attr\">type</span>: [<span class=\"string\">&#x27;line&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>]&#125;,</span><br><span class=\"line\">      <span class=\"attr\">restore</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">saveAsImage</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// x坐标轴</span></span><br><span class=\"line\">  <span class=\"attr\">xAxis</span>:  &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;category&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// boundaryGap设为ture，图标左边与y轴有间隙</span></span><br><span class=\"line\">    <span class=\"attr\">boundaryGap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: [<span class=\"string\">&#x27;周一&#x27;</span>,<span class=\"string\">&#x27;周二&#x27;</span>,<span class=\"string\">&#x27;周三&#x27;</span>,<span class=\"string\">&#x27;周四&#x27;</span>,<span class=\"string\">&#x27;周五&#x27;</span>,<span class=\"string\">&#x27;周六&#x27;</span>,<span class=\"string\">&#x27;周日&#x27;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定制坐标轴颜色</span></span><br><span class=\"line\">    <span class=\"attr\">axisLine</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">lineStyle</span>:&#123;  </span><br><span class=\"line\">        <span class=\"attr\">color</span>:<span class=\"string\">&#x27;green&#x27;</span>,  </span><br><span class=\"line\">        <span class=\"attr\">width</span>:<span class=\"number\">2</span>  </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">    &#125;,  </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">yAxis</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;value&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">axisLabel</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">formatter</span>: <span class=\"string\">&#x27;&#123;value&#125; °C&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 图表数据部分</span></span><br><span class=\"line\">  <span class=\"attr\">series</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此处name与legend中data数组元素有对应关系</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;最高气温&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 图表类型</span></span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;line&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 图标数据</span></span><br><span class=\"line\">    <span class=\"attr\">data</span>:[<span class=\"number\">11</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * label和markPoint/markLine一般二选一，不会全部显示 begin</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attr\">label</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">normal</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是否显示转折点数值</span></span><br><span class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置特殊点标记</span></span><br><span class=\"line\">    <span class=\"attr\">markPoint</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;max&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;最大值&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;min&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;最小值&#x27;</span>&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置特殊线标记</span></span><br><span class=\"line\">    <span class=\"attr\">markLine</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;average&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;平均值&#x27;</span>&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置线条样式</span></span><br><span class=\"line\">    <span class=\"attr\">itemStyle</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">normal</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">&quot;#4dcda2&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4，使用配置项和数据\"><a href=\"#4，使用配置项和数据\" class=\"headerlink\" title=\"4，使用配置项和数据\"></a>4，使用配置项和数据</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">chartName.<span class=\"title function_\">setOption</span>(option);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5，自适应\"><a href=\"#5，自适应\" class=\"headerlink\" title=\"5，自适应\"></a>5，自适应</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// resizeTimer为节流定时器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resizeTimer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resizeTimer) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(resizeTimer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resizeTimer = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在图表上设置resize方法，配合html中设置的图标width为100%，便可实现自适应</span></span><br><span class=\"line\">    chartName.<span class=\"title function_\">resize</span>();</span><br><span class=\"line\">  &#125;, <span class=\"number\">200</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6，多个图表\"><a href=\"#6，多个图表\" class=\"headerlink\" title=\"6，多个图表\"></a>6，多个图表</h2><p>如果同个页面中包含个图表，在上述配置项中针对不同图表设置不同名称就好，具体可参考Github上这个仓库<a href=\"https://github.com/xiaogliu/echarts_example\">echarts_example</a>。   </p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://stackoverflow.com/questions/27347798/comparison-between-d3-js-and-chart-js-only-for-charts\">Comparison between d3.js and chart.js (only for charts)</a><br>【2】<a href=\"http://blog.csdn.net/eastmount/article/details/52823548\">Echarts字体和线条颜色设置操作笔记</a>   </p>\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"JavaScript数组常用方法及应用","url":"https://xiaogliu.github.io/2017/06/25/js-array-methods-and-example/","content":"<h1 id=\"检测方法\"><a href=\"#检测方法\" class=\"headerlink\" title=\"检测方法\"></a>检测方法</h1><p>如果判断一个对象是不是数组不能通过<code>typeof</code>，在页面当中有多个全局变量的时候<code>instanceof</code>也力不从心，为此，数组提供了原生方法<code>Array.isArray()</code>来判断一个对象是不是数组。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">做什么</th>\n<th style=\"text-align:left\">返回值</th>\n<th style=\"text-align:left\">影响原数组？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Array.isArray()</td>\n<td style=\"text-align:left\">判断一个对象</td>\n<td style=\"text-align:left\">true of false：若对象为数组返回true，反之返回false</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n</tbody>\n</table>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(obj)</span><br></pre></td></tr></table></figure>\n<p>应用举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(str)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>typeof</code>用来确定某个变量是哪种基本数据类型（string, number, boolean, undefined），对于引用类型，<code>typeof</code>只能区分”function”，对于其他引用类型和null都返回”object”。若能保证页面中只有一个全局变量（未嵌套多个框架），可以通过<code>instanceof</code>确定变量是哪种引用类型。但实际应用中，一般只需要区分引用类型中的数组，所以<code>Array.isArray()</code>使用很频繁。</p>\n</blockquote>\n<h1 id=\"迭代方法\"><a href=\"#迭代方法\" class=\"headerlink\" title=\"迭代方法\"></a>迭代方法</h1><p>ES5定义了5个迭代方法，每个方法都接受两个参数：在每一项运行的函数和运行该函数的作用域对象—影响<code>this</code>指向。第二个参数为可选参数，通常不用。   </p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"title function_\">callBackFn</span>(element[, index][, array])[, thisArg])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>方括号表示可选参数，而非数组。</p>\n</blockquote>\n<p>五个迭代方法对比如下：    </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">做什么</th>\n<th style=\"text-align:left\">返回值</th>\n<th style=\"text-align:left\">影响原数组？</th>\n<th style=\"text-align:left\">应用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">every()</td>\n<td style=\"text-align:left\">对数组每一项运行给定函数</td>\n<td style=\"text-align:left\">true or false：如果数组每一项运行给定函数都返回true，则返回true</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">判断数组所有项是否满足某一条件，比如数值比较</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">filter()</td>\n<td style=\"text-align:left\">同上</td>\n<td style=\"text-align:left\">数组：返回数组中执行给定函数后返回值为true的项组成的数组</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">将符合某种条件的项过滤出来</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">forEach()</td>\n<td style=\"text-align:left\">同上</td>\n<td style=\"text-align:left\">没有返回值：与使用for循环迭代数组一样，但更方便，注意没法中断</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">代替for循环进行数组迭代</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">map()</td>\n<td style=\"text-align:left\">同上</td>\n<td style=\"text-align:left\">数组：返回每次执行给：定函数的结果构成的数组，长度和原数组一样</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">对数组中的项做统一处理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">some()</td>\n<td style=\"text-align:left\">同上</td>\n<td style=\"text-align:left\">true or false：数组中任一项执行给定函数返回true，则返回true</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">数组中是否有满足某一条件的项</td>\n</tr>\n</tbody>\n</table>\n<p>应用举例：</p>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> isAllBig = <span class=\"keyword\">function</span> (<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">arr.<span class=\"title function_\">every</span>(isAllBig); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>另外一个常用的场景是判断数组中某个属性值是否完全相同（有变化）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr = [&#123;<span class=\"attr\">q</span>: <span class=\"number\">1</span>,<span class=\"attr\">d</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">q</span>: <span class=\"number\">1</span>,<span class=\"attr\">d</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">q</span>: <span class=\"number\">1</span>,<span class=\"attr\">d</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">q</span>: <span class=\"number\">1</span>,<span class=\"attr\">d</span>: <span class=\"number\">2</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = arr[<span class=\"number\">0</span>].<span class=\"property\">d</span>;</span><br><span class=\"line\">arr.<span class=\"title function_\">every</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.<span class=\"property\">d</span> === n;</span><br><span class=\"line\">&#125;); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr = [&#123;<span class=\"attr\">q</span>: <span class=\"number\">1</span>,<span class=\"attr\">d</span>: <span class=\"number\">3</span>&#125;, &#123;<span class=\"attr\">q</span>: <span class=\"number\">1</span>,<span class=\"attr\">d</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">q</span>: <span class=\"number\">1</span>,<span class=\"attr\">d</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">q</span>: <span class=\"number\">1</span>,<span class=\"attr\">d</span>: <span class=\"number\">2</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = arr[<span class=\"number\">0</span>].<span class=\"property\">d</span>;</span><br><span class=\"line\">arr.<span class=\"title function_\">every</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.<span class=\"property\">d</span> === n;</span><br><span class=\"line\">&#125;); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> getSmallElement = <span class=\"keyword\">function</span> (<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element &lt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">arr.<span class=\"title function_\">filter</span>(getSmallElement); <span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> getAnotherArr = <span class=\"keyword\">function</span> (<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">push</span>(element * <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(getAnotherArr);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意和使用<code>map()</code>达到同样效果的区别。实现同样效果有多种方法，找出最优解</p>\n</blockquote>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = []</span><br><span class=\"line\"><span class=\"keyword\">var</span> getAnotherArr = <span class=\"keyword\">function</span> (<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  element * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">res = arr.<span class=\"title function_\">map</span>(getAnotherArr);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> isSomeBig = <span class=\"keyword\">function</span> (<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">arr.<span class=\"title function_\">some</span>(isSomeBig); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意和<code>every()</code>方法的区别</p>\n</blockquote>\n<h1 id=\"栈方法\"><a href=\"#栈方法\" class=\"headerlink\" title=\"栈方法\"></a>栈方法</h1><p>栈是一种数据结构，访问规则是LIFO(Last-In-First-Out):后进先出，动作之发生在栈头，通过<code>push()</code>和<code>pop()</code>可实现这种访问规则。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">做什么</th>\n<th style=\"text-align:left\">返回值</th>\n<th style=\"text-align:left\">影响原数组？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">push()</td>\n<td style=\"text-align:left\">在数组尾部添加任意多个项</td>\n<td style=\"text-align:left\">数值：修改数组的长度</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pop()</td>\n<td style=\"text-align:left\">移除数组最后一项</td>\n<td style=\"text-align:left\">被移除的项</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">push</span>([element1[, ...[, elementN]]]);</span><br></pre></td></tr></table></figure>\n<p>数组中最常用的方法了吧，使用举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> count = arr.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// [1, 3, &#x27;1&#x27;, &#x27;b&#x27;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">pop</span>()</span><br></pre></td></tr></table></figure>\n<p>使用举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteElement = arr.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(deleteElement); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为<code>pop()</code>方法只能返回一个元素，所以返回的数据类型不是数组。</p>\n</blockquote>\n<h1 id=\"队列方法\"><a href=\"#队列方法\" class=\"headerlink\" title=\"队列方法\"></a>队列方法</h1><p>队列数据结构访问规则是FIFO(First-In-First-Out)：先进先出，结合<code>shift()</code>和<code>push()</code>方法可以模拟这种访问规则。同时，结合<code>unshift()</code>和<code>pop()</code>方法可以从相反的方向来模拟队列。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">做什么</th>\n<th style=\"text-align:left\">返回值</th>\n<th style=\"text-align:left\">影响原数组？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">shift()</td>\n<td style=\"text-align:left\">移除数组第一项</td>\n<td style=\"text-align:left\">被移除的项</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unshift()</td>\n<td style=\"text-align:left\">在数组前端添加任意多个项</td>\n<td style=\"text-align:left\">数值：修改后数组的长度</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift()\"></a>shift()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">shift</span>();</span><br></pre></td></tr></table></figure>\n<p>队列访问规则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteElement = arr.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(deleteElement); <span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">unshift</span>();</span><br></pre></td></tr></table></figure>\n<p>反方向队列访问规则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> count = arr.<span class=\"title function_\">unshift</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// [4, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"转换方法\"><a href=\"#转换方法\" class=\"headerlink\" title=\"转换方法\"></a>转换方法</h1><p>这里的转换指的是数组到字符串的转换。数组有继承自Object对象的两个转换方法<code>toString()</code>和<code>toLocalString()</code>，但更实用的是数组内置方法<code>join()</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">做什么</th>\n<th style=\"text-align:left\">返回值</th>\n<th style=\"text-align:left\">影响原数组？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">join()</td>\n<td style=\"text-align:left\">将数组所有项拼接为字符串，并可以指定分隔符</td>\n<td style=\"text-align:left\">字符串：数组中所有项组成的字符串，用指定的分隔符分割</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">toString()</td>\n<td style=\"text-align:left\">将数组中所有项拼接为字符串，只能用逗号分割</td>\n<td style=\"text-align:left\">字符串：数组中所有项组成的字符窜，以逗号分割</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">toLocalString()</td>\n<td style=\"text-align:left\">同上</td>\n<td style=\"text-align:left\">同上</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><code>toLocalString()</code>和<code>toString()</code>区别主要体现在数据表现于地区有关的情况下，比如日期，在此不作讨论，详见MDN的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\">Array.prototype.toLocaleString()</a></p>\n</blockquote>\n<h2 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">join</span>()</span><br><span class=\"line\">arr.<span class=\"title function_\">join</span>(separator)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，分隔符一定要放在引号内（ES6也可用反引号，总之是字符串的形式）</p>\n</blockquote>\n<p>应用举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = arr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;|&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArr) <span class=\"comment\">// &#x27;1|2|3&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>更实用的例子： 反转字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;i am student&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> strArr = str.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> revStr = strArr.<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(revStr); <span class=\"comment\">// &#x27;student am i&#x27;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里使用了字符串<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split()</code>方法</a></p>\n</blockquote>\n<h1 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h1><p>操作方法有<code>concat()</code>, <code>slice()</code>以及<strong>万能的</strong><code>splice</code>方法，三种方法对比如下：   </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">做什么</th>\n<th style=\"text-align:left\">返回值</th>\n<th style=\"text-align:left\">影响原数组？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">concat()</td>\n<td style=\"text-align:left\">拼接数组</td>\n<td style=\"text-align:left\">数组：拼接后的新数组</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">slice()</td>\n<td style=\"text-align:left\">截取数组中指定的部分</td>\n<td style=\"text-align:left\">数组：截取的数组</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">splice()</td>\n<td style=\"text-align:left\">入参不同可以实现数组的增、删、改</td>\n<td style=\"text-align:left\">数组：删除的元素组成的数组</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n</tbody>\n</table>\n<p><strong>应用举例</strong></p>\n<h2 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = old_array.<span class=\"title function_\">concat</span>(value1[, value2[, ...[, valueN]]])</span><br></pre></td></tr></table></figure>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = arr.<span class=\"title function_\">concat</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果不传参，返回元素组的副本</p>\n</blockquote>\n<h2 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">slice</span>();</span><br><span class=\"line\">arr.<span class=\"title function_\">slice</span>(begin);</span><br><span class=\"line\">arr.<span class=\"title function_\">slice</span>(begin, end);</span><br></pre></td></tr></table></figure>\n<p>如果<code>slice()</code>方法中不传参数，返回整个数组；只传入一个参数，返回从此位置至数组末尾的元素组成的数组；如果传入两个参数，则返回<strong>第一个参数（包括）至第二个参数（不包括）之间的元素组成的数组</strong>。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = arr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> res1 = arr.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> res2 = arr.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1); <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res2); <span class=\"comment\">// [2]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>slice()</code>也接受负数参数，在此不作讨论。</p>\n</blockquote>\n<h2 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">array.<span class=\"title function_\">splice</span>(start)</span><br><span class=\"line\">array.<span class=\"title function_\">splice</span>(start, deleteCount)</span><br><span class=\"line\">array.<span class=\"title function_\">splice</span>(start, deleteCount, item1, item2, ...)</span><br></pre></td></tr></table></figure>\n<p><code>splice()</code>方法可以对数组进行增、删、改的操作：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">入参</th>\n<th style=\"text-align:left\">返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">删除</td>\n<td style=\"text-align:left\">两个参数：要删除的第一项的位置和要删除的项数</td>\n<td style=\"text-align:left\">数组：删掉的元素组成的数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">插入</td>\n<td style=\"text-align:left\">三个参数：起始位置、0（删除0项）、要插入的项</td>\n<td style=\"text-align:left\">数组：空数组（删掉的项）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">替换</td>\n<td style=\"text-align:left\">三个参数：起始位置、要删除的项数、要插入的项（<strong>当删除的项数和插入的项数相等时，实现更改的目的</strong>）</td>\n<td style=\"text-align:left\">数组：删掉的元素组成的数组</td>\n</tr>\n</tbody>\n</table>\n<p>splice()应用举例   </p>\n<p>删除   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> removed = arr.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// [1, 4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed); <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果不传参，不对数组进行任何操作；如果只传递一个参数，则以此参数为起始位置（包含），删除数组之后所有的项</p>\n</blockquote>\n<p>插入   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> removed = arr.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// [1, 2, 5, 3, 4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<p>替换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> removed = arr.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// [1, &#x27;a&#x27;, 3, 4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(removed); <span class=\"comment\">// [2]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>要删除的项没必要和要添加的项相等</p>\n</blockquote>\n<h1 id=\"重排序方法\"><a href=\"#重排序方法\" class=\"headerlink\" title=\"重排序方法\"></a>重排序方法</h1><p>数组中内置两个原生的重排序方法：<code>sort()</code>和<code>reverse()</code>。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">做什么</th>\n<th style=\"text-align:left\">返回值</th>\n<th style=\"text-align:left\">影响原数组？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">sort()</td>\n<td style=\"text-align:left\">默认将数组按升序排序（先转为字符串，有坑）</td>\n<td style=\"text-align:left\">数组：排序后的原数组</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">reverse()</td>\n<td style=\"text-align:left\">反转数组原来的顺序</td>\n<td style=\"text-align:left\">数组：反转后的原数组</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">sort</span>();</span><br><span class=\"line\">arr.<span class=\"title function_\">sort</span>(compareFn);</span><br></pre></td></tr></table></figure>\n<p><code>sort()</code>方法可以接受可选参数：比较函数。如果没有比较函数，<code>sort()</code>方法默认升序排序，但不是数值升序，而是先调用数组每一项的<code>toString()</code>方法，然后比较字符串，这和常识有点相悖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">arr.<span class=\"title function_\">sort</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);  <span class=\"comment\">// [1, 10, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>因为字符串中”10”是在”2”之前的。</p>\n<p>为了实现数值的比较，可以传入比较函数作为<code>sort()</code>方法的入参。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> compareFn = <span class=\"keyword\">function</span> (<span class=\"params\">v1, v2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1 - v2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">arr.<span class=\"title function_\">sort</span>(compareFn);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);  <span class=\"comment\">// [1, 2, 3, 4, 10]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>比较函数执行过程：如果第一个参数应该位于第二个参数之前，则返回负数；反之，返回正数；相等返回0。这里是数值比较。</p>\n</blockquote>\n<p><strong>Tips</strong>：常见的业务场景是：数组元素由对象组成，根据对象中属性的值进行排序，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sortByTime = <span class=\"keyword\">function</span>(<span class=\"params\">v1, v2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1.<span class=\"property\">create_time</span> - v2.<span class=\"property\">create_time</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readMsg = [&#123;<span class=\"string\">&quot;uid&quot;</span>: <span class=\"number\">6</span>, <span class=\"string\">&quot;create_time&quot;</span>: <span class=\"number\">1498458322</span>&#125;, &#123;<span class=\"string\">&quot;uid&quot;</span>: <span class=\"number\">7</span>, <span class=\"string\">&quot;create_time&quot;</span>: <span class=\"number\">1498527524</span>&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">readMsg.<span class=\"title function_\">sort</span>(sortByTime);</span><br></pre></td></tr></table></figure>\n<h2 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">reverse</span>()</span><br></pre></td></tr></table></figure>\n<p><code>reverse()</code>方法实现对字符串的反转，见下面的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">arr.<span class=\"title function_\">reverse</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// [2, 4, 3, 1]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"位置方法\"><a href=\"#位置方法\" class=\"headerlink\" title=\"位置方法\"></a>位置方法</h1><p>ES5为数组提供了两个位置方法：<code>indexOf()</code>和<code>lastIndexOf()</code>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">做什么</th>\n<th style=\"text-align:left\">返回值</th>\n<th style=\"text-align:left\">影响原数组？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">indexOf()</td>\n<td style=\"text-align:left\">从数组开头向后查找提供元素的索引值</td>\n<td style=\"text-align:left\">索引值：第一个符合条件的元素的索引值</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lastIndexOf()</td>\n<td style=\"text-align:left\">从数组末尾向前查找提供元素的索引值</td>\n<td style=\"text-align:left\">同上</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf()\"></a>indexOf()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">indexOf</span>(searchElement[, fromIndex])</span><br></pre></td></tr></table></figure>\n<p>应用举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = arr.<span class=\"title function_\">indexOf</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>返回<strong>第一个</strong>符合条件的元素的索引值。<strong>indexOf()方法也可以很方便的判断某元素是否是数组里的元素</strong>。</p>\n</blockquote>\n<h1 id=\"归并方法\"><a href=\"#归并方法\" class=\"headerlink\" title=\"归并方法\"></a>归并方法</h1><p>所谓归并方法就是将一个数组中的所有项归并为一个值，数组提供了两个原生的归并方法：<code>reduce()</code>和<code>reduceRight()</code>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">做什么</th>\n<th style=\"text-align:left\">返回值</th>\n<th style=\"text-align:left\">影响原数组？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">reduce()</td>\n<td style=\"text-align:left\">将数组中所有项通过加性操作符归并为一个值，从左往右加</td>\n<td style=\"text-align:left\">归并后的值</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight\">reduceRight()</a></td>\n<td style=\"text-align:left\">将数组中所有项通过加性操作符归并为一个值，从右往左加</td>\n<td style=\"text-align:left\">同上</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h2><p><code>reduce()</code>方法可以实现数组求和，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = arr.<span class=\"title function_\">reduce</span>(<span class=\"keyword\">function</span> (<span class=\"params\">prev, cur</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于<code>reduce()</code>更多介绍请查看MDN<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">Array.prototype.reduce()</a></p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">JavaScript Array on MDN</a><br>【2】[美]Nicholas C. Zakas 著，李松峰 曹力 译（2012），JavasSript高级程序设计，p86~p97，人民邮电出版社   </p>\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"ES6之模板字符串","url":"https://xiaogliu.github.io/2017/06/22/es6-template-literals/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>模板字符串（Template literals）是ES6引入的新语法规则。</p>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><p>通过反引号<code>`</code>包裹字符串，如下   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`字符串`</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>MarkDown反引号转义：最外层连续连个反引号，且被包裹的反引号前后各加一空格。</p>\n</blockquote>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>可以通过<code>&#39;</code>或者<code>&quot;</code>包裹的字符串都可以使用<code>`</code>代替，除此之外，反引号的语法常用的两种场景：   </p>\n<ul>\n<li><strong>实现<a href=\"https://en.wikipedia.org/wiki/String_interpolation\">字符串插值</a>功能</strong>   </li>\n</ul>\n<p>ES6之前的写法：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Fifteen is &#x27;</span> + (a + b));</span><br><span class=\"line\"><span class=\"comment\">// &quot;Fifteen is 15 and&quot;</span></span><br></pre></td></tr></table></figure>\n<p>ES6的写法：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Fifteen is <span class=\"subst\">$&#123;a + b&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"comment\">// &quot;Fifteen is 15 and&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这个功能在路由传参时非常实用：<code>`/admin/article/detail/$&#123;userUID&#125;`</code></p>\n<blockquote>\n<p>字符串模板中的表达式通过<code>$&#123;expression&#125;</code>表示</p>\n</blockquote>\n<ul>\n<li><strong>反引号内的空格、换行符都会保留</strong>   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#warning&quot;</span>).<span class=\"title function_\">html</span>(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;h1&gt;小心！&gt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;p&gt;未经授权打冰球可能受罚</span></span><br><span class=\"line\"><span class=\"string\">  将近<span class=\"subst\">$&#123;maxPenalty&#125;</span>分钟。&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br></pre></td></tr></table></figure>\n<p>如果在JS中嵌套html，通过字符串模板书写更友好。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a><br>【2】<a href=\"http://www.infoq.com/cn/articles/es6-in-depth-template-string\">深入浅出ES6（四）：模板字符串</a><br>【3】<a href=\"https://www.v2ex.com/t/57233\">markdown反引号内怎么转义反引号？</a></p>\n","categories":["JavaScript"],"tags":["ES6"]},{"title":"React Native初探","url":"https://xiaogliu.github.io/2017/05/28/glance-react-native/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本文基于React Native（0.44）官方文档<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">Getting Start</a>实践在Windows 10 操作系统下开发Android APP，主要记录实际开发过程与官方文档不同之处。   </p>\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><h2 id=\"Node-Python2-JDK\"><a href=\"#Node-Python2-JDK\" class=\"headerlink\" title=\"Node, Python2, JDK\"></a>Node, Python2, JDK</h2><p>官方推荐使用<a href=\"https://chocolatey.org/\">Chocolatey</a>(windows下的包管理工具)进行安装，也可以在依赖工具的官网下载安装包进行安装：   </p>\n<ul>\n<li>Node.js <a href=\"https://nodejs.org/en/\">官网下载地址</a>   </li>\n<li>Python <a href=\"https://www.python.org/downloads/\">官网下载地址</a>   </li>\n<li>Java SE Development Kit 8 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">官网下载地址</a>   </li>\n</ul>\n<h2 id=\"React-Native-CLI\"><a href=\"#React-Native-CLI\" class=\"headerlink\" title=\"React Native CLI\"></a>React Native CLI</h2><p>使用下面命令安装 React Native CLI ：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g react-native-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"Android-Development-Environment\"><a href=\"#Android-Development-Environment\" class=\"headerlink\" title=\"Android Development Environment\"></a>Android Development Environment</h2><p>具体步骤请参考<a href=\"https://facebook.github.io/react-native/docs/getting-started.html#android-development-environment\">官方教程</a>   </p>\n<h1 id=\"启动Android-Virtual-Device\"><a href=\"#启动Android-Virtual-Device\" class=\"headerlink\" title=\"启动Android Virtual Device\"></a>启动Android Virtual Device</h1><p>这点很重要，进行React Native APP的调试可以选择在安卓模拟器或者真机上进行，如果使用安卓模拟器，在调试之前必须先把模拟器打开，不然会报下面的错误：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Execution failed for task &#x27;:app:installDebug&#x27;.</span><br><span class=\"line\">&gt; com.android.builder.testing.api.DeviceException: No connected devices!</span><br></pre></td></tr></table></figure>\n<p>错误提示为：未发现连接的设备。如果是用模拟器，错误提示可以理解为“模拟器未打开”。   </p>\n<p><strong>下面通过命令行的方式打开安卓模拟器</strong>：</p>\n<p>1.查看可用安卓模拟器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">emulator -avd -list-avds</span><br></pre></td></tr></table></figure>\n<p>2.假如上述列表为空，则通过Android Studio创建新的模拟器：   </p>\n<p>创建路径为 tools - android - AVD manager   </p>\n<blockquote>\n<p>在创建的时候可能会遇到问题，如果不是预期，请谷歌解决。</p>\n</blockquote>\n<p>3.开启模拟器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">emulator -avd &lt;AVD-name&gt;</span><br></pre></td></tr></table></figure>\n<p>开启模拟器的过程最可能出现的问题是下面的错误：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[11256]:ERROR:./android/qt/qt_setup.cpp:28:Qt library not found at ..\\emulator\\lib64\\qt\\lib</span><br><span class=\"line\">Could not launch &#x27;..\\emulator/qemu/windows-x86_64/qemu-system-x86_64.exe&#x27;: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>这是因为emulator更新过程中目录发生了变化，可通过下面命令查询emulator路径   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">which emulator</span><br></pre></td></tr></table></figure>\n<p>如果和<code>qemu-system-x86_64.exe</code>文件不再同一个目录，进入<code>qemu-system-x86_64.exe</code>目录，重新输入启动模拟器的命令即可   </p>\n<blockquote>\n<p>如何通过环境变量更改后面再填坑</p>\n</blockquote>\n<h1 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h1><p>这里使用React官方案例，下载案例命令如下：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">react-native init AwesomeProject</span><br></pre></td></tr></table></figure>\n<p>进入AwesomeProject目录，输入下面命令：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">react-native run-android</span><br></pre></td></tr></table></figure>\n<p>顺利的话就可以在模拟器中看到APP了。</p>\n<p>我在打包后遇到过这个错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error calling AppRegistry.runApplication</span><br></pre></td></tr></table></figure>\n<p>有人反馈在模拟器中也遇到过，解决方法请参考<a href=\"https://stackoverflow.com/questions/43744156/error-calling-appregistry-runapplication-in-react-native\">Error calling Appregistry.runApplication in react-native</a></p>\n<h1 id=\"打包发布\"><a href=\"#打包发布\" class=\"headerlink\" title=\"打包发布\"></a>打包发布</h1><p>前面准备工作做好后，React签名打包相对简单，输入下面命令就好：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">gradlew assembleRelease</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在Mac或者Linux系统，使用这个命令：<code>./gradlew assembleRelease</code></p>\n</blockquote>\n<p>如果是想发布签名版APK，请参考<a href=\"https://facebook.github.io/react-native/docs/signed-apk-android.html\">Generating Signed APK</a></p>\n<p>可能会遇到的问题是：</p>\n<p>1.finished with non zero exit value</p>\n<p>解决方法：通过<code>gradlew assembleDebug --info</code>尝试打包debug的APK, 然后在重新使发布命令。</p>\n<p>2.设置签名后输出的APK还是未签名的</p>\n<p>解决方法：目前无解，不知道为什么按照官方教程设置以后依然是未签名的APK，但可以手动给未签名的APK设置签名，参考这篇文章：<a href=\"https://xiaogliu.github.io/2017/05/13/Ionic%E6%89%93%E5%8C%85Android-apk/#2-3-设置签名\">Ionic打包Android apk</a>设置签名部分。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">Getting Started</a><br>【2】<a href=\"https://github.com/facebook/react-native/issues/3091\">Failed run android simulator : No connected devices!</a><br>【3】<a href=\"http://www.cnblogs.com/hautezwei/p/6719929.html\">Android emulator启动模拟器</a><br>【4】<a href=\"https://stackoverflow.com/questions/4974568/how-do-i-launch-the-android-emulator-from-the-command-line\">How do I launch the Android emulator from the command line?</a>   </p>\n","categories":["Hybrid App"],"tags":["Hybrid App","React","Android"]},{"title":"系统浏览器打开Ionic App内部链接(InAppBrowser)","url":"https://xiaogliu.github.io/2017/05/15/open-ionic-app-inside-link-use-mobile-browser/","content":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一 概述\"></a>一 概述</h1><p>App使用过程中有使用系统自带浏览器打开App内部链接的需求，比如App升级时通过点击App内部链接调用系统自带浏览器下载更新包。   </p>\n<p>Ionic App 通过 Cordova 的插件：<a href=\"https://github.com/apache/cordova-plugin-inappbrowser\">InAppBrowser</a>实现该功能。本篇文章将通过实际案例介绍<code>InAppBrowser</code>的使用。   </p>\n<h1 id=\"二-Ionic-App环境搭建\"><a href=\"#二-Ionic-App环境搭建\" class=\"headerlink\" title=\"二 Ionic App环境搭建\"></a>二 Ionic App环境搭建</h1><p>下载Ionic App官方案例   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ionic start myApp tabs</span><br></pre></td></tr></table></figure>\n<p>添加平台   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ionic platform add android</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-安装并使用InAppBrowser\"><a href=\"#三-安装并使用InAppBrowser\" class=\"headerlink\" title=\"三 安装并使用InAppBrowser\"></a>三 安装并使用InAppBrowser</h1><h2 id=\"3-1-安装InAppBrowser\"><a href=\"#3-1-安装InAppBrowser\" class=\"headerlink\" title=\"3.1 安装InAppBrowser\"></a>3.1 安装InAppBrowser</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ionic plugin add cordova-plugin-inappbrowser</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-使用InAppBrowser\"><a href=\"#3-2-使用InAppBrowser\" class=\"headerlink\" title=\"3.2 使用InAppBrowser\"></a>3.2 使用InAppBrowser</h2><p>为方便起见，直接在Ionic官方案例<code>dash</code>页面中使用<code>InAppBrowser</code>。    </p>\n<p><strong>修改HTML文件</strong>：在刚下载的Ionic项目中找到<code>tab-dash.html</code>，在自定义标签<code>ion-content</code>最后添加下面代码：   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- InAppBrowser example begin --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>点击下面的按钮，将在系统自带浏览器中打开链接。<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button button-full button-positive&quot;</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">&quot;openInExternalBrowser()&quot;</span>&gt;</span></span><br><span class=\"line\">  在系统自带浏览器中打开链接</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- InAppBrowser example end --&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>修改JS文件</strong>：在刚下载的Ionic项目中找到<code>controllers.js</code>，在控制器<code>DashCtrl</code>最后添加下面代码：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// InAppBrowser example begin</span></span><br><span class=\"line\">$scope.<span class=\"property\">openInExternalBrowser</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在系统自带浏览器中打开链接</span></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;https://xiaogliu.github.io/&#x27;</span>,<span class=\"string\">&#x27;_system&#x27;</span>,<span class=\"string\">&#x27;location=yes&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// InAppBrowser example end</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"四-构建APP\"><a href=\"#四-构建APP\" class=\"headerlink\" title=\"四 构建APP\"></a>四 构建APP</h1><p>现在已经可以构建APP测试了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ionic build android -release</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多打包Ionic APP的信息可查看<a href=\"https://xiaogliu.github.io/2017/05/13/package-ionic-android-app/\">Ionic打包Android apk</a>   </p>\n</blockquote>\n<p><strong>完整代码请参考GitHub上这个仓库<a href=\"https://github.com/xiaogliu/Cordova_InAppBrowser_Plugin_Example\">Cordova_InAppBrowser_Plugin_Example</a></strong>   </p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"http://sourcefreeze.com/cordova-inappbrowser-plugin-example-using-ionic-framework/\">Cordova InAppBrowser Plugin Example using ionic framework</a>   </p>\n","categories":["Hybrid App"],"tags":["JavaScript","Hybrid App","Ionic"]},{"title":"修正Ionic-1.32模态框点击确定后APP假死","url":"https://xiaogliu.github.io/2017/05/14/fix-ionic1.32-click-modal-app-frozen/","content":"<p>目前Ionic V1最新版为Ionic V1.32，因为目前（2017-5-14）不管是JavaScirpt还是Angular都处于快速发展中，这意味着版本迭代会非常快，尤其对于框架来说，有时升级版本甚至是破坏性升级。而Ionic是基于Angular的，为了避免不断升级过程中大量踩坑，之前用Ionic-V1构建的APP暂时不进行大版本更新，等Angular稳定后再做升级考虑。同时，如果后续再有APP制作需求，采用当时可选的Ionic最新版。   </p>\n<p>也正是因为发展太快，Ionic团队对于旧版本bug的修复往往不能及时发布更新（甚至不做更新），但会在GitHub这个仓库<a href=\"https://github.com/driftyco/ionic-v1/issues/53\">driftyco/ionic-v1</a>对已知bug提供解决方案。   </p>\n<p>曾遇到下拉框在Chrome-V53中无效的情况，但这个问题已经在Ionic-V1.32中修复（详细讨论见这个issue <a href=\"https://github.com/driftyco/ionic/issues/8181#issuecomment-249667016\">Select/option doesn’t work in chrome 53 for touch events</a>），但V-1.32引入了新问题：模态框点击确定后APP假死，修复方案如下：   </p>\n<p>在<code>ionic-angular.js</code>和<code>ionic.bundle.js</code>中找到：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!modalStack.<span class=\"property\">length</span>) &#123;</span><br></pre></td></tr></table></figure>\n<p>替换为：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> otherSibling = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; modalStack.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (modalStack[i].<span class=\"property\">viewType</span> === self.<span class=\"property\">viewType</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// there are other modal (or popover, depending on viewType)</span></span><br><span class=\"line\">    otherSibling = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!otherSibling) &#123;</span><br></pre></td></tr></table></figure>\n<p>关于该问题的总结请查看：<a href=\"https://github.com/driftyco/ionic-v1/issues/53\">bug (and fix): app FROZEN: class popover-open not removed from body when closing a popover from a modal</a>   </p>\n<p>该问题最初的讨论在这：<a href=\"https://github.com/driftyco/ionic-v1/issues/71\">Popover and Modals interfering, body classes do not get removed - bug newly introduced with 1.3.2</a>   </p>\n","categories":["Hybrid App"],"tags":["JavaScript","Hybrid App","Ionic"]},{"title":"Ionic打包Android apk","url":"https://xiaogliu.github.io/2017/05/13/package-ionic-android-app/","content":"<p>开始前请确保已安装node环境,Ionic的安装和后续的许多前端工具的安装都依赖于node的包管理器npm。</p>\n<h1 id=\"一-安装Android打包环境\"><a href=\"#一-安装Android打包环境\" class=\"headerlink\" title=\"一 安装Android打包环境\"></a>一 安装Android打包环境</h1><h2 id=\"1-1-安装JDK并配置Java环境\"><a href=\"#1-1-安装JDK并配置Java环境\" class=\"headerlink\" title=\"1.1 安装JDK并配置Java环境\"></a>1.1 安装JDK并配置Java环境</h2><p>jdk官网<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">下载地址</a>   </p>\n<p>安装完成以后配置环境变量：   </p>\n<p><strong>JAVA_HOME</strong>：JDK的安装路径，这个环境变量本身不存在，需要创建，创建完则可以利用<code>%JAVA_HOME%</code>作为统一引用路径，其值为：jdk在你电脑上的安装路径。   </p>\n<p><strong>PATH</strong>：PATH属性已存在，可直接编辑。作用是用于配置路径，简化命令的输入，其值为：<code>%JAVA_HOME%\\bin</code>。   </p>\n<p><strong>CLASSPATH</strong>：用于编译时JAVA类的路径，其值为：<code>%JAVA_HOME%\\lib\\tools.jar</code>。   </p>\n<p>配置完成后，在命令行运行以下命令：<code>java -version</code>，<code>javac</code> 如果返回使用说明信息，则设置成功。   </p>\n<blockquote>\n<p>扩展阅读：安装开发类软件时经常会设置系统环境变量，如果想明白为什么要设置环境变量，可参考这篇<a href=\"http://www.cnblogs.com/zoupeiyang/p/4034517.html#2\">博文</a>。   </p>\n</blockquote>\n<h2 id=\"1-2-安装Android-Studio\"><a href=\"#1-2-安装Android-Studio\" class=\"headerlink\" title=\"1.2 安装Android Studio\"></a>1.2 安装Android Studio</h2><p>Android Studio官网<a href=\"https://developer.android.com/studio/index.html\">下载地址</a>   </p>\n<p>下载完成并安装然后向系统Path环境变量中添加两个值。分别是Android SDK中tools目录的路径和platform-tools的路径。例如：<code>X:\\software\\Android\\sdk\\tools</code>;<code>X:\\software\\Android\\sdk\\platform-tools</code>;   </p>\n<p>配置完成后，在命令行运行<code>android</code>并且回车，如果返回使用说明信息，则设置成功。   </p>\n<blockquote>\n<p>有文章称这里可以只下载Android SDK，不需要一并下载Android Studio，未验证。   </p>\n</blockquote>\n<h2 id=\"1-3-安装Gradle\"><a href=\"#1-3-安装Gradle\" class=\"headerlink\" title=\"1.3 安装Gradle\"></a>1.3 安装Gradle</h2><p>Gradle官网<a href=\"https://services.gradle.org/distributions/\">下载地址</a>   </p>\n<p>下载后无需安装，解压即可使用，但需要设置环境变量：   </p>\n<p><strong>GRADLE_HOME</strong>：Gradle解压目录，利用<code>GRADLE_HOME</code>作为统一引用路径，其值为：Gradle在你电脑上解压路径，比如<code>X:\\software\\Android\\gradle-3.5</code>   </p>\n<p><strong>PATH</strong>：其值为<code>%GRADLE_HOME%\\bin</code>   </p>\n<p>配置完成后，在命令行运行<code>gradle -v</code>并且回车，如果返回版本信息，则设置成功。   </p>\n<blockquote>\n<p>Gradle是Java构建工具，更多Java构建工具可参考这篇博文<a href=\"http://blog.csdn.net/napolunyishi/article/details/39345995\">Java构建工具：Ant vs Maven vs Gradle</a></p>\n</blockquote>\n<h1 id=\"二-Ionic打包流程\"><a href=\"#二-Ionic打包流程\" class=\"headerlink\" title=\"二 Ionic打包流程\"></a>二 Ionic打包流程</h1><p>首先确保已有Ionic项目，如果还没有，可以下载Ionic官网示例进行接下来的打包流程。下载方法是在命令行中输入一下命令：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ionic start myApp tabs</span><br></pre></td></tr></table></figure>\n<p>下载完成后进入<code>myApp</code>目录进行接下来的操作。   </p>\n<h2 id=\"2-1-平台部署\"><a href=\"#2-1-平台部署\" class=\"headerlink\" title=\"2.1 平台部署\"></a>2.1 平台部署</h2><p>Ionic默认没有添加任何平台，需要我们手动添加，添加命令为<code>ionic platform add &lt;platform-name&gt;</code>   </p>\n<p>比如添加Android平台：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ionic platform add android</span><br></pre></td></tr></table></figure>\n<p>执行完毕后，在开发目录下的platform目录会多一个android目录。   </p>\n<p><strong>这里有一点需要注意</strong>：因为项目中是用Gradle作为构建工具，但在接下来的打包过程中却可能因为下载Gradle时报错，错误信息一般包含下面提示：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">java.net.SocketException:Connection reset</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>此时简单解决方案有两种：   </p>\n<ol>\n<li><p>在刚生成的这个目录android目录下新建<code>gradle</code>文件夹，并在<code>gradle</code>文件夹中放入<code>gradle-x.x-all.zip</code>文件（<a href=\"https://services.gradle.org/distributions/\">下载地址</a>），同时添加环境变量：<code>CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL</code>，值为<code>../gradle-x.x-all.zip</code>   </p>\n</li>\n<li><p>在<code>platforms\\android\\cordova\\lib\\builders</code>目录下找到<code>GradleBuilder.js</code>，<br>将下面的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var distributionUrl = process.env[&#x27;CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL&#x27;] || &#x27;https\\\\://services.gradle.org/distributions/gradle-3.3-all.zip&#x27;</span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var distributionUrl = process.env[&#x27;CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL&#x27;] || &#x27;https://services.gradle.org/distributions/gradle-3.3-all.zip&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p><strong>方法2未测试</strong>，更多内容可参考<a href=\"http://stackoverflow.com/questions/29874564/ionic-build-android-error-when-download-gradle\">ionic build android error when download gradle</a>   </p>\n</blockquote>\n<h2 id=\"2-2-打包\"><a href=\"#2-2-打包\" class=\"headerlink\" title=\"2.2 打包\"></a>2.2 打包</h2><p>打包命令如下：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ionic build android -release</span><br></pre></td></tr></table></figure>\n<p>打包完成后会提示apk输出目录，此时的apk文件没有签名，无法使用。</p>\n<blockquote>\n<p>第一次打包速度很慢，大概需要1小时左右。</p>\n</blockquote>\n<h2 id=\"2-3-设置签名\"><a href=\"#2-3-设置签名\" class=\"headerlink\" title=\"2.3 设置签名\"></a>2.3 设置签名</h2><ul>\n<li>创建key，需要用到<code>keytool.exe</code>（位于<code>jdkx.x.x\\jre\\bin</code>目录下）；   </li>\n<li>使用产生的key对apk设置签名用到的是<code>jarsigner.exe</code>(位于<code>jdkx.x.x\\bin</code>目录下)   </li>\n</ul>\n<p>需要把上述两个软件所在的目录添加到环境变量PATH中，接下来   </p>\n<p><strong>创建key</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">keytool -genkey -alias demo.keystore -keyalg RSA -validity 40000 -keystore demo.keystore</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>genkey：产生密钥</li>\n<li>alias demo.keystore：秘钥别名 demo.keystore</li>\n<li>keyalg RSA：使用RSA算法对签名加密</li>\n<li>validity 40000：有效期限40000天</li>\n<li>keystore：秘钥库别名 demo.keystore</li>\n</ul>\n<p><strong>给apk设置签名</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore demo.keystore -signedjar demo_signed.apk demo.apk demo.keystore</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>verbose 输出签名的详细信息</li>\n<li>keystore demo.keystore 密钥库名称及放置路径</li>\n<li>signedjar demor_signed.apk demo.apk demo.keystore 三个参数的含义分别为：签名后产生的文件demo_signed，要签名的文件demo.apk和密钥库demo.keystore</li>\n</ul>\n<blockquote>\n<p>可以在构建过程中<strong>自动添加签名</strong>，方法如下：在platforms\\android目录新建名为release-signing.properties的文件，文件内容如下：<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">storeFile=path/to/keystore</span><br><span class=\"line\">keyAlias=your key aliasstore</span><br><span class=\"line\">Password=your store passwordkey</span><br><span class=\"line\">Password=your key password</span><br></pre></td></tr></table></figure><br>  使用<code>ionic build --release android</code>构建后，文件即是已签名的安装包。</p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"http://www.cnblogs.com/shikelong/p/4480975.html\">window下Ionic环境安装</a><br>【2】<a href=\"http://www.jianshu.com/p/0588510fbb97\">ionic环境配置和android打包签名</a><br>【3】<a href=\"http://stackoverflow.com/questions/29874564/ionic-build-android-error-when-download-gradle\">ionic build android error when download gradle</a></p>\n","categories":["Hybrid App"],"tags":["JavaScript","Hybrid App","Ionic","npm"]},{"title":"package.json使用说明(npm script)","url":"https://xiaogliu.github.io/2017/05/13/package.json-instruction/","content":"<p>这篇文章需要更新啦：需要区分 package.json 和 package-lock.json 及更新机制。</p>\n<p><a href=\"https://github.com/SamHwang1990/blog/issues/7\">https://github.com/SamHwang1990/blog/issues/7</a><br><a href=\"https://stackoverflow.com/questions/44297803/what-is-the-role-of-the-package-lock-json\">https://stackoverflow.com/questions/44297803/what-is-the-role-of-the-package-lock-json</a><br><a href=\"https://stackoverflow.com/questions/45022048/why-does-npm-install-rewrite-package-lock-json\">https://stackoverflow.com/questions/45022048/why-does-npm-install-rewrite-package-lock-json</a><br><a href=\"https://docs.npmjs.com/about-semantic-versioning\">https://docs.npmjs.com/about-semantic-versioning</a><br><a href=\"https://www.zhihu.com/question/62331583\">https://www.zhihu.com/question/62331583</a>   </p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p><code>package.json</code>是<code>npm</code>本地安装包管理文件，主要作用如下：   </p>\n<ul>\n<li>充当项目所依赖的安装包的文档说明；   </li>\n<li>可以指定安装包的版本；   </li>\n<li><strong>执行<code>npm install</code>命令，可以安装<code>package.json</code>中指定的安装包。这意味着项目移植更加便捷。</strong>   </li>\n</ul>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"必须内容\"><a href=\"#必须内容\" class=\"headerlink\" title=\"必须内容\"></a>必须内容</h2><p>一个<code>package.json</code>文件，至少包括<code>name</code>和<code>version</code>两项内容：   </p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;my-awesome-package&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自动创建\"><a href=\"#自动创建\" class=\"headerlink\" title=\"自动创建\"></a>自动创建</h2><p>使用<code>npm init</code>命令可以自动创建<code>package.json</code>文件，在命令行中采用问答的形式填充内容，除了<code>name</code>和<code>version</code>是必填的，其他内容可以为空。   </p>\n<p>当然，也可以直接使用<code>npm init --yes</code>或者<code>npm init --y</code>命令直接生成<code>package.json</code>，直接生成的文件内容如下：   </p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;my_package&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;repository&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;git&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://github.com/ashleygwilliams/my_package.git&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;bugs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://github.com/ashleygwilliams/my_package/issues&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;homepage&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://github.com/ashleygwilliams/my_package&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>说明如下：   </p>\n<ul>\n<li>name: the current directory name</li>\n<li>version: always 1.0.0</li>\n<li>description: info from the readme, else an empty string “”</li>\n<li>main: always index.js</li>\n<li>scripts: by default creates a empty test script</li>\n<li>keywords: empty</li>\n<li>author: empty</li>\n<li>license: ISC</li>\n<li>bugs: info from the current directory, if present</li>\n<li>homepage: info from the current directory, if present</li>\n</ul>\n<blockquote>\n<p>在<code>scripts</code>里面添加的内容就是传说中的<strong>npm script</strong>内容了，除了简化命令操作，还可以在本地执行Gulp、Babel等命令（如果知识本地安装而非全局安装，必须使用<strong>npm script</strong>的形式调用Gulp/Babel命令）</p>\n</blockquote>\n<h2 id=\"指定依赖安装包\"><a href=\"#指定依赖安装包\" class=\"headerlink\" title=\"指定依赖安装包\"></a>指定依赖安装包</h2><p>依赖安装包分为<code>dependencies</code>和<code>devDependencies</code>两种类型，其中带<code>dev</code>前缀的表示开发环境依赖库，不带<code>dev</code>前缀的表示生产环境依赖库，在使用<code>npm</code>命令行工具安装依赖包时可以指定添加到哪个库。   </p>\n<p>添加到<code>dependencies</code>使用下面命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install &lt;package_name&gt; --save</span><br></pre></td></tr></table></figure>\n<p>添加到<code>devDependencies</code>使用下面命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install &lt;package_name&gt; --save-dev</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果在命令后面家<code>-D</code>flag，可以直接将插件添加到<code>package.json</code>文件中去，比如<code>npm install &lt;package_name&gt; --save-dev -D</code>将<code>&lt;packge_name&gt;</code>添加到<code>&quot;devDependencies&quot;: &#123;&#125;</code>中去。</p>\n</blockquote>\n<p><strong>问题：为什么要区分<code>dependencies</code>和<code>devDependencies</code>？</strong>   </p>\n<p>因为在生产环境中的依赖包和开发环境的依赖包可能不一样，区分<code>dependencies</code>和<code>devDependencies</code>是为了方便包管理。   </p>\n<p>比如在生产环境中只安装<code>dependencies</code>里面的依赖包，执行下面的命令就可以：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --production</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于在生产环境中如何只安装<code>dependencies</code>里面的依赖包可查看<a href=\"https://github.com/npm/npm/issues/1434\">option to not install devDependencies</a>   </p>\n</blockquote>\n<h2 id=\"npm-script\"><a href=\"#npm-script\" class=\"headerlink\" title=\"npm script\"></a>npm script</h2><p>很多工具本地安装要比全局安装好，这样可以根据不同项目进行不用设置。本地安装的工具，比如<code>gulp</code>, <code>babel</code>，可以通过<code>npm script</code>进行管理，比如启动Gulp   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;gulp-task&quot;</span>: <span class=\"string\">&quot;gulp gulp-task&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>更多内容可查看 npm 对<code>package.json</code>的官方描述：<a href=\"https://docs.npmjs.com/files/package.json\">Specifics of npm’s package.json handling</a>   </p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://docs.npmjs.com/getting-started/using-a-package.json\">Using a package.json</a><br>【2】<a href=\"https://github.com/npm/npm/issues/1434\">option to not install devDependencies</a><br>【3】<a href=\"https://docs.npmjs.com/files/package.json\">Specifics of npm’s package.json handling</a>   </p>\n","categories":["JavaScript"],"tags":["JavaScript","npm"]},{"title":"Gulp安装及使用","url":"https://xiaogliu.github.io/2017/05/10/install-and-use-gulp/","content":"<h1 id=\"Gulp用途\"><a href=\"#Gulp用途\" class=\"headerlink\" title=\"Gulp用途\"></a>Gulp用途</h1><p>Gulp是自动任务执行工具，主要用途是把开发者从重复劳动中解放出来，Gulp可以做但不限于以下工作：</p>\n<ul>\n<li>转换、压缩、合并js或者css文件（包括Less/Sass文件转CSS文件，ECMA-262高版本转低版本）</li>\n<li>设置某次改动后自动更新版本号、提交commit到git等</li>\n<li>在编辑器中点击保存按钮自动刷新浏览器页面</li>\n<li>运行代码分析</li>\n<li>快速运行单元测试</li>\n</ul>\n<p>其中压缩、转换、合并js或者css文件是最为常用功能。</p>\n<blockquote>\n<p>Gulp借鉴了Unix操作系统的管道（pipe）思想，很多人认为，在操作上，它要比Grunt简单</p>\n</blockquote>\n<h1 id=\"Gulp-安装\"><a href=\"#Gulp-安装\" class=\"headerlink\" title=\"Gulp 安装\"></a>Gulp 安装</h1><p>如果之前全局安装过Gulp，先卸载全局安装的Gulp<code>npm rm --global gulp</code>，然后开始下面的步骤。</p>\n<blockquote>\n<p>Gulp维护团队已不再建议全局安装<code>gulp</code>，可参参考这个issue<a href=\"https://github.com/gulpjs/gulp/issues/1795\">gulp vs gulp-cli reasoning unclear in getting started guide</a>，但在<a href=\"http://www.gulpjs.com.cn/docs/getting-started/\">gulp中文网</a> 还未更新，依旧建议全局安装<code>gulp</code>，安装时请注意。</p>\n</blockquote>\n<p><strong>步骤一</strong>，全局安装Gulp命令行工具   </p>\n<p>任意目录执行下面命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install --global gulp-cli</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>全局安装不是必须的，如果只是在项目中引入Gulp而不希望全局安装Gulp命令行工具，可以通过<strong>npm script</strong>实现对Gulp的调用。</p>\n</blockquote>\n<p><strong>步骤二</strong>，项目本地安装Gulp   </p>\n<p>项目根目录执行下面命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure>\n<p><strong>步骤三</strong>，常见<code>gulpfile.js</code>文件</p>\n<p>在项目根目录新建<code>gulpfile.js</code>文件，并添加下面内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// place code for your default task here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>default</code>是输入<code>gulp</code>以后默认执行的任务，如果要执行过个任务，可以用这个命令<code>gulp &lt;task&gt; &lt;othertask&gt;</code></p>\n</blockquote>\n<p><strong>步骤四</strong>，测试是否成功</p>\n<p>输入<code>gulp</code>命令，如果输出以下打印内容，说明Gulp安装成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br><span class=\"line\">[16:22:02] Using gulpfile x:\\study\\myProject\\calculator_for_house_loan\\jquery\\gulpfile.js</span><br><span class=\"line\">[16:22:02] Starting <span class=\"string\">&#x27;default&#x27;</span>...</span><br><span class=\"line\">[16:22:02] Finished <span class=\"string\">&#x27;default&#x27;</span> after 63 μs</span><br></pre></td></tr></table></figure>\n<h1 id=\"Gulp配置\"><a href=\"#Gulp配置\" class=\"headerlink\" title=\"Gulp配置\"></a>Gulp配置</h1><p>Gulp强大之处在于可以引入插件实现一系列功能。下面是引入压缩js文件插件的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;js/app.js&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;build&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 如果使用ES6语法，<code>gulp-uglify</code>会报错<code>GulpUglifyError: unable to minify JavaScript</code>，需要引入Babel对ES6语法进行转换，更改后代码如下（同时引入错误标记插件<code>gulp-util</code>）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入gulp</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入依赖模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-babel&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-util&#x27;</span>); <span class=\"comment\">// 错误标记插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;js/main_js.js&#x27;</span>) <span class=\"comment\">// 加return，finish后马上结束，但显示总时间长</span></span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123; gutil.<span class=\"title function_\">log</span>(gutil.<span class=\"property\">colors</span>.<span class=\"title function_\">red</span>(<span class=\"string\">&#x27;[Error]&#x27;</span>), err.<span class=\"title function_\">toString</span>()); &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;build&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>gulp.task</code>, <code>gulp.src</code>, <code>gulp.dest</code>等属于Gulp的API，多更信息可参看<a href=\"https://github.com/gulpjs/gulp/blob/master/docs/API.md\">gulp API docs</a>   </p>\n</blockquote>\n<h1 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h1><ul>\n<li>下面是实际使用的一个简单案例   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> minify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sass&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./css/main.scss&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>()) <span class=\"comment\">// 转化scss文件</span></span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">minify</span>()) <span class=\"comment\">// 转化后压缩</span></span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist/css/&#x27;</span>))</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minjs&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./js/main.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>()) <span class=\"comment\">// 压缩js文件</span></span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./dist/js/&#x27;</span>))</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置watch，自动转化、压缩</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./css/main.scss&#x27;</span>, [<span class=\"string\">&#x27;sass&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./js/main.js&#x27;</span>, [<span class=\"string\">&#x27;minjs&#x27;</span>]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>下面是实际使用的一个复杂案例   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 gulp</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引入组件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jshint = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-jshint&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-concat&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-rename&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-util&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;md5-file&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> replace = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-replace-task&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> source = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vinyl-source-stream&#x27;</span>);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vinyl-buffer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> browserify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;browserify&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nodemon = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-nodemon&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sass&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oPath = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;sass&#x27;</span>: <span class=\"string\">&#x27;common/css/*.css&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;directives&#x27;</span>: <span class=\"string\">&#x27;common/engine/directives/**/*.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;services&#x27;</span>: <span class=\"string\">&#x27;common/engine/services/**/*.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;templates&#x27;</span>: <span class=\"string\">&#x27;@(supplyCloud|common|integrated|platformService)/views/**/*.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;controllers&#x27;</span>: <span class=\"string\">&#x27;@(supplyCloud|common|integrated|platformService)/controllers/**/*.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;bundles&#x27;</span>: <span class=\"string\">&#x27;public/@(js|css)/!(version).*&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;core&#x27;</span>: [</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/engine/setting.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/engine/tools.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/engine/common.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/js/zhl.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/engine/app.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/engine/route_cloud.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/engine/directives.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/engine/filters.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/engine/factory.js&#x27;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&#x27;vendor&#x27;</span>: [</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/lodash.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/angular/angular.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/angular/angular-translate.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/angular/angular-translate-loader-static-files.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/angular/angular-sanitize.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/angular/angular-resource.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/bootstrap/js/bootstrap.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/angular/angular-route.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/angular/angular-cookies.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/file-upload/dist/angular-file-upload.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/md5.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/big.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/chart.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/jquery/jquery-ui.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/jquery/jquery.mousewheel.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/datetimepicker/js/bootstrap-datetimepicker.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/datetimepicker/js/locales/bootstrap-datetimepicker.zh-CN.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/web-im/strophe-1.2.8.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/web-im/webim.config.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;common/vendors/web-im/websdk-1.1.3.js&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&#x27;vendorCss&#x27;</span>: [</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/vendors/bootstrap/css/bootstrap.min.css&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/vendors/Font-Awesome/css/font-awesome.min.css&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;common/vendors/datetimepicker/css/bootstrap-datetimepicker.min.css&#x27;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">NODE_ENV</span> = <span class=\"string\">&#x27;production&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> createErrorHandler = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> err.<span class=\"property\">cause</span>.<span class=\"property\">stack</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error from &#x27;</span> + name + <span class=\"string\">&#x27; in compress task&#x27;</span>, err.<span class=\"property\">cause</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">function</span> (<span class=\"params\">env</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">NODE_ENV</span> = env;</span><br><span class=\"line\">  <span class=\"title function_\">nodemon</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">script</span>: <span class=\"string\">&#x27;server.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ext</span>: <span class=\"string\">&#x27;js html json&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">watch</span>: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;server.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;env.json&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;app&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;config&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;resources&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">delay</span>: <span class=\"string\">&#x27;2000&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ignor</span>: [<span class=\"string\">&#x27;gulpfile.js&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">env</span>: &#123;<span class=\"string\">&#x27;NODE_ENV&#x27;</span>: env&#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;development&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">start</span>(<span class=\"string\">&#x27;development&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;production&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">start</span>(<span class=\"string\">&#x27;production&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;compress&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">pump</span>([</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;lib/*.js&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">uglify</span>(),</span><br><span class=\"line\">    gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    cb</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;browserify&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">browserify</span>()</span><br><span class=\"line\">  .<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./common/engine/util.js&#x27;</span>, &#123;<span class=\"attr\">expose</span>: <span class=\"string\">&#x27;util&#x27;</span>&#125;)</span><br><span class=\"line\">  .<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./common/vendors/moment.js&#x27;</span>, &#123;<span class=\"attr\">expose</span>: <span class=\"string\">&#x27;moment&#x27;</span>&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">exclude</span>(<span class=\"string\">&#x27;version&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">bundle</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">source</span>(<span class=\"string\">&#x27;common.bundle.js&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">buffer</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"title function_\">createErrorHandler</span>(<span class=\"string\">&#x27;uglify&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;public/js&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查脚本</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;lint&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>([oPath.<span class=\"property\">directives</span>, oPath.<span class=\"property\">services</span>])</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">jshint</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(jshint.<span class=\"title function_\">reporter</span>(<span class=\"string\">&#x27;default&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并，压缩指令文件</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;min-directives&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(oPath.<span class=\"property\">directives</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">concat</span>(<span class=\"string\">&#x27;directive.min.js&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"title function_\">createErrorHandler</span>(<span class=\"string\">&#x27;uglify&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;public/js&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并，压缩服务文件</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;min-services&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(oPath.<span class=\"property\">services</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">concat</span>(<span class=\"string\">&#x27;services.min.js&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"title function_\">createErrorHandler</span>(<span class=\"string\">&#x27;uglify&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;public/js&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并，压缩项目核心文件</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;min-core&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(oPath.<span class=\"property\">core</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">concat</span>(<span class=\"string\">&#x27;core.min.js&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"title function_\">createErrorHandler</span>(<span class=\"string\">&#x27;uglify&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;public/js&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并，压缩第三方库</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;min-vendor&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(oPath.<span class=\"property\">vendor</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">concat</span>(<span class=\"string\">&#x27;vendor.min.js&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"title function_\">createErrorHandler</span>(<span class=\"string\">&#x27;uglify&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;public/js&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//合并压缩css</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;sass&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(oPath.<span class=\"property\">sass</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>(&#123;<span class=\"attr\">outputStyle</span>: <span class=\"string\">&#x27;compressed&#x27;</span>&#125;).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, sass.<span class=\"property\">logError</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">concat</span>(<span class=\"string\">&#x27;zhl.css&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&quot;public/css&quot;</span>));</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(oPath.<span class=\"property\">vendorCss</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>(&#123;<span class=\"attr\">outputStyle</span>: <span class=\"string\">&#x27;compressed&#x27;</span>&#125;).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, sass.<span class=\"property\">logError</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">concat</span>(<span class=\"string\">&#x27;vendor.min.css&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;public/css&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为所有controller和template增加版本hash</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;version&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> objHash = &#123;&#125;,</span><br><span class=\"line\">  arrHash = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  objHash.<span class=\"property\">build</span> = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()).<span class=\"title function_\">toLocaleString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//templates</span></span><br><span class=\"line\">    glob.<span class=\"title function_\">sync</span>(oPath.<span class=\"property\">templates</span>).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">      objHash[file] = md5.<span class=\"title function_\">sync</span>(file).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//controlers</span></span><br><span class=\"line\">    glob.<span class=\"title function_\">sync</span>(oPath.<span class=\"property\">controllers</span>).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">      objHash[file] = md5.<span class=\"title function_\">sync</span>(file).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//min and bundle files</span></span><br><span class=\"line\">    glob.<span class=\"title function_\">sync</span>(oPath.<span class=\"property\">bundles</span>).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">      objHash[file] = md5.<span class=\"title function_\">sync</span>(file).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(objHash).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">      arrHash.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;&quot;&#x27;</span> + key + <span class=\"string\">&#x27;&quot;&#x27;</span> + <span class=\"string\">&#x27; : &#x27;</span> + <span class=\"string\">&#x27;&quot;&#x27;</span> + objHash[key] + <span class=\"string\">&#x27;&quot;&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./resources/config/version.js.tpl&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">replace</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">patterns</span>: [&#123;</span><br><span class=\"line\">        <span class=\"attr\">match</span>: <span class=\"string\">&#x27;hash&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">replacement</span>: arrHash.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; , &#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ]&#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&#x27;version.js&#x27;</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./config&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">browserify</span>()</span><br><span class=\"line\">    .<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./config/version.js&#x27;</span>, &#123;<span class=\"attr\">expose</span>: <span class=\"string\">&#x27;version&#x27;</span>&#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">bundle</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">source</span>(<span class=\"string\">&#x27;version.js&#x27;</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">buffer</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"title function_\">createErrorHandler</span>(<span class=\"string\">&#x27;uglify&#x27;</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./public/js&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发时自动打包任务</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, [<span class=\"string\">&#x27;production&#x27;</span>, <span class=\"string\">&#x27;min&#x27;</span>, <span class=\"string\">&#x27;browserify&#x27;</span>, <span class=\"string\">&#x27;version&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>([oPath.<span class=\"property\">sass</span>, oPath.<span class=\"property\">vendorCss</span>], [<span class=\"string\">&#x27;sass&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(oPath.<span class=\"property\">directives</span>, [<span class=\"string\">&#x27;min-directives&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(oPath.<span class=\"property\">services</span>, [<span class=\"string\">&#x27;min-services&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(oPath.<span class=\"property\">core</span>, [<span class=\"string\">&#x27;min-core&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;common/engine/util.js&#x27;</span>, [<span class=\"string\">&#x27;browserify&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>([oPath.<span class=\"property\">templates</span>, oPath.<span class=\"property\">controllers</span>, oPath.<span class=\"property\">bundles</span>], [<span class=\"string\">&#x27;version&#x27;</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//合并压缩</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;min&#x27;</span>, [<span class=\"string\">&#x27;min-directives&#x27;</span>, <span class=\"string\">&#x27;min-services&#x27;</span>, <span class=\"string\">&#x27;min-core&#x27;</span>, <span class=\"string\">&#x27;min-vendor&#x27;</span>, <span class=\"string\">&#x27;sass&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发布前打包任务</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;build&#x27;</span>, [<span class=\"string\">&#x27;min&#x27;</span>, <span class=\"string\">&#x27;browserify&#x27;</span>, <span class=\"string\">&#x27;version&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认任务</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, [<span class=\"string\">&#x27;production&#x27;</span>, <span class=\"string\">&#x27;min&#x27;</span>, <span class=\"string\">&#x27;browserify&#x27;</span>, <span class=\"string\">&#x27;version&#x27;</span>, <span class=\"string\">&#x27;watch&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】 <a href=\"https://github.com/gulpjs/gulp/blob/master/docs/README.md\">gulp documentation</a><br>【2】 <a href=\"http://brandonclapp.com/what-is-gulp-js-and-why-use-it/\">What is gulp.js and why use it?</a><br>【3】 <a href=\"http://javascript.ruanyifeng.com/tool/gulp.html#comment-3299560540\">Gulp：任务自动管理工具</a></p>\n","categories":["Tools"],"tags":["Babel","Gulp","工程化"]},{"title":"Babel安装及使用","url":"https://xiaogliu.github.io/2017/05/09/install-and-use-babel/","content":"<h1 id=\"Babel用途\"><a href=\"#Babel用途\" class=\"headerlink\" title=\"Babel用途\"></a>Babel用途</h1><p>Javascript最新语法（ECMA-262最新版）发布后，需过段时间浏览器厂家才能给予支持，这样在项目开发中使用了JS最新语法后，发布生产前需将代码装换为兼容性更好的ECMA-262版本，<strong>Babel便是完成这项工作的工具</strong>。   </p>\n<h1 id=\"Babel-安装\"><a href=\"#Babel-安装\" class=\"headerlink\" title=\"Babel 安装\"></a>Babel 安装</h1><p><a href=\"http://babeljs.io/docs/setup/\">Babel官网</a> 提供了多种安装教程，这里介绍<code>CLI</code>安装方式和在<code>Gulp</code>中使用的安装方式。   </p>\n<h2 id=\"CLI-安装\"><a href=\"#CLI-安装\" class=\"headerlink\" title=\"CLI 安装\"></a>CLI 安装</h2><p>推荐在项目中本地安装的方式，而非全局安装，原因如下：   </p>\n<ul>\n<li><p>不同项目可能依赖不同版本的Babel，方便后续独立升级；   </p>\n</li>\n<li><p>因为是本地安装，所以不依赖系统环境，项目移植、设置都更方便。   </p>\n</li>\n</ul>\n<blockquote>\n<p>主要是第一个原因。如果不小心全局安装了，用一下命令卸载 <code>npm uninstall --global babel-cli</code>   </p>\n</blockquote>\n<p><strong>步骤 1</strong>，本地安装Babel CLI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p><strong>步骤 2</strong>，在项目根目录下面新建并设置<code>package.json</code>文件，初始设置参考下面内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;my-project&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;babel-cli&quot;</span>: <span class=\"string\">&quot;^6.0.0&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>步骤 3</strong>，设置启动命令。   </p>\n<p>因为是本地安装，所以无法直接使用<code>Babel</code>这样的全局命令，我们需要将启动命令添加到<a href=\"https://docs.npmjs.com/misc/scripts\">npm script</a>中，以此启动本地 Babel。添加方法是在刚才新建的<code>package.json</code>文件中添加<code>&quot;script&quot;</code>，内容如下：   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;my-project&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">+   <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">+     <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;babel src -d dist&quot;</span></span><br><span class=\"line\">+   &#125;,</span><br><span class=\"line\">   <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">     <span class=\"string\">&quot;babel-cli&quot;</span>: <span class=\"string\">&quot;^6.0.0&quot;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>说明：1、<code>build</code>是启动本地Babel的命令，也可以设置其他名字；2、”babel src -d dist” 中<code>src</code>指待转换的目录，该目录必须存在，<code>dist</code>指目标转换目录，可以不存在，Babel转化过程中自动创建。   </p>\n</blockquote>\n<p>此时通过下面的命令就可以启动Babel了：   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p><strong>步骤 4</strong>，指定转化版本。   </p>\n<p>经过前三个步骤，虽然Babel可以工作了，但并没有进行版本转换，前后代码相同。这就需要我们指定转化版本了，这也是为什么推荐本地安装的原因：不同项目可能有不同版本转化的需求。    </p>\n<p>首先，在项目根目录下建立<code>.babelrc</code>文件，这个文件数据Babel的配置文件。然后安装并设置转换规则：   </p>\n<p>安装规则：   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure>\n<p>上述命令代表按照ES2015+进行转换，也可以制定特定的规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转换规则</span></span><br><span class=\"line\">$ npm install babel-preset-es2015 --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转换规则</span></span><br><span class=\"line\">$ npm install babel-preset-react --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转换规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install babel-preset-stage-0 --save-dev</span><br><span class=\"line\">$ npm install babel-preset-stage-1 --save-dev</span><br><span class=\"line\">$ npm install babel-preset-stage-2 --save-dev</span><br><span class=\"line\">$ npm install babel-preset-stage-3 --save-dev</span><br></pre></td></tr></table></figure>\n<p>最后，将需要的规则添加到<code>.babelrc</code>中   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [<span class=\"string\">&quot;env&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新运行<code>npm run build</code>，便可以如期转换。</p>\n<blockquote>\n<p><a href=\"http://babeljs.io/docs/setup/\">Babel官网</a> 提示，用 npm 2.x 运行 Babel 6.x 会报错，但我并没有遇到，如果使用过程中遇到可升级到 npm 3.x 或者继续使用 npm 2.x <a href=\"https://docs.npmjs.com/cli/dedupe\">参考这里</a> 解决</p>\n</blockquote>\n<h2 id=\"Gulp-安装\"><a href=\"#Gulp-安装\" class=\"headerlink\" title=\"Gulp 安装\"></a>Gulp 安装</h2><p><strong>步骤 1</strong>，在Gulp中引入Babel依赖<code>gulp-babel</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-babel&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;default&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&quot;src/app.js&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&quot;dist&quot;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>‘.pipe(babel())’一般放在Gulp流中</p>\n</blockquote>\n<p><strong>步骤 2</strong>，指定转化版本。   </p>\n<p>同“CLI 安装”步骤4。</p>\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h1><p>【1】 <a href=\"http://babeljs.io/docs/setup/\">How to use Babel with your tool of choice</a><br>【2】 <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html\">Babel 入门教程</a><br>【3】 <a href=\"https://docs.npmjs.com/misc/scripts\">How npm handles the “scripts” field</a><br>【4】 <a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\">npm scripts 使用指南</a></p>\n","categories":["Tools"],"tags":["Babel","Gulp","工程化"]},{"title":"【译】AngularJS $watch() , $digest() and $apply()","url":"https://xiaogliu.github.io/2017/04/27/watch-digest-apply-in-angular/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>从某种程度上讲，<code>$watch()</code>,<code>$digest()</code>和<code>$apply()</code>是AngularJS核心函数的一部分，明白他们是怎么工作的，对于理解AngularJS至关重要。   </p>\n<p>当在视图中与<code>$scope</code>对象上的变量进行数据绑定时，AngularJS自动创建了“监听”事件，这意味着AngularJS时刻监测着<code>$scope</code>对象上变量的变化。“监听”工作是通过<code>$scope.$watch()</code>函数创建的，这也是这篇文章接下来要讲述的。   </p>\n<p>在应用程序很多关键地方，AngularJS都会调用<code>$scope.$digest()</code>函数。如果某个被监听的变量发生了变化，<code>$digest()</code>函数会遍历所有watcher（译者注：可以理解为<code>watch()</code>函数创建的监听器），检查是否还有其他变量发生了变化。如果检测到有变量发生了变化，对应的监听函数(listener function)就会执行，监听函数可以执行任何需要的操作，比如更新视图中对应的文本信息。所以，<strong><code>$digest()</code>函数就是触发绑定的数据进行更新</strong>。   </p>\n<p>大部分时候，AngularJS会自动调用<code>$scope.$watch()</code>和<code>$scope.$digest()</code>函数，但有些时候你必须自己调用他们。因此，知道他们是怎么工作的是很有必要的。   </p>\n<p><strong><code>$scope.$apply()</code>函数用来执行某些代码，代码执行完成后调用<code>$scope.$digest()</code></strong>，所以此时所有的watcher都会被检查。因此当把AngularJS和其他代码集成时<code>$apply()</code>很有用。   </p>\n<p>接下来，会详细介绍<code>$watch()</code>,<code>$digest()</code>和<code>$apply()</code>函数。   </p>\n<h1 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"$watch()\"></a>$watch()</h1><p><code>$scope.watch()</code>函数在变量上创建watcher。当创建watcher时，向<code>$watch()</code>函数传递了两个函数作为入参：   </p>\n<ul>\n<li>值函数（value function）   </li>\n<li>监听函数（listener function）（译者注：即回调函数，当检测到变化时在这个函数中定义要执行的操作）   </li>\n</ul>\n<p>这是一个例子：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$scope.$watch(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>第一个函数时值函数，第二个函数是监听函数。   </p>\n<p>值函数应该返回被监听变量的值。AngularJS会检查当前返回的值和最后一次返回的值是否相同，这样AngularJS就可以判断变量的值是否发生变化，下面是一个例子：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$scope.$watch(<span class=\"keyword\">function</span> (<span class=\"params\">scope</span>) &#123; <span class=\"keyword\">return</span> scope.<span class=\"property\">data</span>.<span class=\"property\">myVar</span> &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，值函数返回了<code>$scope</code>对象的变量<code>scope.data.myVar</code>。如果这个变量的值发生了变化，不同的值便会返回，这样，AngularJS就会触发监听函数。   </p>\n<p>注意这里值函数是将scope作为入参的（没有前缀$）。通过这个参数，值函数可以访问<code>$scope</code>对象及定义在上面的变量。当然，值函数也可以监听全局变量，但更多时候，只是监听<code>$scope</code>对象上的变量。   </p>\n<p>如果被监听的变量值发生了变化，监听函数可以执行定义在其上的任何操作。比如，改变另一个变量的值，或者更新某个html元素或者其他什么事。下面是一个例子：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$scope.$watch(<span class=\"keyword\">function</span> (<span class=\"params\">scope</span>) &#123; <span class=\"keyword\">return</span> scope.<span class=\"property\">data</span>.<span class=\"property\">myVar</span> &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">function</span> (<span class=\"params\">newValue, oldValue</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;someId&quot;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;&lt;b&gt;&quot;</span> + newValue + <span class=\"string\">&quot;&lt;/b&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，把id为<code>someId</code>的html元素的内容更新为变量<code>scope.data.myVar</code>的新值，同时被<code>b</code>元素包裹以便使内容加粗。当然，也可以通过<code>&#123;&#123;data.myVar&#125;&#125;</code>来达到同样的效果，这里只是为了展示监听函数可以执行的操作。   </p>\n<h1 id=\"digest\"><a href=\"#digest\" class=\"headerlink\" title=\"$digest()\"></a>$digest()</h1><p><code>$scope.$digest()</code>函数循环时会遍历<code>$scope</code>对象（以及它的子<code>$scope</code>对象，如果有的话）上所有的watcher。<strong>在遍历watcher时，同时会调用watcher上的值函数，如果检测到返回值发生了变化，便会触发对应的监听函数</strong>。   </p>\n<p><strong><code>$digest()</code>函数会在AngularJS认为有必要时被调用</strong>。比如，当按钮的点击事件触发时或者AJAX请求返回时（当<code>done()</code>/<code>fail()</code>回调函数执行完成后）。   </p>\n<p>但这种调用机制在实际使用中可能会遇到AngularJS没有及时调用<code>$digest()</code>函数的情况。所以，当遇到数据没有及时更新时，应该手动检查下是不是AngularJS没有及时调用<code>$digest()</code>函数导致的。这种情况下，如果手动触发下<code>$scope.$digest()</code>应该就会正常工作了。或者，可以通过<code>$scope.$apply()</code>代替手动检查，下面会详述。   </p>\n<h1 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"$apply()\"></a>$apply()</h1><p><code>$scope.$apply()</code>函数会接受一个函数作为入参，这个函数会在<code>$apply()</code>函数调用时被执行，当这个函数执行完成后，<code>$scope.$digest()</code>便被触发。这可以更容易的保证所有的watcher都被检查，从而使绑定的数据得到更新。下面是一个应用<code>$apply</code>的例子：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$scope.$apply(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  $scope.<span class=\"property\">data</span>.<span class=\"property\">myVar</span> = <span class=\"string\">&quot;Another value&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个作为参数传进<code>$apply</code>的函数改变了<code>$scope.data.myVar</code>的值，一旦这个函数执行完，AngularJS会调用<code>$scope.$digest()</code>，从而保证所有被监听的数据都得到更新。   </p>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><p>为了说明<code>$watch()</code>,<code>$digest()</code>和<code>$apply()</code>怎么工作的，来看下面的例子：   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">&quot;myController&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123;data.time&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">&quot;updateTime()&quot;</span>&gt;</span>update time - ng-click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateTimeButton&quot;</span>  &gt;</span>update time<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = angular.<span class=\"title function_\">module</span>(<span class=\"string\">&quot;myapp&quot;</span>, []);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> myController1 = <span class=\"variable language_\">module</span>.<span class=\"title function_\">controller</span>(<span class=\"string\">&quot;myController&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  $scope.<span class=\"property\">data</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  $scope.<span class=\"property\">updateTime</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $scope.<span class=\"property\">data</span>.<span class=\"property\">time</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;updateTimeButton&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    .<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;update time clicked&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      $scope.<span class=\"property\">data</span>.<span class=\"property\">time</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子中，将<code>$scope.data.time</code>绑定到了HTML页面，同时，也为<code>$scope.data.time</code>创建了watcher。   </p>\n<p>这个例子中包含两个按钮，第一个按钮添加了<code>ng-click</code>，当按钮点击时，<code>$scope.updateTime()</code>函数被调用，之后，AngularJS调用<code>$scope.$digest()</code>使绑定的数据得以更新。</p>\n<p>第二个按钮是在控制器函数中添加的标准JavaScript监听事件。当按钮被点击时，执行监听函数。正如你所见，这两个按钮上的监听函数做着几乎一样的事情，但是当第二个按钮上的监听函数被调用时，绑定的数据并没有更新。这是因为当第二个按钮的监听函数执行以后<code>$scope.$digest()</code>没有被调用。因此，当点击第二个按钮时，尽管<code>$scope.data.time</code>上的时间更新了，但是更新的时间并没有在HTML中展示出来。   </p>\n<p>为了解决这个问题，我们可以在第二个按钮监听事件的最后一行添加<code>$scope.$digest()</code>来触发<code>$digest</code>函数。   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;updateTimeButton&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;update time clicked&quot;</span>);</span><br><span class=\"line\">    $scope.<span class=\"property\">data</span>.<span class=\"property\">time</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    $scope.$digest();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>除了在第二个按钮的监听函数内部调用<code>$digest()</code>，还可以如下所示，使用<code>$apply()</code>函数   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;updateTimeButton&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $scope.$apply(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;update time clicked&quot;</span>);</span><br><span class=\"line\">      $scope.<span class=\"property\">data</span>.<span class=\"property\">time</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>注意如何在按钮的监听事件中调用<code>$scope.$apply()</code>以及<code>$scope.data.time</code>的值是如何更新的。这样，当<code>$apply</code>函数执行完成后，AngularJS自动启用digest循环，所以数据得到了更新。   </p>\n<blockquote>\n<p>译者注：总结下，<code>$watch()</code>检测变化，并且在检测到变化时可以通过监听函数执行相关操作；但<code>$watch()</code>不会自己执行，这时<code>$digest()</code>就登场了，<code>$digest()</code>被触发后会遍历watcher，遍历的过程也就是触发每个watcher的过程；但<code>$digest()</code>触发时机是由AngularJS决定的，有可能出现该触发时未触发的情况，从而导致视图中的数据未及时更新；这时<code>$apply()</code>又登场了，其入参为一函数，该函数执行完毕紧接着会触发<code>$digest()</code>，从而保证在该函数里面更新的数据一定会同步更新到视图中。   </p>\n</blockquote>\n<h1 id=\"文章出处\"><a href=\"#文章出处\" class=\"headerlink\" title=\"文章出处\"></a>文章出处</h1><p>原文链接：<a href=\"http://tutorials.jenkov.com/angularjs/watch-digest-apply.html\">AngularJS $watch() , $digest() and $apply()</a><br>原作者：<a href=\"https://twitter.com/jjenkov\">Jakob Jenkov</a></p>\n","categories":["AngularJS"],"tags":["AngularJS"]},{"title":"JavaScript编程风格规范","url":"https://xiaogliu.github.io/2017/04/27/js-write-normalization/","content":"<p>基于<a href=\"https://github.com/airbnb/javascript\">Airbnb JavaScript Style Guide</a>，整理常用风格规范，方便日后查找。</p>\n<h1 id=\"一-注释\"><a href=\"#一-注释\" class=\"headerlink\" title=\"一 注释\"></a>一 注释</h1><h2 id=\"1-1-多行注释\"><a href=\"#1-1-多行注释\" class=\"headerlink\" title=\"1.1 多行注释\"></a>1.1 多行注释</h2><p>多行注释用<code>/** ... */</code>   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * make() returns a new element</span></span><br><span class=\"line\"><span class=\"comment\"> * based on the passed-in tag name</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">make</span>(<span class=\"params\">tag</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-单行注释\"><a href=\"#1-2-单行注释\" class=\"headerlink\" title=\"1.2 单行注释\"></a>1.2 单行注释</h2><p>单行注释使用<code>//</code>。且单行注释在被注释的代码前另起一行书写（而非和被注释的代码在同一行）；除非在代码块的首行，否则，当前备注前留一空白行。   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> active = <span class=\"literal\">true</span>;  <span class=\"comment\">// is current tab</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"comment\">// is current tab</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> active = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getType</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fetching type...&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// set the default type to &#x27;no type&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> || <span class=\"string\">&#x27;no type&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getType</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fetching type...&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set the default type to &#x27;no type&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> || <span class=\"string\">&#x27;no type&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// also good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getType</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// set the default type to &#x27;no type&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> || <span class=\"string\">&#x27;no type&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3-注释内容\"><a href=\"#1-3-注释内容\" class=\"headerlink\" title=\"1.3 注释内容\"></a>1.3 注释内容</h2><p>注释内容前面加多一空格   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"comment\">//is current tab</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> active = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"comment\">// is current tab</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> active = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *make() returns a new element</span></span><br><span class=\"line\"><span class=\"comment\"> *based on the passed-in tag name</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">make</span>(<span class=\"params\">tag</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * make() returns a new element</span></span><br><span class=\"line\"><span class=\"comment\"> * based on the passed-in tag name</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">make</span>(<span class=\"params\">tag</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4-备注前缀\"><a href=\"#1-4-备注前缀\" class=\"headerlink\" title=\"1.4 备注前缀\"></a>1.4 备注前缀</h2><p>如果备注的目的是提示“有问题待修复”，或者有“有工作待完成”最好在备注前加前缀<code>FIXME: -- need to figure this out</code>或者<code>TODO: -- need to implement</code></p>\n<blockquote>\n<p>这类备注可以设置不同颜色的以示区分其他备注。   </p>\n</blockquote>\n<p>使用<code>// FIXME:</code>指出问题   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Abacus</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> shouldn&#x27;t use a global here</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>// TODO:</code>指出问题的解决方案（但还有遗留代码未更改）   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Abacus</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> total should be configurable by an options param</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"二-空白（Whitespace）\"><a href=\"#二-空白（Whitespace）\" class=\"headerlink\" title=\"二 空白（Whitespace）\"></a>二 空白（Whitespace）</h1><h2 id=\"2-1-缩进\"><a href=\"#2-1-缩进\" class=\"headerlink\" title=\"2.1 缩进\"></a>2.1 缩进</h2><p>用空格进行缩进，缩进宽度为两个空格（如果喜欢使用tab，使用<code>soft tabs</code>，并设置<code>soft tabs</code>为两个空格宽度）   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">∙∙∙∙<span class=\"keyword\">let</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">∙<span class=\"keyword\">let</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">∙∙<span class=\"keyword\">let</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Hard tabs</strong>就是通常意义上的制表符（<a href=\"http://en.wikipedia.org/wiki/Tab_key#Tab_characters\">tab character</a>）, 而<strong>soft tabs</strong>实际上就是空格，通常为2个或者4个空格宽度，取决于编辑器的设置。<br>所以，如果在编辑器中设置了使用<strong>soft tabs</strong>，那么当在键盘上按下<code>Tab</code>键时，在编辑器中会插入空格（宽度取决于编辑器的设置）而非制表符。</p>\n</blockquote>\n<h2 id=\"2-2-大括号\"><a href=\"#2-2-大括号\" class=\"headerlink\" title=\"2.2 大括号{}\"></a>2.2 大括号<code>&#123;&#125;</code></h2><ul>\n<li>大括号<code>&#123;&#125;</code>前面加一空格   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">dog.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;attr&#x27;</span>,&#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"string\">&#x27;1 year&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">breed</span>: <span class=\"string\">&#x27;Bernese Mountain Dog&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">dog.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;attr&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"string\">&#x27;1 year&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">breed</span>: <span class=\"string\">&#x27;Bernese Mountain Dog&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>大括号内部两侧各加一空格</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;<span class=\"attr\">clark</span>: <span class=\"string\">&#x27;kent&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123; <span class=\"attr\">clark</span>: <span class=\"string\">&#x27;kent&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>英语中各种括号名称对应：<code>()</code> parenthesis or round brackets 圆括号；<code>[]</code> square brackets 方括号；<code>&#123;&#125;</code> curly brackets or braces 大括号；<code>&lt;&gt;</code> Angle brackets 尖括号</p>\n</blockquote>\n<h2 id=\"2-3-方括号\"><a href=\"#2-3-方括号\" class=\"headerlink\" title=\"2.3 方括号[]\"></a>2.3 方括号<code>[]</code></h2><p>方括号内部两侧不需要空格</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo[ <span class=\"number\">0</span> ]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4-小括号\"><a href=\"#2-4-小括号\" class=\"headerlink\" title=\"2.4 小括号()\"></a>2.4 小括号<code>()</code></h2><h3 id=\"2-4-1-需要空格的情况\"><a href=\"#2-4-1-需要空格的情况\" class=\"headerlink\" title=\"2.4.1 需要空格的情况\"></a>2.4.1 需要空格的情况</h3><p>流程控制语句(if, while等)的小括号<code>()</code>前加一空格   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(isJedi) &#123;</span><br><span class=\"line\">  fight ();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isJedi) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fight</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-2-不需要空格的情况\"><a href=\"#2-4-2-不需要空格的情况\" class=\"headerlink\" title=\"2.4.2 不需要空格的情况\"></a>2.4.2 不需要空格的情况</h3><ul>\n<li>参数列表间及通过函数名调用或声明时使用的小括号前面不用空格   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fight</span> () &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"property\">log</span> (<span class=\"string\">&#x27;Swooosh!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fight</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Swooosh!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：如果是匿名函数则在<code>function</code>声明和小括号之间加一空格(相当于隐去的函数名)</strong>   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>小括号内部两侧不需要空格</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"> foo </span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\">foo</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( foo ) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-运算符\"><a href=\"#2-5-运算符\" class=\"headerlink\" title=\"2.5 运算符\"></a>2.5 运算符</h2><h3 id=\"2-5-1-前后各加一空格\"><a href=\"#2-5-1-前后各加一空格\" class=\"headerlink\" title=\"2.5.1 前后各加一空格\"></a>2.5.1 前后各加一空格</h3><p>除了2.5.2中的情况，其他都是前后都加空格</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> x=y+<span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> x = y + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> maybeNull = value1 &gt; value2 ? <span class=\"string\">&#x27;baz&#x27;</span> : <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-2-只在后面加空格\"><a href=\"#2-5-2-只在后面加空格\" class=\"headerlink\" title=\"2.5.2 只在后面加空格\"></a>2.5.2 只在后面加空格</h3><ul>\n<li>键值对中使用的冒号后加一空格，前面不加空格</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hero = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>:<span class=\"string\">&#x27;Ada&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>:<span class=\"string\">&#x27;Lovelace&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hero = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Ada&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Lovelace&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>逗号前面没有空格，后面加多一空格（英语书写正常格式）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">name,age</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">name , age</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>冒号和逗号不算运算符，但在三目中涉及冒号，就在运算符中一并说下。</p>\n</blockquote>\n<h2 id=\"2-6-文档尾部加一空白行\"><a href=\"#2-6-文档尾部加一空白行\" class=\"headerlink\" title=\"2.6 文档尾部加一空白行\"></a>2.6 文档尾部加一空白行</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; es6 &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> es6;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; es6 &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> es6;↵</span><br><span class=\"line\">↵</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; es6 &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> es6;↵</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-7-方法链\"><a href=\"#2-7-方法链\" class=\"headerlink\" title=\"2.7 方法链\"></a>2.7 方法链</h2><p>大于两个方法的方法链，每个方法另起一行，以点<code>.</code>开始   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#items&#x27;</span>).<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.selected&#x27;</span>).<span class=\"title function_\">highlight</span>().<span class=\"title function_\">end</span>().<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.open&#x27;</span>).<span class=\"title function_\">updateCount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#items&#x27;</span>).</span><br><span class=\"line\">  <span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.selected&#x27;</span>).</span><br><span class=\"line\">    <span class=\"title function_\">highlight</span>().</span><br><span class=\"line\">    <span class=\"title function_\">end</span>().</span><br><span class=\"line\">  <span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.open&#x27;</span>).</span><br><span class=\"line\">    <span class=\"title function_\">updateCount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#items&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.selected&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">highlight</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">end</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;.open&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">updateCount</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> leds = stage.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;.led&#x27;</span>).<span class=\"title function_\">data</span>(data).<span class=\"title function_\">enter</span>().<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:svg&#x27;</span>).<span class=\"title function_\">classed</span>(<span class=\"string\">&#x27;led&#x27;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>, (radius + margin) * <span class=\"number\">2</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:g&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;transform&#x27;</span>, <span class=\"string\">`translate(<span class=\"subst\">$&#123;radius + margin&#125;</span>,<span class=\"subst\">$&#123;radius + margin&#125;</span>)`</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">call</span>(tron.<span class=\"property\">led</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> leds = stage.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;.led&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">data</span>(data)</span><br><span class=\"line\">  .<span class=\"title function_\">enter</span>().<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:svg&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">classed</span>(<span class=\"string\">&#x27;led&#x27;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>, (radius + margin) * <span class=\"number\">2</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg:g&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;transform&#x27;</span>, <span class=\"string\">`translate(<span class=\"subst\">$&#123;radius + margin&#125;</span>,<span class=\"subst\">$&#123;radius + margin&#125;</span>)`</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">call</span>(tron.<span class=\"property\">led</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good（只有两个方法的方法链可以写在同一行）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> leds = stage.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;.led&#x27;</span>).<span class=\"title function_\">data</span>(data);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-8-代码块\"><a href=\"#2-8-代码块\" class=\"headerlink\" title=\"2.8 代码块\"></a>2.8 代码块</h2><h3 id=\"2-8-1-代码块之后\"><a href=\"#2-8-1-代码块之后\" class=\"headerlink\" title=\"2.8.1 代码块之后\"></a>2.8.1 代码块之后</h3><p>代码块之后，下一语句之前，加一空白行之后，下一语句之前，加一空白行   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> baz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> baz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> arr;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-8-2-代码块之间\"><a href=\"#2-8-2-代码块之间\" class=\"headerlink\" title=\"2.8.2 代码块之间\"></a>2.8.2 代码块之间</h3><p>代码块之间不要添加空白行（除非有注释或其他需要添加空白行的情况）   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// also bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (baz) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(qux);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (baz) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(qux);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// also good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (baz) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(qux);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// this is a comment</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(qux);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-9-单行长度限制\"><a href=\"#2-9-单行长度限制\" class=\"headerlink\" title=\"2.9 单行长度限制\"></a>2.9 单行长度限制</h2><p>单行长度不超过100个字符（包括空格）。注意：长字符串例外，不要打断字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = jsonData &amp;&amp; jsonData.<span class=\"property\">foo</span> &amp;&amp; jsonData.<span class=\"property\">foo</span>.<span class=\"property\">bar</span> &amp;&amp; jsonData.<span class=\"property\">foo</span>.<span class=\"property\">bar</span>.<span class=\"property\">baz</span> &amp;&amp; jsonData.<span class=\"property\">foo</span>.<span class=\"property\">bar</span>.<span class=\"property\">baz</span>.<span class=\"property\">quux</span> &amp;&amp; jsonData.<span class=\"property\">foo</span>.<span class=\"property\">bar</span>.<span class=\"property\">baz</span>.<span class=\"property\">quux</span>.<span class=\"property\">xyzzy</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123; <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://airbnb.com/&#x27;</span>, <span class=\"attr\">data</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span> &#125; &#125;).<span class=\"title function_\">done</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Congratulations!&#x27;</span>)).<span class=\"title function_\">fail</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;You have failed this city.&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = jsonData</span><br><span class=\"line\">  &amp;&amp; jsonData.<span class=\"property\">foo</span></span><br><span class=\"line\">  &amp;&amp; jsonData.<span class=\"property\">foo</span>.<span class=\"property\">bar</span></span><br><span class=\"line\">  &amp;&amp; jsonData.<span class=\"property\">foo</span>.<span class=\"property\">bar</span>.<span class=\"property\">baz</span></span><br><span class=\"line\">  &amp;&amp; jsonData.<span class=\"property\">foo</span>.<span class=\"property\">bar</span>.<span class=\"property\">baz</span>.<span class=\"property\">quux</span></span><br><span class=\"line\">  &amp;&amp; jsonData.<span class=\"property\">foo</span>.<span class=\"property\">bar</span>.<span class=\"property\">baz</span>.<span class=\"property\">quux</span>.<span class=\"property\">xyzzy</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://airbnb.com/&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span> &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">done</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Congratulations!&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">fail</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;You have failed this city.&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-命名\"><a href=\"#三-命名\" class=\"headerlink\" title=\"三 命名\"></a>三 命名</h1><h2 id=\"3-1-避免使用单个字母\"><a href=\"#3-1-避免使用单个字母\" class=\"headerlink\" title=\"3.1 避免使用单个字母\"></a>3.1 避免使用单个字母</h2><p>避免使用单个字母，含义越明确越好</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">q</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">query</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-对象，函数及其他实例\"><a href=\"#3-2-对象，函数及其他实例\" class=\"headerlink\" title=\"3.2 对象，函数及其他实例\"></a>3.2 对象，函数及其他实例</h2><p>命名对象、函数及其他实例使用小驼峰命名法（首个单词首字母小写）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">OBJEcttsssss</span> = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> this_is_my_object = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> thisIsMyObject = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thisIsMyFunction</span>(<span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-构造函数，类\"><a href=\"#3-3-构造函数，类\" class=\"headerlink\" title=\"3.3 构造函数，类\"></a>3.3 构造函数，类</h2><p>构造函数，类使用大驼峰命名法（首个单词首字母大写）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">user</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = options.<span class=\"property\">name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bad = <span class=\"keyword\">new</span> <span class=\"title function_\">user</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;nope&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = options.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> good = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;yup&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-首尾不要使用下划线\"><a href=\"#3-4-首尾不要使用下划线\" class=\"headerlink\" title=\"3.4 首尾不要使用下划线\"></a>3.4 首尾不要使用下划线</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">__firstName__</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">firstName_</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_firstName</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> = <span class=\"string\">&#x27;Panda&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won’t count as breaking, or that tests aren’t needed. tl;dr: if you want something to be “private”, it must not be observably present.   </p>\n</blockquote>\n<h2 id=\"3-5-不使用驼峰命名法的情况\"><a href=\"#3-5-不使用驼峰命名法的情况\" class=\"headerlink\" title=\"3.5 不使用驼峰命名法的情况\"></a>3.5 不使用驼峰命名法的情况</h2><p>缩写词保留通用写法，不使用驼峰命名法，这样更容易阅读。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">SmsContainer</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./containers/SmsContainer&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HttpRequests</span> = [</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">SMSContainer</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./containers/SMSContainer&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HTTPRequests</span> = [</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"优先使用单引号\"><a href=\"#优先使用单引号\" class=\"headerlink\" title=\"优先使用单引号\"></a>优先使用单引号</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// not good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hasName === <span class=\"string\">&quot;test&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hasName === <span class=\"string\">&#x27;test&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://github.com/airbnb/javascript\">Airbnb JavaScript Style Guide</a><br>【2】<a href=\"http://stackoverflow.com/questions/26350689/what-are-hard-and-soft-tabs\">What are hard and soft tabs?</a><br>【2】<a href=\"http://www.ruanyifeng.com/blog/2007/07/english_punctuation.html\">标点符号的英语名称</a></p>\n","categories":["JavaScript"],"tags":["JavaScript","Normalization"]},{"title":"理解JS参数按值传递","url":"https://xiaogliu.github.io/2017/04/18/understand-params-passing-by-value/","content":"<p>首先要明白按值传递和按引用传递的区别以及JS当中基本类型值和引用类型值的区别。</p>\n<h1 id=\"按值传递和按引用传递\"><a href=\"#按值传递和按引用传递\" class=\"headerlink\" title=\"按值传递和按引用传递\"></a>按值传递和按引用传递</h1><ul>\n<li><p>按值传递：在变量传递进函数之前，先从堆内存对象中复制一个副本，然后传入函数。所以在函数中对该变量做的任何修改，都不会影响到该变量在堆内存中引用的对象（因为修改的是副本，而非引用本身）。</p>\n</li>\n<li><p>按参数传递：传入函数中的变量实际只是指向堆内存对象的一个指针，所以，在函数内部对于该变量做的任何修改，也同步修改了该变量在堆内存中引用的对象，这样，在函数调用结束后在函数内部对该变量做的任何修改都会保留下来。</p>\n</li>\n</ul>\n<h1 id=\"基本类型值和引用类型值\"><a href=\"#基本类型值和引用类型值\" class=\"headerlink\" title=\"基本类型值和引用类型值\"></a>基本类型值和引用类型值</h1><p>ECMAScript 变量可能包含两种不同数据类型的值：基本类型值(primitive values)和引用类型值(reference values)，定义如下：</p>\n<blockquote>\n<p>基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。</p>\n</blockquote>\n<p>两种数据类型最大的区别在于对其进行复制时：</p>\n<ul>\n<li>如果从一个变量向另一个变量复制基本类型的值时，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。也就是说，新的变量是旧变量的一个副本，复制操作结束后，两者便互不相干：<strong>改变其中一个变量，不会影响另一个变量</strong>。见下代码及图示：   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/20170418185835.png\" alt=\"基本类型复制前后变量对象变化\">   </p>\n<ul>\n<li>如果从一个变量向另一个变量复制基本类型的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。不同的是，<strong>这个值的副本实际上是一个指针</strong>，而这个指针指向存储在堆中的一个对象。复制操作结束后，<strong>两个变量实际上将引用同一个对象：改变其中一个变量，就会影响另一个变量</strong>。见下代码及图示   </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1;</span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&quot;xiaoming&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2.<span class=\"property\">name</span>); <span class=\"comment\">// &quot;xiaoming&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/20170418185905.png\" alt=\"引用类型复制前后变量对象变化\">   </p>\n<h1 id=\"JS传参按值传递详解\"><a href=\"#JS传参按值传递详解\" class=\"headerlink\" title=\"JS传参按值传递详解\"></a>JS传参按值传递详解</h1><p>《JavaScript高级程序设计》中指出JS所有参数都是按值传递的，不可能按引用传递：   </p>\n<blockquote>\n<p>All arguments in ECMAScript are passed by value. It is not possible to pass<br>  arguments by reference.   </p>\n</blockquote>\n<p>当参数为基本类型时，这容易理解，但当参数为引用类型时，有些地方需要注意。   </p>\n<h2 id=\"当参数为基本类型时\"><a href=\"#当参数为基本类型时\" class=\"headerlink\" title=\"当参数为基本类型时\"></a>当参数为基本类型时</h2><p>当变量为基本类型时，很好理解参数传递是按值传递的，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">argument</span>) &#123;</span><br><span class=\"line\">  argument = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">changeValue</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>在函数体内的<code>a</code>是函数体外的<code>a</code>的副本，所以在函数体内对<code>a</code>的操作不影响函数体外的<code>a</code>。</p>\n<h2 id=\"当参数为引用类型时\"><a href=\"#当参数为引用类型时\" class=\"headerlink\" title=\"当参数为引用类型时\"></a>当参数为引用类型时</h2><p>当参数为引用类型时，需要注意的点是，虽然引用类型也是按值传递，但<strong>这里的“值”指的是引用类型指向堆内存中对象的指针</strong>，如果仅仅是修改引用类型内部的属性值，这些修改在函数调用结束后，都会保留下来。看下面的例子  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;<span class=\"attr\">key</span>:<span class=\"string\">&quot;foo&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeKey</span>(<span class=\"params\">argument</span>) &#123;</span><br><span class=\"line\">  argument.<span class=\"property\">key</span> = <span class=\"string\">&quot;bar&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">changeKey</span>(x);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// &#123;key:&quot;bar&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这是因为此时函数体内的<code>x</code>和函数体外的<code>x</code>引用的都是同一个堆内存中的对象，所以修改函数体内的<code>x</code>属性值反映到了函数体外的<code>x</code>身上。这会让人产生疑惑：当参数为引用类型时，是按引用传递，而非按值传递。其实不然，看下面的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;<span class=\"attr\">key</span>:<span class=\"string\">&quot;foo&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeObject</span>(<span class=\"params\">argument</span>) &#123;</span><br><span class=\"line\">  argument = &#123;<span class=\"attr\">key</span>:<span class=\"string\">&quot;bar&quot;</span>&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">changeObject</span>(x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// &#123;key:&quot;foo&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>跟上面的例子不同的是，函数体内的<code>x</code>被重新赋值，而非修改内部的属性，如果是按引用传递，此时函数体外的<code>x</code>也会被重新赋值，但并没有。这是因为引用类型被重新赋值后，其指针在堆内存中的指向（引用类型的“值”）也发生了变化，正因为JS传参是按值传递，所以函数体内对引用类型的值（该引用类型在变量对象中的指针）的修改不会反映到函数体外。</p>\n<h2 id=\"帮助理解的关键概念\"><a href=\"#帮助理解的关键概念\" class=\"headerlink\" title=\"帮助理解的关键概念\"></a>帮助理解的关键概念</h2><p>1、引用类型保存在变量对象中的值实际是一指针，该指针指向堆内存中的对象；<br>2、<strong>修改引用类型变量的属性值，不会修改该变量在变量对象中的指针，但会修改其对应的堆内存中的对象，同时，也影响其他指向该堆内存对象的变量</strong>；<br>3、给引用类型重新赋值实际是修改引用类型指针的指向；<br>4、<strong>给引用类型重新赋值后不会影响其之前指向的堆内存中的对象，所以若有其他变量也指向堆内存中的这个对象，不会受到影响</strong> 。     </p>\n<blockquote>\n<ul>\n<li>可以把 ECMAScript 函数的参数想象成局部变量。</li>\n<li>JS这种传参方式从技术上讲是<strong>共享传参</strong>(<a href=\"https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing\">call-by-sharing</a>):对形参赋值，不影响实参的值（按值传递）；但形参和实参指向同一堆内存中的对象，即<strong>共享</strong>同一对象，所以对形参属性值的修改也会影响实参。   </li>\n</ul>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language\">Is JavaScript a pass-by-reference or pass-by-value language?</a><br>【2】[美]Nicholas C. Zakas 著，李松峰 曹力 译（2012），JavasSript高级程序设计，p69~p71，人民邮电出版社<br>【3】<a href=\"http://bosn.me/js/js-call-by-sharing/\">JS是按值传递还是按引用传递?</a>   </p>\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"AngularJS指令命名规则","url":"https://xiaogliu.github.io/2017/04/15/normalization-name-angular-directive/","content":"<h1 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h1><p>同一个AngularJS指令，在js文件和html文件中有着不同的命名规范：在js文件中使用标准的<strong>小驼峰命名法</strong>，在html文件中使用“<strong>小写字母+连接符</strong>”的命名法。如下表所示   </p>\n<table>\n<thead>\n<tr>\n<th>在js文件中</th>\n<th>在html文件中</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ngApp</td>\n<td>ng-app</td>\n</tr>\n<tr>\n<td>myDirective</td>\n<td>my-directive</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"处理机制\"><a href=\"#处理机制\" class=\"headerlink\" title=\"处理机制\"></a>处理机制</h1><p>AngularJS之所以选择这样的命名方式，是因为html文件不区分大小写，而js文件则对大小写敏感（<code>myDir</code>和<code>mydir</code>在js文件中是不同的指令，但html看来是同一个指令），为了避免可能出现的错误，所以使用上述命名规范。<br>AngularJS执行过程中，对“<strong>小写字母+连接符</strong>”形式的命名做如下处理，最终装换成<strong>小驼峰命名法</strong>：   </p>\n<ol>\n<li>去掉开始部分的<code>x-</code>和<code>data-</code>;</li>\n<li>第一个单词不变，把连接符后面的单词首字母转换成大写，去掉连接符。   </li>\n</ol>\n<blockquote>\n<p>这里有两点需要<strong>注意</strong>：</p>\n<ul>\n<li>指令命名时不要以<code>x</code>或<code>data</code>作为第一个单词   </li>\n<li>支持的链接符包括<code>:</code>,<code>-</code>和<code>_</code>，但通常会选择<code>-</code>作为连接符   </li>\n</ul>\n</blockquote>\n<h1 id=\"隔离作用域对象中的属性命名\"><a href=\"#隔离作用域对象中的属性命名\" class=\"headerlink\" title=\"隔离作用域对象中的属性命名\"></a>隔离作用域对象中的属性命名</h1><p>指令隔离作用域对象中属性命名规则同上，见下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">directive</span>(<span class=\"string\">&#x27;myDirective&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">restrict</span>: <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">scope</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">myUrl</span>: <span class=\"string\">&#x27;@&#x27;</span>, <span class=\"comment\">// 隔离作用域对象中属性命名为小驼峰命名法</span></span><br><span class=\"line\">      <span class=\"attr\">myLinkText</span>: <span class=\"string\">&#x27;@&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&lt;a href=&quot;&#123;&#123;myUrl&#125;&#125;&quot;&gt;&#123;&#123;myLinkText&#125;&#125;&lt;/a&gt;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">my-directive</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">my-url</span>=<span class=\"string\">&quot;http://google.com&quot;</span> &lt;!<span class=\"attr\">--</span> <span class=\"attr\">html文件中使用</span>“<span class=\"attr\">小写字母</span>+<span class=\"attr\">分割符</span>”<span class=\"attr\">的命名方式--</span>&gt;</span></span><br><span class=\"line\">     my-link-text=&quot;Click me&quot;</span><br><span class=\"line\">     &gt;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://docs.angularjs.org/guide/directive\">Creating Custom Directives - Normalization</a><br>【2】<a href=\"http://stackoverflow.com/questions/15256396/how-are-the-attribute-prefixes-x-and-data-used-in-angularjs\">How are the attribute prefixes “x-” and “data-” used in AngularJS</a><br>【3】[美]Ari Lerner 著，赵望野 徐飞 何鹏飞 译（2014），AngularJS权威教程，p52，人民邮电出版社</p>\n","categories":["AngularJS"],"tags":["AngularJS","Normalization"]},{"title":"【译】在AngularJS中使用$scope还是scope","url":"https://xiaogliu.github.io/2017/04/13/$scope-or-scope-in-angular/","content":"<p>当我最开始接触AngularJS时，在任何地方我一直都用AngularJS提供的变量<code>$scope</code>，过去两年一直如此。直到一周以前，Jonathan Rowny指出在某些情况下我错用了<code>$scope</code>。因此，在命名的时候我做了一些改变。    </p>\n<p>Rowny指出，<code>$scope</code>前面的<code>$</code>标志是指明这个scope被注入到当前执行环境，但不是所有涉及scope的地方都基于依赖注入。举个例子，比如在<code>$watch</code>或指令中的<code>link()</code>函数中，<code>scope</code>仅仅是个<strong>位置参数</strong>，至于叫什么名字，无关紧要。因此，这种情况下，不应该加前缀<code>$</code>。请看下面代码:   </p>\n<ul>\n<li>无依赖注入的函数我之前写的代码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">link</span>(<span class=\"params\"> $scope, element, attributes </span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...with $</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>更改后</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">link</span>(<span class=\"params\"> scope, element, attributes </span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...without $</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我知道这有点吹毛求疵，但我喜欢让代码富有意义—这样令我开心。</p>\n<p><em>(下面是评论中更详细的讨论)</em>   </p>\n<p>在AngularJS中，当参数是通过<strong>依赖注入</strong>的形式传入的时候，参数在参数列表中的位置无关紧要。举个例子，我可以这样定义Controller：   </p>\n<ul>\n<li>scope在第一位</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">controller</span>( <span class=\"string\">&quot;MyController&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"> $scope, $timeout, $http </span>) &#123; .. &#125; );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>或者这样：scope在最后一位</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">controller</span>( <span class=\"string\">&quot;MyController&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"> $timeout, $http, $scope </span>) &#123; .. &#125; );</span><br></pre></td></tr></table></figure>\n<p>上面两种写法都一样，因为通过依赖注入的形式传参时AngularJS不关心参数的顺序，只关注他们的名字：在AngularJS执行时，会通过参数名在依赖注入容器中调用相关功能。   </p>\n<p>而在另外一些方法中，比如，指令中使用到的<code>link()</code>函数，它接受scope作为入参，此时参数位置是很重要的，而参数名无关紧要。也就是说，你可以像这样定义link函数：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">link</span>(<span class=\"params\"> scope, element, attributes </span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>或者这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">link</span>(<span class=\"params\"> FOO, BAR, BAZ </span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>后面的例子中，<code>Foo=scope</code>, <code>Bar=element</code>, <code>Baz=attributes</code>，这是因为此时AngularJS不关心你怎么定义变量名，只关注变量位置（也就是：<code>Scope:0</code>, <code>Element:1</code>, <code>Attributes:2</code>, <code>Controller:3</code>, <code>Transclude:4</code>）。   </p>\n<p>Controllers, Services, Factories, and Directive functions都使用依赖注入，但据我所知，下面的函数没有使用依赖注入，而是使用了位置参数（其中一个参数是<code>scope</code>）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Linking functions (and probably other pre-link functions).</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">link</span>(<span class=\"params\"> scope </span>) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Watch expressions (not handlers).</span></span><br><span class=\"line\">$scope.$on( <span class=\"keyword\">function</span> <span class=\"title function_\">watchExpression</span>(<span class=\"params\"> scope </span>) &#123; ... &#125;, .... )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Transclude clone functions.</span></span><br><span class=\"line\"><span class=\"title function_\">transclude</span>( <span class=\"keyword\">function</span> <span class=\"title function_\">linkClonedNode</span>(<span class=\"params\"> clone, scope </span>) &#123; ... &#125; )</span><br></pre></td></tr></table></figure>\n<p>出处：<a href=\"https://www.bennadel.com/blog/2716-when-to-use-scope-vs-scope-in-angularjs.htm\">When To Use $scope vs. scope In AngularJS</a> - <a href=\"https://twitter.com/BenNadel\">Ben Nadel</a></p>\n","categories":["AngularJS"],"tags":["AngularJS"]},{"title":"通过AngularJS指令操作DOM","url":"https://xiaogliu.github.io/2017/04/12/manipulate-dom-use-angular-directive/","content":"<h1 id=\"在指令而非在控制器中操作DOM\"><a href=\"#在指令而非在控制器中操作DOM\" class=\"headerlink\" title=\"在指令而非在控制器中操作DOM\"></a>在指令而非在控制器中操作DOM</h1><p>在页面处理中，难免会遇到操作DOM的情况，在AngularJS中，对DOM的操作是在指令而非控制器中完成的。</p>\n<blockquote>\n<p>AngularJS强调隔离的思想：把复杂的逻辑和操作放在指令或服务中，控制器作为视图和$scope之间的桥梁，仅仅用来存储数据模型。    </p>\n</blockquote>\n<h1 id=\"jqLite\"><a href=\"#jqLite\" class=\"headerlink\" title=\"jqLite\"></a>jqLite</h1><p>为了便于DOM操作，AngularJS内部封装了<code>angular.element</code>，如果现有项目中已经引入的jQuery，<code>angular.element</code>相当于jQuery函数的别名，否则，<code>angular.element</code>代表AngularJS对jQuery封装的一个子集，称为”jQuery lite”或者<strong>jqLite</strong>。<strong>jqLite</strong> 不具备jQuery全部方法，详见AngularJS官方文档 <a href=\"https://docs.angularjs.org/api/ng/function/angular.element\">angular.element</a>。   </p>\n<h1 id=\"link-function\"><a href=\"#link-function\" class=\"headerlink\" title=\"link-function\"></a>link-function</h1><p>link-function可以注册DOM监听器，同时更新DOM，更多link-function介绍参考这篇文章<a href=\"http://websystique.com/angularjs/angularjs-custom-directives-link-function-guide/\">AngularJS Custom-Directives link-function guide</a>   </p>\n<h1 id=\"指令代码\"><a href=\"#指令代码\" class=\"headerlink\" title=\"指令代码\"></a>指令代码</h1><p>一个引入jQuery操作DOM的指令如下：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">webApp.<span class=\"title function_\">directive</span>(<span class=\"string\">&quot;detailTopStick&quot;</span>, [<span class=\"string\">&quot;$timeout&quot;</span>, <span class=\"string\">&quot;$window&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">$timeout, $window</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">restrict</span>: <span class=\"string\">&quot;A&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">link</span>: <span class=\"keyword\">function</span> (<span class=\"params\">scope</span>) &#123;</span><br><span class=\"line\">      $timeout(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> navbar = $(<span class=\"string\">&quot;.navbar-nav&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> navbarOffsetTop = navbar.<span class=\"title function_\">offset</span>().<span class=\"property\">top</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> headerInfo = $(<span class=\"string\">&quot;.header-info&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> headerInfoMarginBottom = <span class=\"built_in\">parseInt</span>(headerInfo.<span class=\"title function_\">css</span>(<span class=\"string\">&quot;margin-bottom&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">var</span> navbarHeight = <span class=\"built_in\">parseInt</span>(navbar.<span class=\"title function_\">css</span>(<span class=\"string\">&quot;height&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        angular.<span class=\"title function_\">element</span>($window).<span class=\"title function_\">bind</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">// 窗口绑定resize事件</span></span><br><span class=\"line\">          navbar.<span class=\"title function_\">css</span>(<span class=\"string\">&quot;width&quot;</span>, headerInfo.<span class=\"title function_\">width</span>());</span><br><span class=\"line\">          navbarOffsetTop = navbar.<span class=\"title function_\">offset</span>().<span class=\"property\">top</span>;</span><br><span class=\"line\">          scope.$apply();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        angular.<span class=\"title function_\">element</span>($window).<span class=\"title function_\">bind</span>(<span class=\"string\">&quot;scroll&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ($window.<span class=\"property\">scrollY</span> &gt; navbarOffsetTop) &#123;</span><br><span class=\"line\">            navbar.<span class=\"title function_\">css</span>(<span class=\"string\">&quot;width&quot;</span>, headerInfo.<span class=\"title function_\">width</span>());</span><br><span class=\"line\">            navbar.<span class=\"title function_\">addClass</span>(<span class=\"string\">&quot;detail-navbar-fix&quot;</span>);</span><br><span class=\"line\">            headerInfo.<span class=\"title function_\">css</span>(<span class=\"string\">&quot;margin-bottom&quot;</span>, headerInfoMarginBottom + navbarHeight);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            navbar.<span class=\"title function_\">removeClass</span>(<span class=\"string\">&quot;detail-navbar-fix&quot;</span>);</span><br><span class=\"line\">            headerInfo.<span class=\"title function_\">css</span>(<span class=\"string\">&quot;margin-bottom&quot;</span>, headerInfoMarginBottom);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          scope.$apply();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        navbar.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ($window.<span class=\"property\">scrollY</span> &gt; navbarOffsetTop) &#123;</span><br><span class=\"line\">            $window.<span class=\"title function_\">scrollTo</span>(<span class=\"number\">0</span>, navbarOffsetTop);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果未引入jquery，可以这样获取元素：angular.element(document.querySelector(“.class-name”))</p>\n</blockquote>\n<p>参考资料：<br>【1】<a href=\"http://www.dotnetlearners.com/blogs/view/168/finding-html-element-by-css-class-name-in-angularjs.aspx\">Finding HTML element by css class name in angularJS</a><br>【2】<a href=\"http://websystique.com/angularjs/angularjs-custom-directives-link-function-guide/\">AngularJS Custom-Directives link-function guide</a><br>【3】<a href=\"http://stackoverflow.com/questions/20253322/angular-js-scroll-window\">Angular JS - Scroll $window</a><br>【4】<a href=\"http://stackoverflow.com/questions/31622673/angularjs-watch-window-resize-inside-directive\">AngularJS $watch window resize inside directive</a><br>【5】<a href=\"http://stackoverflow.com/questions/26365339/angular-and-getting-window-scroll-position-in-controller/29042247\">Angular and getting window scroll position in controller</a><br>【6】<a href=\"http://stackoverflow.com/questions/28988547/separating-dom-manipulation-from-angular-controllers-best-practice-wanted\">Separating DOM manipulation from Angular controllers - Best Practice wanted</a><br>【7】<a href=\"https://docs.angularjs.org/api/ng/function/angular.element\">angular.element</a>   </p>\n","categories":["AngularJS"],"tags":["AngularJS","jQuery"]},{"title":"cmder安装及配置","url":"https://xiaogliu.github.io/2017/04/07/install-and-configure-cmder/","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><a href=\"http://cmder.net/\">官网下载</a>程序包。<br><strong>cmder 无需安装，解压即用</strong>。官网有两个版本供下载：cmder-mini 和 cmder-full，两个区别是 full 版本含有 git for windows，若已经安装，选用 cmder-mini 即可，否则选 cmder-full。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"添加鼠标右键\"><a href=\"#添加鼠标右键\" class=\"headerlink\" title=\"添加鼠标右键\"></a>添加鼠标右键</h2><p>以<strong>管理员权限</strong>打开终端，输入下面命令（先把 cmder 添加到系统变量中）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cmder.exe /REGISTER ALL</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置完成后，鼠标右键可看到 cmder 选项，打开 cmder，<strong>终端显示目录为当前目录</strong></p>\n</blockquote>\n<p>若想<strong>删除鼠标右键打开 cmder</strong>，根目录新建文件<code>*.bat</code>，写入下面内容，以管理员身份运行即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\">Reg delete <span class=\"string\">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder&quot;</span> /f</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加系统环境变量\"><a href=\"#添加系统环境变量\" class=\"headerlink\" title=\"添加系统环境变量\"></a>添加系统环境变量</h2><p>我的电脑 &gt; 右键属性 &gt; 高级系统设置 &gt; 环境变量 &gt; 系统变量，在<code>path</code>中添加 cmder 路径</p>\n<blockquote>\n<p>添加系统变量后可以通过<code>win+r</code>输入<code>cmder</code>开启 cmder，打开后默认目录为<code>C:\\Users\\Administrator</code></p>\n</blockquote>\n<h2 id=\"ls-中文乱码\"><a href=\"#ls-中文乱码\" class=\"headerlink\" title=\"ls 中文乱码\"></a>ls 中文乱码</h2><p>Startup &gt; Environment &gt; Set up environment variables， 添加下面代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> LANG=zh_CN.UTF8</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要重启 cmder</p>\n</blockquote>\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><p>Features &gt; Colors &gt; Schemes，目前在用默认主题<code>&lt;xterm&gt;</code></p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Main &gt; Main console font，目前在用<del><code>YaHei Consolas Hybrid</code></del> <del><code>Ubuntu Mono</code></del> <code>Microsoft YaHei Mono</code>，Size 为<code>18</code>，勾选<code>Bold</code>，其他默认</p>\n<blockquote>\n<p>很多人推荐 Adobe 开源字体<a href=\"https://github.com/adobe-fonts/source-code-pro\">source-code-pro</a>。但安装后感觉中文显示太难看，换回 <del>“YaHei Consolas Hybrid”</del> “Ubuntu Mono”。<br>windown 系统下安装字体方法：下载字体包，将字体包里面 TTF 文件夹下面文件全部复制到 window 字体文件夹下（控制面板 &gt; 字体，或者 win 键 &gt; 输入“字体”进行搜索）</p>\n</blockquote>\n<h2 id=\"Tab-bar\"><a href=\"#Tab-bar\" class=\"headerlink\" title=\"Tab bar\"></a>Tab bar</h2><p>Main &gt; Tab bar &gt; Tabs, <code>Don&#39;t show</code></p>\n<blockquote>\n<p>Tab bar 即默认窗口最下面类似任务栏的横条</p>\n</blockquote>\n<h2 id=\"Scrollbar\"><a href=\"#Scrollbar\" class=\"headerlink\" title=\"Scrollbar\"></a>Scrollbar</h2><p>Main &gt; Appearance &gt; Scrollbar, <code>Hide</code></p>\n<h2 id=\"自定义快捷键\"><a href=\"#自定义快捷键\" class=\"headerlink\" title=\"自定义快捷键\"></a>自定义快捷键</h2><p>Keys &amp; Macro &gt; Hotkeys,modifiers,macros, 通过搜索框快速定位需要设置的操作，目前只对分屏（split(0,50,0)）进行了快捷键自定义<code>LAlt + LShift + S</code></p>\n<h2 id=\"设置默认任务\"><a href=\"#设置默认任务\" class=\"headerlink\" title=\"设置默认任务\"></a>设置默认任务</h2><p>默认为<code>&#123;cmd::Cmder&#125;</code>，其他选项含义如下</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Shell</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cmder</td>\n<td>cmd.exe</td>\n<td>Windows ‘cmd.exe’ shell enhanced with Git, Git aware prompt, Clink(GNU Readline), and Aliases.</td>\n</tr>\n<tr>\n<td>Cmder as Admin</td>\n<td>cmd.exe</td>\n<td>Administrative Windows ‘cmd.exe’ Cmder shell.</td>\n</tr>\n<tr>\n<td>PowerShell</td>\n<td>powershell.exe</td>\n<td>Windows PowerShell enhanced with Git and Git aware prompt.</td>\n</tr>\n<tr>\n<td>PowerShell as Admin</td>\n<td>powershell.exe</td>\n<td>Administrative Windows ‘powershell.exe’ Cmder shell.</td>\n</tr>\n<tr>\n<td>Bash</td>\n<td>bash.exe</td>\n<td>Unix/Linux like bash shell running on Windows.</td>\n</tr>\n<tr>\n<td>Bash as Admin</td>\n<td>bash.exe</td>\n<td>Administrative Unix/Linux like bash shell running on Windows.</td>\n</tr>\n<tr>\n<td>Mintty</td>\n<td>bash.exe</td>\n<td>Unix/Linux like bash shell running on Windows.</td>\n</tr>\n<tr>\n<td>Mintty as Admin</td>\n<td>bash.exe</td>\n<td>Administrative Unix/Linux like bash shell running on Windows.</td>\n</tr>\n</tbody>\n</table>\n<p>若使用 Mintty 需进行额外设置，详见<a href=\"https://github.com/cmderdev/cmder\">Access to multiple shells in one window using tabs</a>。</p>\n<blockquote>\n<p>使用 cmd.exe、powershell.exe 和 bash.exe，切换盘符有差别</p>\n<ul>\n<li>cmd.exe、powershell.exe 下切换盘符：直接输入盘符加冒号</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设当前目录为C盘，想切换到D盘</span></span><br><span class=\"line\"><span class=\"attr\">d</span>:</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; - bash.exe下切换盘符： cd空格/盘符/</span><br><span class=\"line\">```js</span><br><span class=\"line\">// 假设当前目录为C盘，想切换到D盘</span><br><span class=\"line\">cd /d/</span><br></pre></td></tr></table></figure>\n<h1 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h1><h2 id=\"打开-cmder\"><a href=\"#打开-cmder\" class=\"headerlink\" title=\"打开 cmder\"></a>打开 cmder</h2><ul>\n<li><strong>当前目录右键打开 cmder</strong><br> 开始后 cmder 默认目录为当前目录</li>\n<li><strong>win+r，输入 cmder</strong><br> 开启后默认目录为 C:\\Users\\Administrator</li>\n</ul>\n<h2 id=\"调出设置面板\"><a href=\"#调出设置面板\" class=\"headerlink\" title=\"调出设置面板\"></a>调出设置面板</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">win + alt + p</span><br></pre></td></tr></table></figure>\n<h2 id=\"在已有终端窗口下打开新窗口\"><a href=\"#在已有终端窗口下打开新窗口\" class=\"headerlink\" title=\"在已有终端窗口下打开新窗口\"></a>在已有终端窗口下打开新窗口</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctrl + t</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若想以管理员身份打开终端，<code>ctrl + t</code>调出选择面板后，勾选<code>run as administrator</code>。<br>在这里，也可以选择以什么任务打开新的窗口而非默认值</p>\n</blockquote>\n<h2 id=\"分屏显示\"><a href=\"#分屏显示\" class=\"headerlink\" title=\"分屏显示\"></a>分屏显示</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">LShift</span> + <span class=\"title class_\">LAlt</span> + s; <span class=\"comment\">// 自定义快捷键</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"关联编辑器\"><a href=\"#关联编辑器\" class=\"headerlink\" title=\"关联编辑器\"></a>关联编辑器</h1><h2 id=\"webstorm\"><a href=\"#webstorm\" class=\"headerlink\" title=\"webstorm\"></a>webstorm</h2><p>settings &gt; terminal &gt; shell path, 填写下面内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;cmd.exe&quot;</span> /k <span class=\"string\">&quot;&quot;</span>%CMDER_ROOT%\\vendor\\init.bat<span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>cmd.exe 需要加引号，路径需要加两个引号，不然可能会报下面错误</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.io.IOException: Couldn<span class=\"string\">&#x27;t create PTY</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"sublime\"><a href=\"#sublime\" class=\"headerlink\" title=\"sublime\"></a>sublime</h2><p>无法直接内嵌到 sublime 中，但可以在使用 sublime 时通过快捷键打开 cmder</p>\n<ul>\n<li>安装插件<code>terminal</code></li>\n<li><p>设置<code>terminal</code><br>Preferences-&gt;Package Settings-&gt;Terminal-&gt;Settings-User，输入下面内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输入cmder路径</span></span><br><span class=\"line\">    <span class=\"string\">&quot;terminal&quot;</span>: <span class=\"string\">&quot;X:\\\\software\\\\cmder\\\\Cmder.exe&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过设置自定义快捷键，使用命令&quot;open_terminal&quot; 或者</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;open_terminal_project_folder&quot;打开终端</span></span><br><span class=\"line\">    <span class=\"string\">&quot;parameters&quot;</span>: [<span class=\"string\">&quot;/START&quot;</span>,<span class=\"string\">&quot;%CWD%&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义打开终端快捷键<br>Preferences-&gt;Key Bindings - User，输入下面内容</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;keys&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;alt+2&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;open_terminal&quot;</span> <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h1><p>cmder 支持 Aliases，通过<code>alias</code>命令可以设置别名，简化操作，terminal 中输入<code>alias 替代名=被替代名 $*</code>，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">ls</span>=<span class=\"built_in\">ls</span> --color $*</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>也可以直接在 cmder 安装目录/config/user-aliases.cmd 中直接输入要设置的别名</p>\n</blockquote>\n<h1 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h1><p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/cmder170726.png\" alt=\"cmder效果图\"></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li>win10 创意者更新（1703）安装后 cmder 光标前多了一个空格，且<code>ls</code>打印的目录没有颜色，将 win10 cmd 更改为“使用旧版控制台”就可以了（打开 windows 自带终端，标题栏右键–&gt;属性–&gt;选项，可看到使用旧版控制台选项），更多信息可查看这个 issue: <a href=\"https://github.com/cmderdev/cmder/issues/1339\">display error with non-ASCII characters on windows 1703</a></li>\n</ol>\n<blockquote>\n<p>如果要使用 Windows 自带 bash 功能，必须使用新版控制台，但 Windows 下的 bash 目前（2017-07-03）还很鸡肋，不建议使用。</p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"https://github.com/cmderdev/cmder\">cmderdev/cmder</a><br>【2】<a href=\"http://front-end.leanote.com/post/Cmder\">Cmder 使用</a><br>【3】<a href=\"http://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/\">Win 下必备神器之 Cmder</a><br>【4】<a href=\"http://imweb.io/topic/56b072d05c49f9d377ed8ee2\">再见 2015 再见 cmd</a></p>\n","categories":["Tools"],"tags":["cmder","webstorm","sublime"]},{"title":"sublime自定义主题配色","url":"https://xiaogliu.github.io/2017/04/07/define-sublime-theme-color/","content":"<p>对插件BracketHighlighter默认高亮及sublime自带markdown高亮显示不满意，搜索教程后在这做下总结。</p>\n<h1 id=\"theme和color-them的区别\"><a href=\"#theme和color-them的区别\" class=\"headerlink\" title=\"theme和color_them的区别\"></a>theme和color_them的区别</h1><p>首先要要区分两个概念<code>theme</code>和<code>color_theme</code>：</p>\n<ul>\n<li><code>theme</code><br>可以理解为<em>形状、布局</em>等框架类的东西，比如tab是方形还是带有弧度，侧边栏文件显示带有图标与否等等   </li>\n<li><code>color_theme</code><br>顾名思义：主题的颜色，实在形状、布局的基础上着色。所以，如果想调整某一主题的颜色，需要修改<code>color_theme</code>   </li>\n</ul>\n<p>sublime通过 preferences &gt; color theme &gt; user 对color theme进行选择，color theme文件后缀为<code>.tmTheme</code>。   </p>\n<p>网站 <a href=\"http://tmtheme-editor.herokuapp.com\">tmtheme-editor</a> 可以在线调整颜色，支持本地文件导入，调整结束后再下载到本地，非常方便。<strong>即便如此，如果不是从事设计工作，很难调出一款满意的配色，但如果确实对某款插件或者某种语言的高亮显示不满意，最简单的方法就是针对该款插件或者语言搜索已有的优化方案，然后添加到正在使用的color_theme文件中，覆盖原有配色。</strong>   </p>\n<h1 id=\"优化BracketHighlighter高亮显示\"><a href=\"#优化BracketHighlighter高亮显示\" class=\"headerlink\" title=\"优化BracketHighlighter高亮显示\"></a>优化BracketHighlighter高亮显示</h1><p>效果图：<br><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/bracket.png\" alt=\"BracketHighlighter自定义高亮显示\"></p>\n<blockquote>\n<p>实际使用中我只保留了蓝色和未配对时显示的红色，太多颜色反而觉得好乱。但下面的配置依然是多色方案。</p>\n</blockquote>\n<h2 id=\"对插件进行设置\"><a href=\"#对插件进行设置\" class=\"headerlink\" title=\"对插件进行设置\"></a>对插件进行设置</h2><p>在 Preferences &gt; package settings &gt; Bracket Highlighter &gt; Bracket Settings-User 中添加下面内容   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;bracket_styles&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;default&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;dot&quot;</span>,  <span class=\"comment\">//符号的类型：() &#123;&#125; &lt;&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;entity.name.class&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.default&quot;</span>, <span class=\"comment\">//颜色配置</span></span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;highlight&quot;</span>  <span class=\"comment\">//高亮的类型:highlight（整个白色）或者outline（下划线）</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;unmatched&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;question&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.unmatched&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;highlight&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// User defined region styles</span></span><br><span class=\"line\">        <span class=\"string\">&quot;curly&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;curly_bracket&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.curly&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;highlight&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;round&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;round_bracket&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.round&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;highlight&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;square&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;square_bracket&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.square&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;highlight&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;angle&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;angle_bracket&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.angle&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;highlight&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;tag&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;tag&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.tag&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;highlight&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;single_quote&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;single_quote&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.quote&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;highlight&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;double_quote&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;double_quote&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.quote&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;highlight&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;regex&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;icon&quot;</span>: <span class=\"string\">&quot;regex&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;brackethighlighter.quote&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;style&quot;</span>: <span class=\"string\">&quot;outline&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对-tmTheme文件进行设置\"><a href=\"#对-tmTheme文件进行设置\" class=\"headerlink\" title=\"对.tmTheme文件进行设置\"></a>对<code>.tmTheme</code>文件进行设置</h2><p>找到Sublime text3安装目录下的Packages中的<code>Color Scheme - Default.sublime-package</code>，给该文件添加<code>.zip</code>后缀，解压找到<code>Monokai.tmTheme</code>（颜色主题），添加如下内容到<code>&lt;/array&gt;</code>元素之前：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Bracket Default<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>brackethighlighter.default<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>background<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#A6E22E<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Bracket Unmatched<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>brackethighlighter.unmatched<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>background<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#FF0000<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Bracket Curly<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>brackethighlighter.curly<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#FF00FF<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Bracket Round<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>brackethighlighter.round<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#E7FF04<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Bracket Square<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>brackethighlighter.square<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#FE4800<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Bracket Angle<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>brackethighlighter.angle<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#02F78E<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Bracket Tag<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>brackethighlighter.tag<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>background<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#0080FF<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Bracket Quote<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>brackethighlighter.quote<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#56FF00<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改完成的文件放到压缩包<code>Color Scheme – Default.sublime-package.zip</code>里边（直接拖过去就好），最后改名为<code>Color Scheme – Default.sublime-package</code>放回源目录。</p>\n<blockquote>\n<p>不能将<code>Color Scheme – Default.sublime-package.zip</code>解压再压缩，否则sublime无法识别这个文件</p>\n</blockquote>\n<h1 id=\"优化markdown高亮显示\"><a href=\"#优化markdown高亮显示\" class=\"headerlink\" title=\"优化markdown高亮显示\"></a>优化markdown高亮显示</h1><p>效果图：   </p>\n<p><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/markdown2.png\" alt=\"markdown高亮效果图\"></p>\n<h2 id=\"引入插件\"><a href=\"#引入插件\" class=\"headerlink\" title=\"引入插件\"></a>引入插件</h2><p>安装插件 <a href=\"https://github.com/jonschlinkert/sublime-markdown-extended\">Markdown Extended</a></p>\n<h2 id=\"扩展主题\"><a href=\"#扩展主题\" class=\"headerlink\" title=\"扩展主题\"></a>扩展主题</h2><p>打开 preferences &gt; color theme &gt; user 引用的<code>.tmTheme</code>文件，添加如下内容到<code>&lt;/array&gt;</code>元素之前：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: plain<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>text.html.markdown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#ffffff<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markup: raw inline<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>text.html.markdown markup.raw.inline<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#ec3533<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: linebreak<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>text.html.markdown meta.dummy.line-break<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#e0eddd<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: heading<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markdown.heading, markup.heading | markup.heading entity.name, markup.heading.markdown punctuation.definition.heading.markdown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#fd971f<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markup: italic<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markup.italic<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>italic<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#e42e70<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markup: bold<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markup.bold<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>bold<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#f92672<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markup: underline<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markup.underline<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>underline<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#a6e22e<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markup: strike<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markup.strike<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#cc4273<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: Blockquote<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markup.quote, punctuation.definition.blockquote.markdown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>italic<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#66d9ef<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markup: Quote<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markup.quote<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span> italic<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#66d9ef<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: Link<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>string.other.link.title.markdown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>underline<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#66d9ef<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markup: Raw block<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markup.raw.block<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#ae81ff<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: List Items Punctuation<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>punctuation.definition.list_item.markdown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#777777<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: Raw Block fenced<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markup.raw.block.fenced.markdown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>background<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#222<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#ffffff<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: Fenced Bode Block<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>punctuation.definition.fenced.markdown, variable.language.fenced.markdown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>background<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#222222<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#636050<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: Fenced Language<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>variable.language.fenced.markdown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#7c7865<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markdown: Separator<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>meta.separator<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>background<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#ffffff0f<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>fontStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>bold<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#ffffff33<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Markup: table<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>markup.table<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>background<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#ff3a281a<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>foreground<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>#b42a1d<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"http://www.cnblogs.com/willingtolove/p/4657320.html\">Sublime Text3 BracketHighlighter高亮色彩配置</a></p>\n","categories":["Tools"],"tags":["sublime","markdown","BracketHighlighter"]},{"title":"自用markdown写文章格式规范","url":"https://xiaogliu.github.io/2017/04/07/markdown-normalization/","content":"<h1 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h1><p>一级标题使用<code>#</code>，即markdown默认<code>h1</code>，同时设置fexo主题，<code>h1</code>加下划线，如果一级标题下有子项，使用<code>##</code>，最多只能嵌套一层，否则标题前加数字区分如<code>1</code> <code>1.1</code> <code>1.1.1</code>，最多嵌套两层。</p>\n<h1 id=\"空白行与空格\"><a href=\"#空白行与空格\" class=\"headerlink\" title=\"空白行与空格\"></a>空白行与空格</h1><ul>\n<li>标题前后加多一空白行；   </li>\n<li>区块引用<code>&gt;</code>后面加多一空白行；   </li>\n<li>代码块前后加多一空白行   </li>\n<li>若需要在段落内换行，在行结尾处使用三个空格；   </li>\n<li>每段结束后，加多三个空格；   </li>\n<li>链接文字前后加一个空格   </li>\n</ul>\n<h1 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h1><p>代码块都要注明代码类型。   </p>\n<blockquote>\n<p>由于json不能添加注释，如果需要添加注释以便更好阅读，用<code>js</code>类型替换</p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"http://wowubuntu.com/markdown/\">Markdown 语法说明 (简体中文版)</a>   </p>\n","categories":["Tools"],"tags":["Normalization","markdown"]},{"title":"sublime使用指南","url":"https://xiaogliu.github.io/2017/03/17/sublime-guide/","content":"<h1 id=\"插件管理\"><a href=\"#插件管理\" class=\"headerlink\" title=\"插件管理\"></a>插件管理</h1><h2 id=\"安装插件（包括主题）\"><a href=\"#安装插件（包括主题）\" class=\"headerlink\" title=\"安装插件（包括主题）\"></a>安装插件（包括主题）</h2><ul>\n<li><p>方法一：使用package control<br><code>ctrl+shift+p</code> 调出命令面板，输入install根据提示找到<code>package control：install package</code> ，选中并回车，输入插件名安装，页面左下角会提示安装进度。</p>\n<blockquote>\n<p>有文章说需要先调出console，输入下面代码才可以使用package control，目前（2017/3/17）我下载sublime3，package control已经安装好，无需这步操作（如果在menu &gt; preferences下面有package control，证明已安装好）   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import urllib.request,os; pf = &#x27;Package Control.sublime-package&#x27;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#x27;wb&#x27;).write(urllib.request.urlopen( &#x27;http://sublime.wbond.net/&#x27; + pf.replace(&#x27; &#x27;,&#x27;%20&#x27;)).read())</span><br></pre></td></tr></table></figure></blockquote>\n</li>\n<li><p>方法： 直接将package文件夹放到sublime package目录（menu &gt; preferences &gt; browse packages，点击直接打开package文件夹）   </p>\n<blockquote>\n<p>若国内网络环境不允许或者，更换电脑，用此方法方便快捷</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"删除插件\"><a href=\"#删除插件\" class=\"headerlink\" title=\"删除插件\"></a>删除插件</h2><p><code>ctrl+shift+p</code> 调出命令面板，输入remove根据提示找到 <code>package control：remove package</code>，直接输入需要删除的插件名称，或者用上下方向键选择需要删除的插件。</p>\n<h2 id=\"其他插件管理选项\"><a href=\"#其他插件管理选项\" class=\"headerlink\" title=\"其他插件管理选项\"></a>其他插件管理选项</h2><ul>\n<li>查看插件： list package</li>\n<li>更新插件： upgrade package   </li>\n<li>禁用插件： disable package   </li>\n<li>激活插件： enable package   </li>\n</ul>\n<blockquote>\n<p>禁用插件等同于在preferences &gt; settings &gt; user里添加需要忽略的插件：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;ignored_packages&quot;</span>:</span><br><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">&quot;Vintage&quot;</span> <span class=\"comment\">// 在这个数组里面添加需要忽略的插件</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"自用插件\"><a href=\"#自用插件\" class=\"headerlink\" title=\"自用插件\"></a>自用插件</h2><ul>\n<li>Package Control：插件管理，已随sublime3安装好；</li>\n<li><a href=\"https://github.com/BoundInCode/AutoFileName\">AutoFileName</a>：自动补全文件路径，比如图片；</li>\n<li><a href=\"https://github.com/babel/babel-sublime\">Babel</a>：将ES6语法转化为ES5（2017-05-31更）；</li>\n<li><a href=\"https://github.com/facelessuser/BracketHighlighter\">BracketHightLighter</a>：成对括号、标签高亮（自定义颜色高亮点这里<a href=\"https://xiaogliu.github.io/2017/04/07/sublime%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A2%9C%E8%89%B2/#优化BracketHighlighter高亮显示\">优化BracketHighlighter高亮显示</a>）；</li>\n<li><a href=\"https://github.com/csscomb/CSScomb-for-Sublime\">CSScomb</a>：css属性排序；</li>\n<li><a href=\"https://github.com/sergeche/emmet-sublime\">Emmet</a>：html编辑自动补全；</li>\n<li><a href=\"https://packagecontrol.io/packages/EJS%202\">EJS2</a>：EJS文件高亮；（编辑hexo主题使用）</li>\n<li><a href=\"https://github.com/victorporof/Sublime-JSHint\">JSHint Gutter</a>：js代码检查工具；</li>\n<li><a href=\"https://github.com/jonschlinkert/sublime-markdown-extended\">Markdown Extended</a>：markdown高亮优化（查看<a href=\"https://xiaogliu.github.io/2017/04/07/sublime%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A2%9C%E8%89%B2/#优化markdown高亮显示\">效果图</a>）；</li>\n<li><a href=\"https://github.com/revolunet/sublimetext-markdown-preview\">Markdown Preview</a>：Markdown预览插件（<strong>快捷键<code>ctrl + B</code>可以将当前md文件编译成html文件，超赞</strong>）；</li>\n<li><a href=\"https://github.com/bitwiser73/MarkdownTableFormatter\">Markdown Table Formatter</a>：格式化表格；</li>\n<li><a href=\"https://github.com/SublimeText-Markdown/MarkdownEditing\">Markdown Editing</a>：加粗、斜体可以使用快捷键；</li>\n<li><a href=\"https://github.com/bistory/Sublime-Minifier\">Minifier</a>：用Gulp替代？；</li>\n<li><a href=\"https://github.com/nathos/sass-textmate-bundle\">Sass</a>：Sass语法高亮；</li>\n<li><a href=\"https://github.com/titoBouzout/SideBarEnhancements\">SideBarEnhancements</a>：在sidebar中增强右键功能，比如在浏览器中打开文件；</li>\n<li><a href=\"https://packagecontrol.io/packages/Terminal\">Terminal</a>：在sublime使用过程中打开终端；</li>\n<li><a href=\"https://github.com/buymeasoda/soda-theme\">Theme-soda</a>：清爽不浮夸；</li>\n<li><a href=\"http://www.typescriptlang.org/\">TypeScript</a>：TypeScript语法高亮；</li>\n<li><a href=\"https://github.com/guillermooo/Vintageous\">Vintageous</a>：在sublime下开启vi/vim模式；</li>\n<li><a href=\"https://github.com/vuejs/vue-syntax-highlight\">Vue Syntax Highlight</a>：vue语法高亮，注意，需要配合sass插件才能使vue文件中<code>&lt;style lang=&quot;scss&quot;&gt;</code>中的sass代码高亮。</li>\n</ul>\n<blockquote>\n<p>为了有更好的<code>JSX</code>语法高亮显示，Babel推荐将sublime内置的<code>Javascript</code>语法高亮禁用，而使用<code>Javascript(Babel)</code>作为默认高亮方案。但禁用内置js语法高亮后，在Markdown文件里，使用<code>Markdown Extended</code>的高亮方案的js代码，函数体外的单行注释高亮有问题，所以，不建议禁用sublime内置js语法高亮。</p>\n</blockquote>\n<p>下面插件可选：</p>\n<ul>\n<li><a href=\"https://github.com/Monnoroch/ColorHighlighter\">Color Highlighter</a>：配合git显示文件增减标志；（影响性能）</li>\n<li><a href=\"https://github.com/jisaacks/GitGutter\">GitGutter</a>：配合git显示文件增减标志；（影响性能）</li>\n<li><a href=\"https://github.com/jdc0589/JsFormat\">JsFormat</a>：格式化js代码；（手写注意为主，代码检查为辅）</li>\n<li><a href=\"https://github.com/tssajo/Minify\">Minify</a>：压缩js,css文件（和Minifier不同）；</li>\n<li><a href=\"https://github.com/dzhibas/SublimePrettyJson\">Pretty Json</a>：json格式化；（一般js文件在Chrome插件<a href=\"https://chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj?utm_source=chrome-app-launcher-info-dialog\">JSON-handle</a>中看，日志类长文件在Notepad++中看）</li>\n<li><a href=\"https://github.com/SublimeText/TrailingSpaces\">TrailingSpaces</a>：高亮多余空格或tab；（手写注意为主，代码检查为辅）</li>\n</ul>\n<blockquote>\n<p>sublime归根结底是文本编辑器，如果安装太多对代码进行大量渲染的插件，比如<code>GitGutter</code>, <code>Color Highlighter</code>，对性能肯定有所影响。当文件较小时这种影响不是很明显，但当文件大了以后，比如代码超过10000行，这种影响是很明显的。</p>\n</blockquote>\n<h1 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h1><h2 id=\"常用默认快捷键：\"><a href=\"#常用默认快捷键：\" class=\"headerlink\" title=\"常用默认快捷键：\"></a>常用默认快捷键：</h2><p><code>ctrl + p</code>: 在项目中快速查找文件   </p>\n<blockquote>\n<p>方向键下进行选择，按<code>enter</code>打开单个文件，<strong>按<code>右方向键</code>可以打开多个文件</strong>   </p>\n</blockquote>\n<h2 id=\"自定义常用快捷键：\"><a href=\"#自定义常用快捷键：\" class=\"headerlink\" title=\"自定义常用快捷键：\"></a>自定义常用快捷键：</h2><p>menu &gt; preferences &gt; key bindings,在user文件中，输入自定义快捷键。自己自定以快捷键如下：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;ctrl+alt+i&quot;], &quot;command&quot;: &quot;reindent&quot; &#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;alt+1&quot;], &quot;command&quot;: &quot;toggle_side_bar&quot; &#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;alt+2&quot;],&quot;command&quot;: &quot;open_terminal&quot;&#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;alt+3&quot;], &quot;command&quot;: &quot;show_panel&quot;, &quot;args&quot;: &#123;&quot;panel&quot;: &quot;console&quot;, &quot;toggle&quot;: true&#125; &#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;ctrl+d&quot;], &quot;command&quot;: &quot;run_macro_file&quot;, &quot;args&quot;: &#123;&quot;file&quot;: &quot;res://Packages/Default/Delete Line.sublime-macro&quot;&#125; &#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;ctrl+y&quot;], &quot;command&quot;: &quot;duplicate_line&quot; &#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;ctrl+o&quot;], &quot;command&quot;: &quot;run_macro_file&quot;, &quot;args&quot;: &#123;&quot;file&quot;: &quot;res://Packages/Default/Add Line.sublime-macro&quot;&#125; &#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;ctrl+shift+-&quot;], &quot;command&quot;: &quot;fold&quot; &#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;ctrl+shift+=&quot;], &quot;command&quot;: &quot;unfold&quot; &#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;alt+shift+f&quot;], &quot;command&quot;: &quot;show_panel&quot;, &quot;args&quot;: &#123;&quot;panel&quot;: &quot;find_in_files&quot;&#125; &#125;,</span><br><span class=\"line\">  &#123; &quot;keys&quot;: [&quot;alt+j&quot;], &quot;command&quot;: &quot;find_under_expand&quot; &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;keys&quot;: [&quot;j&quot;, &quot;j&quot;],</span><br><span class=\"line\">    &quot;command&quot;: &quot;_enter_normal_mode&quot;,</span><br><span class=\"line\">    &quot;args&quot;: &#123;</span><br><span class=\"line\">      &quot;mode&quot;: &quot;mode_insert&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;context&quot;: [&#123;&quot;key&quot;: &quot;vi_insert_mode_aware&quot;&#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h1><p>以下在menu &gt; preferences &gt; settings &gt; user中设置</p>\n<h2 id=\"选中带中划线“-”的文本（如css的class名）\"><a href=\"#选中带中划线“-”的文本（如css的class名）\" class=\"headerlink\" title=\"选中带中划线“-”的文本（如css的class名）\"></a>选中带中划线“-”的文本（如css的class名）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">word_separators&quot;: &quot;./\\\\()\\&quot;&#x27;:,.;&lt;&gt;~!@#$%^&amp;*|+=[]&#123;&#125;`~?&quot;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"显示space，tab符号\"><a href=\"#显示space，tab符号\" class=\"headerlink\" title=\"显示space，tab符号\"></a>显示space，tab符号</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;draw_white_space&quot;: &quot;all&quot;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"换行为UNIX格式（LF）\"><a href=\"#换行为UNIX格式（LF）\" class=\"headerlink\" title=\"换行为UNIX格式（LF）\"></a>换行为UNIX格式（LF）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;default_line_ending&quot;: &quot;unix&quot;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>推荐使用UNIX格式的行结束符，这样兼容性更好。换行符详细区分见<a href=\"http://www.ruanyifeng.com/blog/2006/04/post_213.html\">回车和换行</a>   </p>\n</blockquote>\n<h2 id=\"状态栏显示编码和行结束（line-endings）提示\"><a href=\"#状态栏显示编码和行结束（line-endings）提示\" class=\"headerlink\" title=\"状态栏显示编码和行结束（line-endings）提示\"></a>状态栏显示编码和行结束（line-endings）提示</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;show_encoding&quot;: true,</span><br><span class=\"line\">&quot;show_line_endings&quot;: true,</span><br></pre></td></tr></table></figure>\n<h2 id=\"user文件所有设置如下\"><a href=\"#user文件所有设置如下\" class=\"headerlink\" title=\"user文件所有设置如下\"></a>user文件所有设置如下</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;color_scheme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Packages/User/SublimeLinter/Monokai Soda (SL).tmTheme&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;default_line_ending&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;unix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;font_face&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Microsoft YaHei Mono&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;font_face&quot;: &quot;YaHei Consolas Hybrid&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;font_face&quot;: &quot;Ubuntu Mono&quot;,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;font_size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">12</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ignored_packages&quot;</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">  <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Color Highlighter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;JavaScript&quot;,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Markdown&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Vintage&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Vintageous&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;soda_classic_tabs&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tab_size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;theme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Soda Dark 3.sublime-theme&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;word_separators&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./\\\\()\\&quot;&#x27;:,.;&lt;&gt;~!@#$%^&amp;*|+=[]&#123;&#125;`~?&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;show_encoding&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 显示文件编码</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;show_line_endings&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果要将字体设为系统中没有的，比如Ubuntu Mono，需要在系统中安装Ubuntu Mono字体，下载地址<a href=\"http://font.ubuntu.com/\">Ubuntu Font</a>。</p>\n</blockquote>\n<h1 id=\"ubuntu下使用\"><a href=\"#ubuntu下使用\" class=\"headerlink\" title=\"ubuntu下使用\"></a>ubuntu下使用</h1><h2 id=\"输入中文\"><a href=\"#输入中文\" class=\"headerlink\" title=\"输入中文\"></a>输入中文</h2><p>可参考这个仓库的做法<a href=\"https://github.com/lyfeyaj/sublime-text-imfix\">lyfeyaj/sublime-text-imfix</a></p>\n<h1 id=\"重要更新\"><a href=\"#重要更新\" class=\"headerlink\" title=\"重要更新\"></a>重要更新</h1><p>现在主力编辑器（2017-09-14）已经更换为<a href=\"https://atom.io/\">Atom</a>，原因如下：</p>\n<ul>\n<li>最为重要的是sublime在js代码有注释的情况下，自动缩进失效，这个问题在github上早有提及<a href=\"https://github.com/SublimeTextIssues/Core/issues/1271\">Reindent command breaks on (multiline) comments</a>，但一直没有解决；</li>\n<li>关于主题高亮，atom默认主题<code>one dark</code>可以区分html标签，js关键字、自定义函数、原生函数，这样一目了然，而sublime试了默认主题，以及<code>Material Theme</code>还有其他几种，高亮区分都没有atom全，并且像<code>async</code>，ES7的关键字都没有高亮；</li>\n<li>对于markdown的支持，atom免费插件<a href=\"https://github.com/zhuochun/md-writer\">md-writer</a>，可定制性相当强大。sublime上有markdown书写插件<a href=\"https://github.com/SublimeText-Markdown/MarkdownEditing\">Markdown Editing</a>，但这个插件免费提供的功能非常有限，如果要使用完整功能，需要付费。</li>\n</ul>\n<p>以上三点，足以让自己的主力编辑器更换为atom了。sublime仍然保留，主要用于atom不能顺利打开的大文件（几十万行的代码？），但自定义设置、插件只保留必要的，比如LF换行，vue代码高亮插件等，其他为默认。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"http://bubkoo.com/2014/01/04/sublime-text-3-plugins/\">那些年我使用过的 Sublime Text 3 插件</a><br>【2】<a href=\"http://jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/\">如何优雅地使用Sublime Text</a><br>【3】<a href=\"http://www.cnblogs.com/willingtolove/p/4657320.html\">Sublime Text3 BracketHighlighter高亮色彩配置</a><br>【4】<a href=\"http://www.css88.com/archives/4539\">sublime text3 双击选中带中划线-的文本</a><br>【4】<a href=\"https://stackoverflow.com/questions/16195871/how-do-i-see-the-current-encoding-of-a-file-in-sublime-text-2\">How do I see the current encoding of a file in Sublime Text 2?</a></p>\n","categories":["Tools"],"tags":["sublime","编辑器"]},{"title":"Windows系统下Git配置使用","url":"https://xiaogliu.github.io/2017/03/06/configure-git-under-windows/","content":"<h1 id=\"一-安装\"><a href=\"#一-安装\" class=\"headerlink\" title=\"一 安装\"></a>一 安装</h1><p>git 客户端地址：<a href=\"https://git-scm.com/download/win\">Git for Windows</a><br>Git for Windows 提供了 GUI 和 Git Bash 两种操作方式，除<code>merge</code>差异巨大的分支外，建议都通过 Git Bash 进行代码维护。</p>\n<h1 id=\"二-配置\"><a href=\"#二-配置\" class=\"headerlink\" title=\"二 配置\"></a>二 配置</h1><h2 id=\"2-1-配置用户名和邮箱\"><a href=\"#2-1-配置用户名和邮箱\" class=\"headerlink\" title=\"2.1 配置用户名和邮箱\"></a>2.1 配置用户名和邮箱</h2><p>“这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;your name&quot;</span></span><br><span class=\"line\">git config --global user.email youremail@xxx.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-生成-SSH-公钥\"><a href=\"#2-2-生成-SSH-公钥\" class=\"headerlink\" title=\"2.2 生成 SSH 公钥\"></a>2.2 生成 SSH 公钥</h2><p>使用 git 进行代码管理一般都需要远程操作，为保证安全，使用 SSH 公钥机制进行数据加密，完成公钥加密需要进行两步操作：</p>\n<h3 id=\"2-2-1-将自己的公钥添加至远程服务器公钥列表\"><a href=\"#2-2-1-将自己的公钥添加至远程服务器公钥列表\" class=\"headerlink\" title=\"2.2.1 将自己的公钥添加至远程服务器公钥列表\"></a>2.2.1 将自己的公钥添加至远程服务器公钥列表</h3><p>若未将自己的公钥提交到远程服务器用于授权，进行<code>clone</code>, <code>pull</code>等操作时，会提示如下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not <span class=\"built_in\">read</span> from remote repository.</span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n<p>将自己的公钥添加至远程服务器公钥列表前，先查看自己是否有公钥，公钥默认存放在<code>~/.ssh</code>（波浪线代表用户的根目录，windows 默认用户根目录为<code>C:\\Users\\Administrator\\</code>），名称为<code>id_rsa.pub</code><br>若没有公钥，使用<code>ssh-keygen</code>命令生成公钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C youremail@xxx.com</span><br><span class=\"line\"><span class=\"comment\"># Generating public/private rsa key pair.</span></span><br><span class=\"line\"><span class=\"comment\"># Enter file in which to save the key (~/.ssh/id_rsa):</span></span><br><span class=\"line\"><span class=\"comment\"># Enter passphrase (empty for no passphrase):</span></span><br><span class=\"line\"><span class=\"comment\"># Enter same passphrase again:</span></span><br><span class=\"line\"><span class=\"comment\"># Your identification has been saved in ~/.ssh/id_rsa.</span></span><br><span class=\"line\"><span class=\"comment\"># Your public key has been saved in ~/.ssh/id_rsa.pub.</span></span><br><span class=\"line\"><span class=\"comment\"># The key fingerprint is:xxx</span></span><br></pre></td></tr></table></figure>\n<p>生成公钥过程中先要求你确认保存公钥的位置（.ssh/id_rsa），然后会让你重复一个密码两次，<strong>如果不想在使用公钥的时候输入密码，可以留空</strong>。</p>\n<h3 id=\"2-2-2-将远程服务器公钥添加到本地已知-host-列表（可能不需要用户授权，直接添加到已知-host-列表？）\"><a href=\"#2-2-2-将远程服务器公钥添加到本地已知-host-列表（可能不需要用户授权，直接添加到已知-host-列表？）\" class=\"headerlink\" title=\"2.2.2 将远程服务器公钥添加到本地已知 host 列表（可能不需要用户授权，直接添加到已知 host 列表？）\"></a>2.2.2 将远程服务器公钥添加到本地已知 host 列表（可能不需要用户授权，直接添加到已知 host 列表？）</h3><p>将自己的公钥放置到远程服务器列表后，首次<code>clone</code>操作，会提示给远程服务器授权，比如给 github 授权：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The authenticity of host &#x27;github.com (192.30.255.112)&#x27; can&#x27;t be established.</span></span><br><span class=\"line\"><span class=\"comment\"># RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class=\"line\"><span class=\"comment\"># Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"comment\"># Warning: Permanently added &#x27;github.com,192.30.255.112&#x27; (RSA) to the list of known hosts.</span></span><br></pre></td></tr></table></figure>\n<p>输入<code>yes</code>后，就将<code>github.com (192.30.255.112)</code>添加到本地 list of known hosts。</p>\n<p>配置完 SSH 公钥，就可以在本地对远程仓库进行操作了。</p>\n<blockquote>\n<p>.ssh 目录结构及说明如下<br>.ssh<br>|— id_rsa（秘钥，不能泄露）<br>|— id_rsa.pub（公钥，提供给需要首选的远程服务器）<br>|— known_hosts（已知远程服务器列表）<br>（关于 SSH 协议/RSA 算法/公钥秘钥机制，再写一篇 blog。）</p>\n</blockquote>\n<h1 id=\"三-解决乱码\"><a href=\"#三-解决乱码\" class=\"headerlink\" title=\"三 解决乱码\"></a>三 解决乱码</h1><p>安装完 git，新建 git 项目后，输入<code>git log</code>或<code>git status</code>命令后中文可能出现乱码，</p>\n<h2 id=\"3-1-解决-git-log-中文乱码\"><a href=\"#3-1-解决-git-log-中文乱码\" class=\"headerlink\" title=\"3.1 解决 git log 中文乱码\"></a>3.1 解决 git log 中文乱码</h2><p>乱码类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;E4&gt;&lt;BF&gt;&lt;AE&gt;&lt;E6&gt;&lt;94&gt;&lt;B9&gt;&lt;E6&gt;&lt;96&gt;&lt;87&gt;&lt;E6&gt;&lt;9C&gt;&lt;AC&gt;&lt;E6&gt;&lt;96&gt;&lt;87&gt;&lt;E6&gt;&lt;A1&gt;&lt;A3&gt;</span><br></pre></td></tr></table></figure>\n<p>或者这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">涓枃鍗氬娴嬭瘯</span><br></pre></td></tr></table></figure>\n<p>解决方法：打开 Git Bash，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global i18n.logoutputencoding gbk</span><br></pre></td></tr></table></figure>\n<p>很诡异，更换一台电脑以后（win10-1703），需要<code>utf-8</code>编码才能正确显示中文</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global i18n.logoutputencoding utf-8</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-解决-git-status-中文乱码\"><a href=\"#3-2-解决-git-status-中文乱码\" class=\"headerlink\" title=\"3.2 解决 git status 中文乱码\"></a>3.2 解决 git status 中文乱码</h2><p>乱码类似</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\247\\345\\223\\201\\351\\234\\200\\</span><br></pre></td></tr></table></figure>\n<p>解决方法：打开 Git Bash，输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>若输入上述命令后，乱码依旧，这时可能是 Git for Windows 版本问题，更换其他版本即可</strong>。比如 Git-2.11.0-64-bit 就出现中文乱码和不能输入中文的情况，上述方法都不能解决。<a href=\"https://github.com/git-for-windows/git/tags\">Git 各版本下载地址</a></p>\n</blockquote>\n<h1 id=\"四-常用命令\"><a href=\"#四-常用命令\" class=\"headerlink\" title=\"四 常用命令\"></a>四 常用命令</h1><p>在这篇文章中零散记录 Git 常用命令，如果多了，再独立成文。</p>\n<ul>\n<li>修改最后一次提交注释（未 push）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看本地分支与远程分支对应关系（远程有多个分支时有用，可以查看与哪个远程分支对应）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看远程分支地址</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>【1】<a href=\"http://stackoverflow.com/questions/673407/how-do-i-clear-my-local-working-directory-in-git\">How do I discard unstaged changes in Git?</a><br>【2】<a href=\"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE\">起步 - 初次运行 Git 前的配置</a></p>\n","categories":["Tools"],"tags":["Git","工具"]},{"title":"Chrome相关","url":"https://xiaogliu.github.io/2017/02/17/chrome/","content":"<p>Chrome快捷键在<a href=\"https://xiaogliu.github.io/2017/02/14/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BF%AB%E6%8D%B7%E9%94%AE/\">常用工具快捷键</a>里面有介绍，这篇文章主要记录Chrome其他设置。</p>\n<h2 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h2><ul>\n<li><p>字体<br>四个默认字体选项设置为「微软雅黑、Georgia、Verdana、Consolas」。</p>\n</li>\n<li><p>新建标签页<br>安装掘金插件，由扩展程序掘金控制。</p>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>【1】<a href=\"https://www.zhihu.com/question/20365811\">Chrome 设置什么字体较好？ - 王成回答</a></p>\n","categories":["Tools"],"tags":["chrome"]},{"title":"常用工具快捷键","url":"https://xiaogliu.github.io/2017/02/14/tools-shortcur-key/","content":"<p>记录常用工具快捷键，不求全，只记录高频率使用的部分，取舍得当反而有助于提升生产力。</p>\n<h2 id=\"MAC\"><a href=\"#MAC\" class=\"headerlink\" title=\"MAC\"></a>MAC</h2><ol>\n<li>shift + 左右光标 选中字母</li>\n<li>option + 左右光标 以单词为单位跳转</li>\n<li>cmd + 光左右光标 首尾跳转</li>\n<li>ctrl + 左右光标 桌面切换</li>\n</ol>\n<h2 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h2><p><strong>原生（插件 vimium 无法替代或无效时）</strong><br>1、在地址栏、书签栏（若显示）和页面内容之间向前切换焦点：<code>F6</code><br>2、关闭 tab：<code>ctrl</code> + <code>w</code> （新标签页 vimium 失效）<br>3、光标定位到地址栏： <code>ctrl</code> + <code>L</code>（Mac 是 <code>cmd + L</code>）</p>\n<p><strong>vimium 插件</strong><br>1、Open a link in the current tab (new tab)：<code>f</code> ( <code>F</code> )<br>2、上（下，左，右）移动： <code>j</code> ( <code>k</code>, <code>h</code>, <code>l</code> )【半屏下（上）： <code>d</code> ( <code>u</code> )】<br>3、返回顶部： <code>gg</code><br>4、create new tab: <code>t</code> 【配合 5 在新 tab 中打开需要的网页】<br>5、Open URL, bookmark or history(in new tab): <code>o</code> ( <code>O</code> ) 【Open a bookmark (in new tab): <code>b</code> ( <code>B</code> ) 】<br>6、close current tab： <code>x</code><br>7、标签页左（右）切换： <code>shift</code> + <code>j</code> ( <code>k</code> )<br>8、前进（后退）：<code>shift</code> + <code>h</code> ( <code>l</code> )<br>9、搜索： <code>/</code> + <code>内容</code> 【在搜索结果中上下检索： <code>n</code> ( <code>N</code> )】<br>10、refresh: <code>r</code><br>11、Focus the first text input on the page： <code>gi</code></p>\n<span id=\"more\"></span>\n<p>12、Copy the current URL to the clipboard: <code>yy</code><br>13、Restore closed tab: <code>X</code></p>\n<h2 id=\"Vim-Webstorm-and-Sublime\"><a href=\"#Vim-Webstorm-and-Sublime\" class=\"headerlink\" title=\"Vim, Webstorm and Sublime\"></a>Vim, Webstorm and Sublime</h2><p>sublime 很多程序猿使用，它有自己一套快捷键，需要学习使用；但快捷键 vim 不同，而我在自定义 webstorm 的快捷键时借鉴了 vim，毕竟好多 vim 快捷键有助于提升生产力，且 vim 是很多软件的内置编辑器，故，也不能放弃 vim 快捷键。<del>那就记两套快捷键：sublime 默认快捷键和 webstorm(vim)快捷键</del>sublime 自定义快捷键和 webstorm 统一(<strong>英文名称为自定义部分</strong>)。</p>\n<blockquote>\n<p>目前主力编辑器为 sublime，主要是更轻量，另外，相比 IDE，使用文本编辑器可以更清楚地知道自己在干嘛。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">name</th>\n<th style=\"text-align:left\">vim</th>\n<th style=\"text-align:left\">webstorm</th>\n<th style=\"text-align:left\">sublime</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">delete line</td>\n<td style=\"text-align:left\">dd</td>\n<td style=\"text-align:left\">ctrl + d</td>\n<td style=\"text-align:left\">ctrl + d</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">选中相同字符</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + j</td>\n<td style=\"text-align:left\">alt + j</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">duplicate line or selection</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + y</td>\n<td style=\"text-align:left\">ctrl + y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">start new line</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + o</td>\n<td style=\"text-align:left\">ctrl + o</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">折叠代码</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + shift + 减号</td>\n<td style=\"text-align:left\">ctrl + shift + 减号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">展开代码</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + shift + 等号（相当于 ctrl + 加号）</td>\n<td style=\"text-align:left\">ctrl + shift + 等号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">转换大写</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + shift + u (大小写切换)</td>\n<td style=\"text-align:left\">ctrl + k + u</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">转换小写</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + shift + u</td>\n<td style=\"text-align:left\">ctrl + k + l</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vim emulator</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + 0</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">project(default)</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + 1</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">terminal</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + 2</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">version control</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + 3</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">event log</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + 4</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">structure</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + 5</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gulp</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + 减号</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">favorites</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + 等号</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">open</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + shift + o</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">reindent</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + alt + i</td>\n<td style=\"text-align:left\">ctrl + alt + i</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find in path</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">alt + shift + f</td>\n<td style=\"text-align:left\">alt + shift + f</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">file</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + alt + shift + f</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">show in explorer</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + alt + shift + e</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">open in browser</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + alt + shift + b</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">show history</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + alt + shift + h</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">show history</td>\n<td style=\"text-align:left\">–</td>\n<td style=\"text-align:left\">ctrl + alt + shift + h</td>\n<td style=\"text-align:left\">–</td>\n</tr>\n</tbody>\n</table>\n<p><strong>配合 AutoHotKey 上下左右</strong></p>\n<h2 id=\"AutoHotKey\"><a href=\"#AutoHotKey\" class=\"headerlink\" title=\"AutoHotKey\"></a>AutoHotKey</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RAlt::RButton</span><br><span class=\"line\">;鼠标右键</span><br><span class=\"line\">;-------------------------------------</span><br><span class=\"line\">^+m::send &#123;RButton&#125;&#123;SetKeyDelay, 0&#125;w&#123;up 2&#125;&#123;enter&#125;</span><br><span class=\"line\">;快速新建txt文档</span><br><span class=\"line\">;^表示ctrl，+表示shift，m表示按键m,即新建文本的快捷键是[ctrl+shift+m]</span><br><span class=\"line\">;send后面是模拟按键（快捷键触发的真实按键），&#123;RButton&#125;代表鼠标右键，&#123;SetKeyDelay, 0&#125;代表右键后有最小延时</span><br><span class=\"line\">;up后面数字每个人不同，代表你按[右键+w]后&quot;文本文档&quot;从下往上的位置</span><br><span class=\"line\">;--------------------------------------</span><br><span class=\"line\">^#=::Send &#123;Volume_Up&#125;  ; Raise the master volume by 1 interval (typically 5%).</span><br><span class=\"line\">^#-::Send &#123;Volume_Down&#125;  ; Lower the master volume by 1 intervals.</span><br><span class=\"line\">;!#&#123;Down&#125;::Send &#123;Volume_Down 3&#125;  ; Lower the master volume by 3 intervals.</span><br><span class=\"line\">^#m::Send &#123;Volume_Mute&#125;  ; Mute/unmute the master volume.</span><br><span class=\"line\">;--------------------------------------</span><br><span class=\"line\">;--------------------------------------</span><br><span class=\"line\">#b::run, X:\\software\\nyfedit7\\myBase.exe ;open mybase</span><br><span class=\"line\">#f::run, X:\\software\\Everything\\Everything.exe ;open Everything</span><br><span class=\"line\">#o::run, C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\ONENOTE.EXE ;open onenote</span><br><span class=\"line\">#Space::run, https://xiaogliu.github.io/ ;open liuxiaoguang&#x27;blog</span><br><span class=\"line\">;--------------------------------------</span><br><span class=\"line\">;allow keys</span><br><span class=\"line\">+&lt;!j::send &#123;Down&#125; ;&lt;! is left alt</span><br><span class=\"line\">+&lt;!k::send &#123;Up&#125;</span><br><span class=\"line\">+&lt;!h::send &#123;Left&#125;</span><br><span class=\"line\">+&lt;!l::send &#123;Right&#125;</span><br><span class=\"line\">+&lt;!d::send &#123;Del&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Win10\"><a href=\"#Win10\" class=\"headerlink\" title=\"Win10\"></a>Win10</h2><p>1、打开任务栏程序： <code>win</code> + <code>数字</code><br>2、鼠标右键： <code>App</code> 或 <code>document图标键</code><br>3、打开资源管理器： <code>win</code> + <code>e</code> 【配合 <code>tab</code> 切换目录】<br>4、展示所有窗口： <code>win</code> + <code>tab</code> 【配合方向键选择，<code>alt</code> + ( <code>shift</code> + ) <code>tab</code> 更方便？】<br>5、显示桌面： <code>win</code> + <code>d</code><br>6、关闭程序： <code>win</code> + <code>f4</code><br>7、打开消息： <code>win</code> + <code>A</code></p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>1、新建文章： <code>hexo new name</code><br>2、构建 + 发布： <code>hexo g -d</code></p>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>1、list npm user-installed packages： <code>npm list -g --depth=0</code></p>\n<h2 id=\"命令行操作（通用，特殊单独指出）\"><a href=\"#命令行操作（通用，特殊单独指出）\" class=\"headerlink\" title=\"命令行操作（通用，特殊单独指出）\"></a>命令行操作（通用，特殊单独指出）</h2><p>1、新建文件夹： <code>mkdir</code><br>2、删除文件加： <code>rmdir</code> 【或者 <code>rm -r</code> 】<br>3、终端切换盘符：</p>\n<ul>\n<li>cmder and win 自带命令行：直接输入盘符加冒号，如 <code>c:</code></li>\n<li>gitbash：<code>cd</code> + <code>/盘符/</code></li>\n</ul>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p>【1】<a href=\"https://github.com/philc/vimium#keyboard-bindings\">Vimium - The Hacker’s Browser</a><br>【2】<a href=\"https://support.google.com/chrome/answer/157179?hl=zh-Hans\">Chrome 键盘快捷键</a><br>【3】<a href=\"https://support.microsoft.com/zh-cn/help/126449/keyboard-shortcuts-for-windows\">Windows 的键盘快捷键</a><br>【4】<a href=\"https://docs.npmjs.com/cli/ls\">npm-ls <em>List installed packages</em></a><br>【5】<a href=\"http://stackoverflow.com/questions/17937960/how-to-list-npm-user-installed-packages\">How to list npm user-installed packages?</a><br>【6】<a href=\"http://www.w3cschool.cn/linux/linux-file-content-manage.html\">Linux 文件与目录管理</a></p>\n","categories":["Tools"],"tags":["Tools"]},{"title":"Git使用过程遇到问题及解决方案","url":"https://xiaogliu.github.io/2017/02/12/gather-git-question/","content":"<p>记录自己git使用过程中遇到的问题及解决方案，随时更新。</p>\n<blockquote>\n<p>曾经为了删除未commit的本地更改网上搜了一个命令，解决把该分支下 <code>.git</code> 文件下的记录全部删掉，好在不是master分支，不然闯大祸。<br>网上的资料也都是网友整理，稂莠不齐，git命令强大，但正因如此，可能强大到失控，模棱两可的命令一定要参考官方文档。</p>\n</blockquote>\n<h2 id=\"pull报错’refusing-to-merge-unrelated-histories’\"><a href=\"#pull报错’refusing-to-merge-unrelated-histories’\" class=\"headerlink\" title=\"pull报错’refusing to merge unrelated histories’\"></a>pull报错’refusing to merge unrelated histories’</h2><ul>\n<li>问题描述</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>原因：The default behavior has changed since git 2.9:</p>\n<blockquote>\n<p>“git merge” used to allow merging two branches that have no common base by default, which led to a brand new history of an existing project created and then get pulled by an unsuspecting maintainer, which allowed an unnecessary parallel history merged into the existing project. The command has been taught not to allow this by default, with an escape hatch “–allow-unrelated-histories” option to be used in a rare event that merges histories of two projects that started their lives independently.</p>\n</blockquote>\n<p>See the <a href=\"https://github.com/git/git/blob/master/Documentation/RelNotes/2.9.0.txt#L58-L68\">git release changelog</a> for more information.</p>\n</li>\n<li><p>解决方案：Using <code>--allow-unrelated-histories</code> flag worked with pull request in this way</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull origin branchname --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考资料：stack<strong>overflow</strong> <a href=\"http://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories\">Git refusing to merge unrelated histories</a></li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"每次push要求填写用户名和密码\"><a href=\"#每次push要求填写用户名和密码\" class=\"headerlink\" title=\"每次push要求填写用户名和密码\"></a>每次push要求填写用户名和密码</h2><ul>\n<li><p>问题描述：已配置ssh，从remote repository可以正常clone，无需填写密码，但每次push有弹框跳出要求填写用户名密码。</p>\n</li>\n<li><p>原因：A common mistake is cloning using the default (HTTPS) instead of SSH.通过命令 <code>git remote -v</code>可以查看默认地址，如果https，要改回ssh<br><img src=\"https://raw.githubusercontent.com/xiaogliu/pic-lib/master/old/2017-02-12_201337.png\" alt=\"\"></p>\n</li>\n<li><p>解决方案：You can correct this by going to your repository, clicking the ssh button left to the URL field and updating the URL of your origin remote like this:(不需要重新clone一份)</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote set-url origin git@github.com:username/repo.git</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考资料：stack<strong>overflow</strong> <a href=\"http://stackoverflow.com/questions/6565357/git-push-requires-username-and-password\">Git push requires username and password</a></li>\n</ul>\n<h2 id=\"git中文乱码\"><a href=\"#git中文乱码\" class=\"headerlink\" title=\"git中文乱码\"></a>git中文乱码</h2><blockquote>\n<p><strong>实际跟版本也有关系！！！！2.92ok（完全默认设置），但最新的2.11中文就各种问题：不能输入，log乱码等等！</strong> 但安装完hexo，status状态下又乱码了，下面方法解决。</p>\n</blockquote>\n<ul>\n<li>问题描述：git status中文乱码，在中文情况下 git status是 “\\344\\272\\247\\345\\223\\201\\351\\234\\200\\346\\261\\202”差不多这样的。</li>\n<li>原因不明</li>\n<li>解决方案：解决这个问题方法是设置git编码：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Could-not-resolve-hostname-github-com\"><a href=\"#Could-not-resolve-hostname-github-com\" class=\"headerlink\" title=\"Could not resolve hostname github.com\"></a>Could not resolve hostname github.com</h2><ul>\n<li>问题描述：用着好好地，某天忽然报<code>Could not resolve hostname github.com</code>，完整错误见下</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh: Could not resolve hostname github.com: Name or service not known</span><br><span class=\"line\">fatal: Could not <span class=\"built_in\">read</span> from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解决方案：   </li>\n</ul>\n<p><code>ping</code>github.com，将得到的ip地址添加到hosts文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ping github.com</span><br></pre></td></tr></table></figure>\n<p>得到ip为192.30.253.112，将下面代码添加到hosts文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">192.30.253.112 github.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p>【1】<a href=\"http://blog.csdn.net/cjopengler/article/details/46585319\">git status 显示中文</a><br>【2】<a href=\"http://blog.csdn.net/piaotiejun/article/details/48734175\">git错误–ssh: Could not resolve hostname ssh.github.com: Name or service not known–解决方式</a></p>\n","categories":["Tools"],"tags":["git"]},{"title":"使用 Hexo + Github 搭建个人博客","url":"https://xiaogliu.github.io/2016/06/09/build-blog-by-hexo-github/","content":"<p>记录利用 hexo 搭建 blog 的过程。</p>\n<p>自从接触编程以来，一直想建立自己的博客来记录重要的学习笔记，这也符合“分享”的精神。但限于自己小白的身份，一直搭建不成功，直接使用 <a href=\"https://pages.github.com/\">github page</a>，只是自动生成了首页，但不知如何添加自己的文章。后面了解到，这可能需要借助 <a href=\"http://jekyllrb.com/\">jekll</a> ，但试着部署，还是有种累觉不爱的感觉：折腾的精神应该提倡，但写博客应该把精力放在内容本身上，而非花在样式、不熟等等事情上（算是给自己偷懒的说辞）。后来，注意，后来接触到了 <a href=\"https://hexo.io/\"><strong>hexo</strong></a> ，相比 jekll，它部署简单，并且实际写文章时也可以自动完成很多工作，使我可以专注写作。期间查了很多资料，在此一并做下总结。</p>\n<blockquote>\n<p>其他可选择方案：<a href=\"https://github.com/gatsbyjs/gatsby\">Gatsby</a>, <a href=\"https://github.com/gohugoio/hugo\">Hugo</a></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"一、环境准备\"><a href=\"#一、环境准备\" class=\"headerlink\" title=\"一、环境准备\"></a>一、环境准备</h2><h3 id=\"1-1-安装-Git\"><a href=\"#1-1-安装-Git\" class=\"headerlink\" title=\"1.1 安装 Git\"></a>1.1 安装 Git</h3><h3 id=\"1-2-安装-node-js\"><a href=\"#1-2-安装-node-js\" class=\"headerlink\" title=\"1.2 安装 node.js\"></a>1.2 安装 node.js</h3><h2 id=\"二、配置-Github\"><a href=\"#二、配置-Github\" class=\"headerlink\" title=\"二、配置 Github\"></a>二、配置 Github</h2><h3 id=\"2-1-建立-repository\"><a href=\"#2-1-建立-repository\" class=\"headerlink\" title=\"2.1 建立 repository\"></a>2.1 建立 repository</h3><p>必须先建立 username.github.io，可参照 github page 教程</p>\n<h3 id=\"2-2-配置-SSH-Key\"><a href=\"#2-2-配置-SSH-Key\" class=\"headerlink\" title=\"2.2 配置 SSH-Key\"></a>2.2 配置 SSH-Key</h3><p>貌似只有配置好 SSH-Key 以后才能用 git 命令远程控制 repository？</p>\n<h2 id=\"三、安装-Hexo\"><a href=\"#三、安装-Hexo\" class=\"headerlink\" title=\"三、安装 Hexo\"></a>三、安装 Hexo</h2><h3 id=\"3-1-安装\"><a href=\"#3-1-安装\" class=\"headerlink\" title=\"3.1 安装\"></a>3.1 安装</h3><p>打开 Git 命令控制窗口，执行下面命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-快速开始\"><a href=\"#3-2-快速开始\" class=\"headerlink\" title=\"3.2 快速开始\"></a>3.2 快速开始</h3><h4 id=\"3-2-1-设置你的博客\"><a href=\"#3-2-1-设置你的博客\" class=\"headerlink\" title=\"3.2.1 设置你的博客\"></a>3.2.1 设置你的博客</h4><p>在电脑中建立一个名字叫「Hexo」的文件夹（比如我建在了 E:\\Hexo），然后在此文件夹中右键打开 Git Bash。执行下面的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\"><span class=\"comment\"># [info] Copying data</span></span><br><span class=\"line\"><span class=\"comment\"># [info] You are almost done! Don&#x27;t forget to run `npm install` before you start b</span></span><br><span class=\"line\">logging with Hexo!</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 随后会自动在目标文件夹建立网站所需要的文件。然后按照提示，运行 npm install（在 &#x2F;E&#x2F;Hexo 下）</p>\n<blockquote>\n<p>windows 窗口下，在那个文件夹右键点击 git bash，git bash 打开后默认在该文件夹目录下</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>会在 E:\\Hexo 目录中安装 node_modules。</p>\n<h4 id=\"3-2-2-开始服务器（start-server）\"><a href=\"#3-2-2-开始服务器（start-server）\" class=\"headerlink\" title=\"3.2.2 开始服务器（start server）\"></a>3.2.2 开始服务器（start server）</h4><p>运行下面的命令（在 &#x2F;E&#x2F;Hexo 下）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">[info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n\n<p>表明 Hexo Server 已经启动了，在浏览器中打开 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> ，这时可以看到 Hexo 已为你生成了一篇 blog。<br>你可以按 Ctrl+C 停止 Server。</p>\n<blockquote>\n<p>只有在 hexo server 启动时，localhost 才可用</p>\n</blockquote>\n<h4 id=\"3-2-3-Create-a-new-post\"><a href=\"#3-2-3-Create-a-new-post\" class=\"headerlink\" title=\"3.2.3 Create a new post\"></a>3.2.3 Create a new post</h4><p>在&#x2F;E&#x2F;Hexo 目录下打开 git bash 窗口，执行下面的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># [info] File created at d:\\Hexo\\source\\_posts\\My-New-Post.md</span></span><br></pre></td></tr></table></figure>\n\n<p>刷新<a href=\"http://localhost:4000/\">http://localhost:4000/</a> ，可以发现在 E:\\Hexo\\source_posts 已生成了一篇新文章 “My New Post”。</p>\n<h4 id=\"3-2-4-Generate-static-files\"><a href=\"#3-2-4-Generate-static-files\" class=\"headerlink\" title=\"3.2.4 Generate static files\"></a>3.2.4 Generate static files</h4><p>执行下面的命令，将 markdown 文件生成静态网页。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>该命令执行完后，会在 D:\\Hexo\\public\\ 目录下生成一系列 html，css 等文件。</p>\n<h4 id=\"3-2-5-编辑文章\"><a href=\"#3-2-5-编辑文章\" class=\"headerlink\" title=\"3.2.5 编辑文章\"></a>3.2.5 编辑文章</h4><p>hexo new “My New Post”会在 D:\\Hexo\\source_posts 目录下生成一个 markdown 文件：My-New-Post.md<br>可以使用一个支持 markdown 语法的编辑器（比如 Sublime Text 2）来编辑该文件。</p>\n<blockquote>\n<p>只改文件名无效，需要更改文档中的 yaml 文件头。</p>\n</blockquote>\n<h4 id=\"3-2-6-部署到-Github\"><a href=\"#3-2-6-部署到-Github\" class=\"headerlink\" title=\"3.2.6 部署到 Github\"></a><strong>3.2.6 <font color=red>部署到 Github</font></strong></h4><h5 id=\"3-2-6-1-部署到-Github-前需要配置-hexo-的-config-yml-文件，首先找到下面的内容-一般在文档最后\"><a href=\"#3-2-6-1-部署到-Github-前需要配置-hexo-的-config-yml-文件，首先找到下面的内容-一般在文档最后\" class=\"headerlink\" title=\"3.2.6-1 部署到 Github 前需要配置 hexo 的_config.yml 文件，首先找到下面的内容(一般在文档最后)\"></a>3.2.6-1 部署到 Github 前需要配置 hexo 的_config.yml 文件，首先找到下面的内容(一般在文档最后)</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>:</span><br></pre></td></tr></table></figure>\n\n<p>然后将它们修改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repository: git@github.com:xiaogliu/xiaogliu.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p>Repository：必须是 SSH 形式的 url（ <a href=\"mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;\">&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;</a>:xiaogliu&#x2F;xiaogliu.github.io.git ），而不能是 HTTPS 形式的 url（<a href=\"https://github.com/xiaogliu/xiaogliu.github.io.git\">https://github.com/xiaogliu/xiaogliu.github.io.git</a> ），否则会出现错误：</p>\n<blockquote>\n<p>此处有坑，有说 type 为 github，但此处应该为 git，和 hexo 版本有关？？？</p>\n<p>另，有说：Be carefull, with your current configuration, you will erase all your source code on main branch. I recommend &gt; you to deploy on <code>gh-pages</code> to be automatically reachable at <a href=\"https://github.com/username/repository_name\">https://github.com/username/repository_name</a><br>deploy:<br>type: git<br>repo: <repository url><br>branch: gh-pages<br><a href=\"http://stackoverflow.com/questions/34452547/hexoerror-deployer-not-found-github\">http://stackoverflow.com/questions/34452547/hexoerror-deployer-not-found-github</a></p>\n</blockquote>\n<h5 id=\"3-2-6-2-安装-hexo-deployer\"><a href=\"#3-2-6-2-安装-hexo-deployer\" class=\"headerlink\" title=\"3.2.6-2 安装 hexo-deployer\"></a>3.2.6-2 安装 hexo-deployer</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2-6-3-deploy\"><a href=\"#3-2-6-3-deploy\" class=\"headerlink\" title=\"3.2.6-3 deploy\"></a>3.2.6-3 deploy</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">[info] Start deploying: github</span><br><span class=\"line\">[error] https://github.com/zhchnchn/zhchnchn.github.io is not a valid repositor URL!</span><br></pre></td></tr></table></figure>\n\n<p>使用 SSH url，如果电脑没有开放 SSH 端口，会致部署失败。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">fatal: Could not <span class=\"built_in\">read</span> from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果你是为一个项目制作网站，那么需要把 branch 设置为 gh-pages。</p>\n</blockquote>\n<h4 id=\"3-2-7-测试\"><a href=\"#3-2-7-测试\" class=\"headerlink\" title=\"3.2.7 测试\"></a>3.2.7 测试</h4><p>当部署完成后，在浏览器中打开<a href=\"https://xiaogliu.github.io/\">https://xiaogliu.github.io/</a> ，正常显示网页，表明部署成功。</p>\n<h4 id=\"3-2-8-总结\"><a href=\"#3-2-8-总结\" class=\"headerlink\" title=\"3.2.8 总结\"></a>3.2.8 总结</h4><p>每次部署的步骤，可按以下三步来进行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>每次写文章&#x2F;修改文章都要重新全部 deploy？？</p>\n</blockquote>\n<h4 id=\"3-2-9-总结：本地调试\"><a href=\"#3-2-9-总结：本地调试\" class=\"headerlink\" title=\"3.2.9 总结：本地调试\"></a>3.2.9 总结：本地调试</h4><h5 id=\"3-2-9-1-在执行下面的命令后，\"><a href=\"#3-2-9-1-在执行下面的命令后，\" class=\"headerlink\" title=\"3.2.9-1 在执行下面的命令后，\"></a>3.2.9-1 在执行下面的命令后，</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo g <span class=\"comment\">#生成</span></span><br><span class=\"line\">$ hexo s <span class=\"comment\">#启动本地服务，进行文章预览调试</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器输入<a href=\"http://localhost:4000/\">http://localhost:4000</a> ，查看搭建效果。此后的每次变更_config.yml 文件或者新建文件都可以先用此命令调试，尤其是当你想调试新添加的主题时。</p>\n<h5 id=\"3-2-9-2-可以用简化的一条命令\"><a href=\"#3-2-9-2-可以用简化的一条命令\" class=\"headerlink\" title=\"3.2.9-2 可以用简化的一条命令\"></a>3.2.9-2 可以用简化的一条命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-命令总结\"><a href=\"#3-3-命令总结\" class=\"headerlink\" title=\"3.3 命令总结\"></a>3.3 命令总结</h3><h4 id=\"3-3-1-常用命令\"><a href=\"#3-3-1-常用命令\" class=\"headerlink\" title=\"3.3.1 常用命令\"></a>3.3.1 常用命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;postName&quot;</span> <span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;pageName&quot;</span> <span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server <span class=\"comment\">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\">#将.deploy目录部署到GitHub</span></span><br><span class=\"line\">hexo <span class=\"built_in\">help</span>  <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">hexo version  <span class=\"comment\">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-2-复合命令\"><a href=\"#3-3-2-复合命令\" class=\"headerlink\" title=\"3.3.2 复合命令\"></a>3.3.2 复合命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo deploy -g  <span class=\"comment\">#生成加部署</span></span><br><span class=\"line\">hexo server -g  <span class=\"comment\">#生成加预览</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-4-命令的简写为\"><a href=\"#3-3-4-命令的简写为\" class=\"headerlink\" title=\"3.3.4 命令的简写为\"></a>3.3.4 命令的简写为</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、设计更改\"><a href=\"#四、设计更改\" class=\"headerlink\" title=\"四、设计更改\"></a>四、设计更改</h2><h3 id=\"4-1-更换主题\"><a href=\"#4-1-更换主题\" class=\"headerlink\" title=\"4.1 更换主题\"></a>4.1 更换主题</h3><p>在 Hexo 目录下打开 Git Bash，后只需要一句 Git 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://hexo.io/themes/\">more theme</a></p>\n</blockquote>\n<p>安装完成后，打开 hexo_config.yml，修改主题为 modernist</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: modernist</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>打开 hexo\\themes\\modernist 目录下的_config.yml，可做有限的定制。若想再次基础上做更多更改，需要编辑主题的 js（ejs）、css（styl）等文件。</p>\n</blockquote>\n<p>更新主题：进到主题相应文件夹，pull</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes/modernist</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加网站图标</strong></p>\n<p>在 hexo\\themes\\modernist\\layout_partial\\head.ejs，找到这句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;&lt;%- config.root %&gt;favicon.ico&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将你的 favicon.ico 放到工程根目录下即可，也就是 hexo\\source 目录。</p>\n<h3 id=\"4-2-自定义页面\"><a href=\"#4-2-自定义页面\" class=\"headerlink\" title=\"4.2 自定义页面\"></a>4.2 自定义页面</h3><h4 id=\"4-2-1-about-页面\"><a href=\"#4-2-1-about-页面\" class=\"headerlink\" title=\"4.2.1 about 页面\"></a>4.2.1 about 页面</h4><p>执行 new page 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 hexo\\source\\下会生成 about 目录，里面有个 index.md，直接编辑就可以了，然后在主题的_config.yml 中将其配置显示出来。<br>上述步骤，也可以手工生成，在 hexo\\source\\下手工新建 about 和 index.md 也是完全等价的。</p>\n<h4 id=\"4-2-2-404-页面\"><a href=\"#4-2-2-404-页面\" class=\"headerlink\" title=\"4.2.2 404 页面\"></a>4.2.2 404 页面</h4><p>GitHub Pages 自定义<a href=\"https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/\">404 页面</a>非常容易，直接在根目录下创建自己的 404.html 就可以。但是自定义 404 页面仅对绑定顶级域名的项目才起作用，GitHub 默认分配的二级域名是不起作用的，使用 hexo server 在本机调试也是不起作用的。</p>\n<p>其实，404 页面可以做更多有意义的事，目前有如下几个公益 404 接入地址:</p>\n<p><a href=\"http://www.qq.com/404/\">腾讯公益 404</a><br><a href=\"http://yibo.iyiyun.com/Index/web404\">404 公益_益云(公益互联网)社会创新中心</a><br><a href=\"http://404page.missingkids.org.tw/\">失蹤兒童少年資料管理中心 404</a></p>\n<h3 id=\"4-3-hexo-更多介绍\"><a href=\"#4-3-hexo-更多介绍\" class=\"headerlink\" title=\"4.3 hexo 更多介绍\"></a>4.3 hexo 更多介绍</h3><h4 id=\"4-3-1-目录介绍\"><a href=\"#4-3-1-目录介绍\" class=\"headerlink\" title=\"4.3.1 目录介绍\"></a>4.3.1 目录介绍</h4><p>默认目录结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── .deploy</span><br><span class=\"line\">├── public</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">├── <span class=\"built_in\">source</span></span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">├── themes</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>.deploy：执行 hexo deploy 命令部署到 GitHub 上的内容目录</li>\n<li>public：执行 hexo generate 命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout 模板文件目录，其中的 md 文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些 javascript 脚本</li>\n<li>source：文章源码目录，该目录下的 markdown 和 html 文件均会被 hexo 处理。该页面对应 repo 的根目录，404 文件</li>\n<li>favicon.ico 文件，CNAME 文件等都应该放这里，该目录下可新建页面目录。</li>\n<li>_drafts：草稿文章</li>\n<li>_posts：发布文章</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明 hexo 的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<h4 id=\"4-3-2-config-yml-简单说明：\"><a href=\"#4-3-2-config-yml-简单说明：\" class=\"headerlink\" title=\"4.3.2 _config.yml 简单说明：\"></a>4.3.2 _config.yml 简单说明：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hexo Configuration</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: http://zespia.tw/hexo/docs/configure.html</span></span><br><span class=\"line\"><span class=\"comment\">## Source: https://github.com/tommy351/hexo/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Site #整站的基本信息</span></span><br><span class=\"line\">title: 刘小光 <span class=\"comment\">#网站标题</span></span><br><span class=\"line\">subtitle: 求知，好奇，审美。就自己仅有的才能去发挥，去表达内心深刻的感觉。 <span class=\"comment\">#网站副标题</span></span><br><span class=\"line\">description: <span class=\"comment\">#网站描述，给搜索引擎用的，在生成html中的head-&gt;meta中可看到</span></span><br><span class=\"line\">author: 刘小光 <span class=\"comment\">#网站作者，在下方显示</span></span><br><span class=\"line\">email: vincexgliu@gmail.com.com <span class=\"comment\">#联系邮箱</span></span><br><span class=\"line\">language: zh-CN <span class=\"comment\">#语言</span></span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL #域名和文件结构</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class=\"line\">url: http://ibruce.info <span class=\"comment\">#你的域名</span></span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Writing #写文章选项</span></span><br><span class=\"line\">new_post_name: :title.md <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\">default_layout: post <span class=\"comment\">#默认layout方式</span></span><br><span class=\"line\">auto_spacing: <span class=\"literal\">false</span> <span class=\"comment\"># Add spaces between asian characters and western characters</span></span><br><span class=\"line\">titlecase: <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\">external_link: <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\">max_open_file: 100</span><br><span class=\"line\">multi_thread: <span class=\"literal\">true</span></span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: <span class=\"literal\">false</span></span><br><span class=\"line\">highlight: <span class=\"comment\">#代码高亮</span></span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span> <span class=\"comment\">#是否启用</span></span><br><span class=\"line\">  line_number: <span class=\"literal\">false</span> <span class=\"comment\">#是否显示行号</span></span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Category &amp; Tag #分类与标签</span></span><br><span class=\"line\">default_category: uncategorized <span class=\"comment\"># default</span></span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突</span></span><br><span class=\"line\"><span class=\"comment\">## 2: Enable pagination</span></span><br><span class=\"line\"><span class=\"comment\">## 1: Disable pagination</span></span><br><span class=\"line\"><span class=\"comment\">## 0: Fully Disable</span></span><br><span class=\"line\">archive: 1</span><br><span class=\"line\">category: 1</span><br><span class=\"line\">tag: 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Server #本地服务参数</span></span><br><span class=\"line\"><span class=\"comment\">## Hexo uses Connect as a server</span></span><br><span class=\"line\"><span class=\"comment\">## You can customize the logger format as defined in</span></span><br><span class=\"line\"><span class=\"comment\">## http://www.senchalabs.org/connect/logger.html</span></span><br><span class=\"line\">port: 4000</span><br><span class=\"line\">logger: <span class=\"literal\">true</span></span><br><span class=\"line\">logger_format:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Date / Time format #日期显示格式</span></span><br><span class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></span><br><span class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></span><br><span class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class=\"line\">date_format: MMM D YYYY</span><br><span class=\"line\">time_format: H:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pagination #分页设置</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\">per_page: 10 <span class=\"comment\">#每页10篇文章</span></span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disqus #社会化评论disqus，我使用多说，在主题中配置</span></span><br><span class=\"line\">disqus_shortname:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Extensions #插件，暂时未安装插件</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></span><br><span class=\"line\"><span class=\"comment\">## 主题</span></span><br><span class=\"line\">theme: modernist <span class=\"comment\"># raytaylorism # pacman # modernist # light</span></span><br><span class=\"line\">exclude_generator:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment #部署</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: http://zespia.tw/hexo/docs/deploy.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repository: git@github.com:xiaogliu/xiaogliu.github.io.git</span><br><span class=\"line\">  branch: main <span class=\"comment\">#你的GitHub Pages仓库</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-3-修改局部页面\"><a href=\"#4-3-3-修改局部页面\" class=\"headerlink\" title=\"4.3.3 修改局部页面\"></a>4.3.3 修改局部页面</h4><p>页面展现的全部逻辑都在每个主题中控制，源代码在 hexo\\themes\\你使用的主题\\中，以 modernist 主题为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── languages          <span class=\"comment\">#多语言</span></span><br><span class=\"line\">|   ├── default.yml    <span class=\"comment\">#默认语言</span></span><br><span class=\"line\">|   └── zh-CN.yml      <span class=\"comment\">#中文语言</span></span><br><span class=\"line\">├── layout             <span class=\"comment\">#布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></span><br><span class=\"line\">|   ├── _partial       <span class=\"comment\">#局部的布局，此目录下的*.ejs是对头尾等局部的控制</span></span><br><span class=\"line\">|   └── _widget        <span class=\"comment\">#小挂件的布局，页面下方小挂件的控制</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>             <span class=\"comment\">#源码</span></span><br><span class=\"line\">|   ├── css            <span class=\"comment\">#css源码</span></span><br><span class=\"line\">|   |   ├── _base      <span class=\"comment\">#*.styl基础css</span></span><br><span class=\"line\">|   |   ├── _partial   <span class=\"comment\">#*.styl局部css</span></span><br><span class=\"line\">|   |   ├── fonts      <span class=\"comment\">#字体</span></span><br><span class=\"line\">|   |   ├── images     <span class=\"comment\">#图片</span></span><br><span class=\"line\">|   |   └── style.styl <span class=\"comment\">#*.styl引入需要的css源码</span></span><br><span class=\"line\">|   ├── fancybox       <span class=\"comment\">#fancybox效果源码</span></span><br><span class=\"line\">|   └── js             <span class=\"comment\">#javascript源代码</span></span><br><span class=\"line\">├── _config.yml        <span class=\"comment\">#主题配置文件</span></span><br><span class=\"line\">└── README.md          <span class=\"comment\">#用GitHub的都知道</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你需要修改头部，直接修改 hexo\\themes\\modernist\\layout_partial\\header.ejs，比如头上加个搜索框：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;search&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;//google.com/search&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span> <span class=\"attr\">accept-charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;search&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;q&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;search&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">&quot;off&quot;</span> <span class=\"attr\">autocapitalize</span>=<span class=\"string\">&quot;off&quot;</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Search&quot;</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;q&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;site:&lt;%- config.url.replace(/^https?:\\/\\//, &#x27;&#x27;) %&gt;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将如上代码加入即可，您需要修改 css 以便这个搜索框比较美观。</p>\n<p>再如，你要修改页脚版权信息，直接编辑 hexo\\themes\\modernist\\layout_partial\\footer.ejs。同理，你需要修改 css，直接去修改对应位置的 styl 文件。</p>\n<h2 id=\"五、多台电脑协同维护-blog\"><a href=\"#五、多台电脑协同维护-blog\" class=\"headerlink\" title=\"五、多台电脑协同维护 blog\"></a>五、多台电脑协同维护 blog</h2><p>这就需要一开始配置 github 仓库时做好：第一次搭建 blog 时 git 新建两个分支，一个 main，发布更新，一个 source（或其他任意名称）进行维护(放置所有原始 markdown 文件)。每次更新 blog，都是再 source 分支更新，然后 deploy 到 main。</p>\n<blockquote>\n<p>我第一次搭建 blog 时，发布的分支和维护的分支没有区分，虽然建了两个分支，但并不清楚原理，时隔几个月再看时，发现维护的 source 分支并没有及时推送到远程仓库，结果，拉回 source 分支一看，markdown 文件都丢失了，这样发布 main 后，之前的文件就都没有了！</p>\n</blockquote>\n<ul>\n<li><p>日常维护流程：<br>1、在 source 分支添加、修改 blog 内容，修改完后 git add , commit, push；<br>2、执行 hexo g -d，发布到 main（_config.yml 中的 deploy 参数，分支已经设置为 main）</p>\n</li>\n<li><p>本地资料丢失（比如重装电脑或者更换电脑）后进行下列步骤维护：</p>\n</li>\n</ul>\n<p>1、将 source 分支拉到本地</p>\n<p><strong>进行<code>hexo</code>命令操作前，确保本地已安装 hexo 命令行工具</strong></p>\n<blockquote>\n<p>检测方法：在命令行中输入<code>hexo</code>看有无版本信息，没有的执行命令<code>npm install hexo-cli -g</code>安装</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b <span class=\"built_in\">source</span> https://github.com/xiaogliu/xiaogliu.github.io</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>之所以日常维护每次更改 markdown 都要 push，实际也是备份的过程，不然拉回的是不完整的 blog</p>\n</blockquote>\n<p>2、进入 hexo 文件夹，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实际不需要重新 npm install hexo、npm install、npm install hexo-deployer-git，因为执行 npm install，hexo,hexo-deployer-git 就已经安装，因为 package.json 文件里都写了相应依赖了，如下</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;hexo-site&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;private&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;hexo&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;3.2.2&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo&quot;</span>: <span class=\"string\">&quot;^3.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo-deployer-git&quot;</span>: <span class=\"string\">&quot;^0.1.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo-generator-archive&quot;</span>: <span class=\"string\">&quot;^0.1.4&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo-generator-category&quot;</span>: <span class=\"string\">&quot;^0.1.3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo-generator-index&quot;</span>: <span class=\"string\">&quot;^0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo-generator-tag&quot;</span>: <span class=\"string\">&quot;^0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo-renderer-ejs&quot;</span>: <span class=\"string\">&quot;^0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo-renderer-marked&quot;</span>: <span class=\"string\">&quot;^0.2.10&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo-renderer-stylus&quot;</span>: <span class=\"string\">&quot;^0.3.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;hexo-server&quot;</span>: <span class=\"string\">&quot;^0.2.0&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、遇到问题及解决方案\"><a href=\"#六、遇到问题及解决方案\" class=\"headerlink\" title=\"六、遇到问题及解决方案\"></a>六、遇到问题及解决方案</h2><h3 id=\"1-端口冲突\"><a href=\"#1-端口冲突\" class=\"headerlink\" title=\"1. 端口冲突\"></a>1. 端口冲突</h3><p>问题描述: 有时使用 hexo 默认指令<code>hexo server</code>会出现本地没法预览的情况。因为 hexo 本地预览，默认端口是<code>4000</code>，若该端口被占用，则无法启动预览</p>\n<p>解决办法: 开启本地服务时指定端口就可以了，比如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s -p <span class=\"number\">3600</span> <span class=\"comment\">// 指定3600端口</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置错误\"><a href=\"#2-配置错误\" class=\"headerlink\" title=\"2. 配置错误\"></a>2. 配置错误</h3><p>问题描述: <code>FATAL Cannot set property &#39;lastIndex&#39; of undefined</code> </p>\n<p>解决方法：将文件<code>_config.yml</code>中的<code>auto_detect</code>设为<code>false</code>，详见<a href=\"https://github.com/hexojs/hexo/issues/1627\">Hexo 3.2.0-beta.2 test result report</a>。</p>\n<h3 id=\"3-command-not-found-hexo\"><a href=\"#3-command-not-found-hexo\" class=\"headerlink\" title=\"3. command not found: hexo\"></a>3. <code>command not found: hexo</code></h3><p>问题描述： 之前使用 Ok，忽然就<code>command not found: hexo</code>，可能的原因是改变了 node 版本。</p>\n<p>解决办法：重新安装 hexo-cli： <code>npm install hexo-cli -g</code></p>\n<h3 id=\"4-版本冲突\"><a href=\"#4-版本冲突\" class=\"headerlink\" title=\"4. 版本冲突\"></a>4. 版本冲突</h3><p>问题描述: 升级完 Node.js 后出现这个问题: <code>The &quot;mode&quot; argument must be integer. Received an instance of Object</code></p>\n<p>解决办法: Hexo 和 Node 版本不匹配, 升级 Hexo 到最新版就好</p>\n<h3 id=\"5-升级导致兼容问题\"><a href=\"#5-升级导致兼容问题\" class=\"headerlink\" title=\"5. 升级导致兼容问题\"></a>5. 升级导致兼容问题</h3><p>问题描述: 升级完 Hexo 后发现前后分页不能渲染 Html 了, 而是把源码展示了出来</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%- <span class=\"title function_\">paginator</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">prev_text</span>: <span class=\"string\">&#x27;&lt;i class=&quot;icon-angle-left&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">next_text</span>: <span class=\"string\">&#x27;&lt;i class=&quot;icon-angle-right&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class=\"line\">&#125;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>解决办法: <a href=\"https://hexo.io/docs/helpers.html#paginator\">查看文档</a>, 发现升级完后(0.3.1 -&gt; 6.3.0) 为了安全期间, <code>paginator</code> 函数默认不渲染 Html 代码, 如果想直接渲染, 需要添加 <code>escape: false</code>, 更改后代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%- <span class=\"title function_\">paginator</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">prev_text</span>: <span class=\"string\">&#x27;&lt;i class=&quot;icon-angle-left&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">next_text</span>: <span class=\"string\">&#x27;&lt;i class=&quot;icon-angle-right&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">escape</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>【1】<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">hexo 你的博客</a><br>【2】<a href=\"http://www.cnblogs.com/zhcncn/p/4097881.html%22\">Hexo 搭建 Github 静态博客</a><br>【3】<a href=\"https://www.zhihu.com/question/21193762\">使用 hexo，如果换了电脑怎么更新博客？CrazyMilk 回答</a><br>【4】<a href=\"http://www.baike.com/wiki/ssh\">SSH-互动百科</a><br>【5】<a href=\"https://en.wikipedia.org/wiki/Secure_Shell\">Secure Shell-维基百科</a></p>\n","categories":["Tools"],"tags":["Node.js","工具","hexo"]},{"title":"","url":"https://xiaogliu.github.io/404.html","content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"https://xiaogliu.github.io/\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>","categories":[],"tags":[]},{"title":"关于","url":"https://xiaogliu.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://xiaogliu.github.io/css/personal-style-origin.css","content":"html, body, .page-header, .modal-dialog, .post-header .toolbox{\n  padding-bottom: 27px;\n  background-color: #f8f1e3;\n  letter-spacing: -0.01em;\n  word-spacing: 0.2em;\n  font-family: -apple-system,\"SF UI Text\",Arial,\"PingFang SC\",\"Hiragino Sans GB\",\"Microsoft YaHei\",\"WenQuanYi Micro Hei\",sans-serif;\n  color: #111111;\n}\n.article-content p {\n  color: #111111;\n}\n.content {\n  border-left: 4px solid #f3e8d3;\n}\n.content.content-search {\n  margin-bottom: 20px;\n}\n.article-content blockquote {\n  padding: 2px 15px;\n  border-left: 3px solid #e0dfcc;\n  background-color: #fff8dc;\n}\n.box-prev-next {\n  margin-top: 0;\n  margin-bottom: 70px;\n}\n.box-prev-next .icon {\n  line-height: 24px;\n}\n.article-content h1 {\n  padding-bottom: 5px;\n  border-bottom: 1px solid #d3d3d3;\n}\n.toc-article{\n  width: 200px;\n}\n.toolbox .toolbox-entry, .toolbox-mobile {\n  box-shadow: 2px 5px 15px #777;\n}\n.box-prev-next .icon {\n  margin-top: 4px;\n}\n.article-content img {\n  border: 1px solid #e0dfcc;\n}\ncode {\n  padding: 2px 7px;\n  vertical-align: inherit;\n  margin: 0 5px;\n}\n/******************* code style begin *********************/\ncode, pre, samp {\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  color: black;\n  background-color: #e1d5ef;\n}\nfigure.highlight{\n  padding: 12px;\n  border: 1px solid #e0dfcc;\n  border-radius: 0;\n  background-color: #f5f2f0;\n}\n.highlight pre {\n  line-height: 1.5em;\n  overflow-y: hidden;\n  white-space: pre; /*代码自动缩进*/\n  word-wrap: normal;\n}\n.highlight .gutter pre {\n  padding-right: 15px;\n}\n/******************* code style end *********************/\n.footer {\n  position: absolute;\n  left: 50%;\n  /*bottom: 0;*/\n  width: 760px;\n  margin: 10px auto 0 -380px;\n  padding-top: 10px;\n  font-size: 0.9em;\n  color: #555;\n  border-top: 1px solid #d3d3d3;\n}\n.footer a{\n  color: #551aa1;\n}\n.page-home .footer {\n  display: none;\n}\n.page-archives .footer, .page-category .footer, .page-tag .footer, .page-about .footer, .page-search .footer {\n  width: 500px;\n  margin: 10px auto 0 -250px;\n}\n.toolbox-mobile {\n  bottom: 60px;\n}\n\n/* 通过改sass */\n.toolbox .list-toolbox {\n  display: block;\n}\n.toolbox-entry .icon-angle-down {\n  display: none !important;\n}\n.toolbox-entry .toolbox-entry-text {\n  display: none !important;\n}\n.icon-home {\n  display: inline-block !important;\n}\n.toolbox:hover li a{\n  animation-name: none !important;\n  animation-duration: 0s !important;\n}\n.post-header .toolbox .list-toolbox {\n  display: none;\n}\n.post-header:hover .toolbox .list-toolbox {\n  display: block;\n}\n.post-header .toolbox-entry .icon-angle-down {\n  display: inline-block !important;\n}\n.post-header .icon-home {\n  display: none !important;\n}\n.post-header .toolbox-entry {\n  box-shadow: none;\n  animation: sploosh 1.5s cubic-bezier(0.165, 0.84, 0.44, 1) !important;\n  animation-iteration-count: infinite !important;\n}\n@keyframes sploosh {\n  0% {\n    box-shadow: 0 0 0 0px rgba(153, 153, 153, 0.7);\n  }\n  100% {\n    box-shadow: 0 0 0 10px rgba(153, 153, 153, 0);\n  }\n}\n.post-header:hover .toolbox-entry .icon-angle-down {\n  display: none !important;\n}\n.post-header:hover .icon-home {\n  display: inline-block !important;\n}\n\n/* 通过改sass end */\n\n@media screen and (max-width: 767px) {\n  html, body, .page-header, .modal-dialog, .post-header .toolbox {\n    padding-bottom: 5px;\n  }\n  .footer {\n    position: relative;\n    width: 96% !important;\n    left: 0;\n    margin: 2% !important;\n    padding-top: 10px;\n    font-size: 0.9em;\n    color: #555;\n    border-top: 1px solid #d3d3d3;\n  }\n}\n","categories":[],"tags":[]},{"title":"分类","url":"https://xiaogliu.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://xiaogliu.github.io/css/personal-style.css","content":".modal-dialog,.page-header,.post-header .toolbox,body,html{padding-bottom:27px;background-color:#f8f1e3;letter-spacing:-.01em;word-spacing:.2em;font-family:-apple-system,\"SF UI Text\",Arial,\"PingFang SC\",\"Hiragino Sans GB\",\"Microsoft YaHei\",\"WenQuanYi Micro Hei\",sans-serif;color:#111}.article-content p{color:#111}.content{border-left:4px solid #f3e8d3}.content.content-search{margin-bottom:20px}.article-content blockquote{padding:2px 15px;border-left:3px solid #e0dfcc;background-color:#fff8dc}.box-prev-next{margin-top:0;margin-bottom:70px}.box-prev-next .icon{line-height:24px;margin-top:4px}.article-content h1{padding-bottom:5px;border-bottom:1px solid #d3d3d3}.article-content img,figure.highlight{border:1px solid #e0dfcc}.toc-article{width:200px}.toolbox .toolbox-entry,.toolbox-mobile{box-shadow:2px 5px 15px #777}code{padding:2px 7px;vertical-align:inherit;margin:0 5px}code,pre,samp{font-family:Consolas,Monaco,'Andale Mono',monospace;color:#000;background-color:#e1d5ef}figure.highlight{padding:12px;border-radius:0;background-color:#f5f2f0}.highlight pre{line-height:1.5em;overflow-y:hidden;white-space:pre;word-wrap:normal}.highlight .gutter pre{padding-right:15px}.footer{position:absolute;left:50%;width:760px;margin:10px auto 0 -380px;padding-top:10px;font-size:.9em;color:#555;border-top:1px solid #d3d3d3}.footer a{color:#551aa1}.page-home .footer{display:none}.page-about .footer,.page-archives .footer,.page-category .footer,.page-search .footer,.page-tag .footer{width:500px;margin:10px auto 0 -250px}.toolbox-mobile{bottom:60px}.toolbox .list-toolbox{display:block}.toolbox-entry .icon-angle-down,.toolbox-entry .toolbox-entry-text{display:none!important}.icon-home{display:inline-block!important}.toolbox:hover li a{animation-name:none!important;animation-duration:0s!important}.post-header .toolbox .list-toolbox{display:none}.post-header:hover .toolbox .list-toolbox{display:block}.post-header .toolbox-entry .icon-angle-down{display:inline-block!important}.post-header .icon-home,.post-header:hover .toolbox-entry .icon-angle-down{display:none!important}.post-header .toolbox-entry{box-shadow:none;animation:sploosh 1.5s cubic-bezier(.165,.84,.44,1)!important;animation-iteration-count:infinite!important}@keyframes sploosh{0%{box-shadow:0 0 0 0 rgba(153,153,153,.7)}100%{box-shadow:0 0 0 10px rgba(153,153,153,0)}}.post-header:hover .icon-home{display:inline-block!important}@media screen and (max-width:767px){.modal-dialog,.page-header,.post-header .toolbox,body,html{padding-bottom:5px}.footer{position:relative;width:96%!important;left:0;margin:2%!important;padding-top:10px;font-size:.9em;color:#555;border-top:1px solid #d3d3d3}}\n","categories":[],"tags":[]},{"title":"搜索","url":"https://xiaogliu.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"标签","url":"https://xiaogliu.github.io/tag/index.html","content":"","categories":[],"tags":[]}]